'---------------------------
' SRAM Memory Model
'---------------------------

Const SRAM_CTRL_SA1	 	= &H01000000
Const SRAM_CTRL_SPC7110 = &H02000000
Const SRAM_CTRL_XBAND 	= &H04000000
Typedef SfcMmcInitFunc = *Function(hCOM AS HANDLE, info As *SFC_CART_INFO) As BOOL
Typedef SfcMmcNextAddressFunc = *Function(hSerial As HANDLE, info As *SFC_CART_INFO, adr AS DWord, readSize AS DWord) As DWord
Typedef SfcMmcExitFunc = *Function(hCOM AS HANDLE, info As *SFC_CART_INFO)

Const SFC_SRAM_MODEL_LENGTH = 3 'sizeof(SFC_SRAM_MODEL)/4-1
Type SFC_ROM_MODEL
	adr As DWord		' ROMのアドレス
	isLoROM AS BOOL		' アクセス方法
	init_cb As SfcMmcInitFunc
	next_cb As SfcMmcNextAddressFunc
	exit_cb As SfcMmcExitFunc
End Type

Type SFC_SRAM_MODEL
	adr As DWord		'セーブ用SRAMのアドレス
	bankStep As DWord	'バンク間の差 (BANK0 70:0000, BANK1 71:0000なら0x010000)
	bankSize As DWord	'そのバンクにおけるSRAM領域のサイズ
	ctrlBus As DWord	'CEとかOEとかWEとか　書くとDisableになる。例外としてSRAM_CTRL_???の代入が許可されている
End Type

Const MODEL_ARRAY_SIZE = 8'sizeof(SFC_MMAP_MODEL)/sizeof(VoidPtr)-1
Type SFC_MMAP_MODEL
	sram As SFC_SRAM_MODEL
	rom As SFC_ROM_MODEL
End Type

Const LoROM_OFFSET_ADR = &H008000
Const HiROM_START_ADR  = &HC00000
TypeDef MODEL_ARRAY_TYPE = DWord '本当はVoidPtrのほうが良いけどキャストが面倒

' ============== LoROM =============
Function LoROM_nextAddress(hSerial As HANDLE, info As *SFC_CART_INFO, adr AS DWord, readSize AS DWord) As DWord
	LoROM_nextAddress = adr + readSize
	if (LoROM_nextAddress And &HFFFF) < &H8000 Then LoROM_nextAddress += &H8000
End Function

' ============== HiROM =============
Function HiROM_nextAddress(hSerial AS HANDLE, info As *SFC_CART_INFO, adr AS DWord, readSize AS DWord) As DWord
	HiROM_nextAddress = adr + readSize
End Function

' ============== ExHiROM =============
Function ExHiROM_nextAddress(hSerial AS HANDLE, info As *SFC_CART_INFO, adr AS DWord, readSize AS DWord) As DWord
	ExHiROM_nextAddress = adr + readSize
	' $C0:0000〜$FF:FFFFまで吸ったら次は$40:0000〜$7F:FFFF
	if ExHiROM_nextAddress > &HFFFFFF Then ExHiROM_nextAddress = &H400000
End Function

' ============== SDD1 =============
Function SDD1_init(hSerial AS HANDLE, info As *SFC_CART_INFO) As BOOL
	' 最初はROMバンク0〜3を吸い出す
	SDD1_SetBanks(hCOM, 0)
	SDD1_PrintBanks(hCOM)
		
	SDD1_init = TRUE
End Function

Function SDD1_nextAddress(hSerial AS HANDLE, info As *SFC_CART_INFO, adr AS DWord, readSize AS DWord) As DWord
	SDD1_nextAddress = adr + readSize
	If SDD1_nextAddress > &HFFFFFF Then
		'ROMバンク0-3を吸い出したので、4-7バンクを吸い出す
		SDD1_SetBanks(hCOM, 4)
		SDD1_PrintBanks(hCOM)
		
		SDD1_nextAddress = HiROM_START_ADR
	End If
End Function

' ============== SPC7110 =============
Function SPC7110_init(hSerial AS HANDLE, info As *SFC_CART_INFO) As BOOL
	DBM("Checking SPC7110...")
	If SPC7110_SetBanks(hSerial, 1, FALSE) = FALSE or _
						SPC7110_SetBanks(hCOM, 0, FALSE) = FALSE Then
		ErrMes(hMainWnd, ex"SPC7110のセットアップに失敗しました。\nSA-1追加回路が接続されているか確認し、Arduinoを再起動してください。", "SPC7110 Bank Control Error", 0)
		ExitSub
	End If
	SPC7110_PrintBanks(hCOM)
		
	SPC7110_init = TRUE
End Function

Function SPC7110_nextAddress(hSerial AS HANDLE, info As *SFC_CART_INFO, adr AS DWord, readSize AS DWord) As DWord
	SPC7110_nextAddress = adr + readSize
	If SPC7110_nextAddress > &HFFFFFF Then
		'ROMバンク0-3を吸い出したので、4-7バンクを吸い出す
		DBM("")
		SPC7110_SetBanks(hSerial, 1, FALSE) 'D0:1,E0:2,F0:3 ... F0:0000にデータROMのバンク3をマップ
		SPC7110_nextAddress = HiROM_START_ADR + &H300000 'F0:0000からリスタート
	End If
End Function


' ============== CX4 =============
Function CX4_init_x2(hSerial AS HANDLE, info As *SFC_CART_INFO) As BOOL
	DBM("CX4 for ROCKMAN X2")
	
	' https://sd2snes.de/files/cx4_notes.txt
	/*
	$7f52: ROM configuration select
	       LoROM: 0: 2x  8Mbit (A21 switches between ROM /CE1 and /CE2)
	              1: 1x 16Mbit (maybe A22 switches but 40-7f/c0-ff are inactive)

	       HiROM: 0: 2x  8Mbit (A20 switches)
	              1: 2x 16Mbit (A21 switches)
	*/
	' Set ROM configuration to 2xROM (8Mx2)
	SetCartRegister(0, &H7f52, 0)
	
	CX4_init_x2 = TRUE
End Function

Function CX4_init_x3(hSerial AS HANDLE, info As *SFC_CART_INFO) As BOOL
	DBM("CX4 for ROCKMAN X3")
	
	' Set ROM configuration to 1xROM (16Mx1)
	SetCartRegister(0, &H7f52, 1)
		
	CX4_init_x3 = TRUE
End Function

' ============== SpLoROM =============
Function SpLoROM_nextAddress(hSerial As HANDLE, info As *SFC_CART_INFO, adr AS DWord, readSize AS DWord) As DWord
	SpLoROM_nextAddress = adr + readSize
	if (SpLoROM_nextAddress And &HFFFF) < &H8000 Then SpLoROM_nextAddress += &H8000
	
	if SpLoROM_nextAddress = &H408000 Then
		SpLoROM_nextAddress = &H808000
		DBM(ex"\r\nSpLoROM アドレスジャンプ $80:8000〜")
	End If
End Function

Function GetMmapModel(info As *SFC_CART_INFO, isWrite AS BOOL, model As *SFC_MMAP_MODEL) As BOOL
	Select Case info->MapType
		Case SFC_MAP_LoROM
			model->sram.adr      =  &H700000
			model->sram.bankStep =  &H010000
			model->sram.bankSize =  &H008000
			model->sram.ctrlBus  =  CBUS_RST
			model->rom.adr       =  LoROM_OFFSET_ADR
			model->rom.isLoROM   =  TRUE
			model->rom.init_cb   =  NULL
			model->rom.next_cb   =  AddressOf(LoROM_nextAddress)
			model->rom.exit_cb   =  NULL


		Case SFC_MAP_HiROM
		'	&H206000
		'	SUPER DONKEY KONG 2 は 30:6000h ~
			model->sram.adr      =  &H306000
			model->sram.bankStep =  &H010000
			model->sram.bankSize =  &H002000
			model->sram.ctrlBus  =  CBUS_RST or CBUS_ROMSEL
			model->rom.adr       =  HiROM_START_ADR
			model->rom.isLoROM   =  FALSE
			model->rom.init_cb   =  NULL
			model->rom.next_cb   =  AddressOf(HiROM_nextAddress)
			model->rom.exit_cb   =  NULL


		'テイルズオブファンタジアなど
		Case SFC_MAP_ExHiROM
			model->sram.adr      =  &HB06000
			model->sram.bankStep =  &H010000
			model->sram.bankSize =  &H002000
			model->sram.ctrlBus  =  CBUS_RST or CBUS_ROMSEL
			model->rom.adr       =  HiROM_START_ADR
			model->rom.isLoROM   =  FALSE
			model->rom.init_cb   =  NULL
			model->rom.next_cb   =  AddressOf(ExHiROM_nextAddress)
			model->rom.exit_cb   =  NULL


		Case SFC_MAP_SA1
			if isWrite Then
				model->sram.adr      =  &H006000
				model->sram.bankStep =  &H010000
				model->sram.bankSize =  &H002000
				model->sram.ctrlBus  =  CBUS_RST or SRAM_CTRL_SA1
				model->rom.adr       =  HiROM_START_ADR
				model->rom.isLoROM   =  FALSE
				model->rom.init_cb   =  NULL
				model->rom.next_cb   =  AddressOf(HiROM_nextAddress)
				model->rom.exit_cb   =  NULL
			Else
				model->sram.adr      =  &H400000
				model->sram.bankStep =  &H010000
				model->sram.bankSize =  &H010000
				model->sram.ctrlBus  =  CBUS_RST or SRAM_CTRL_SA1
				model->rom.adr       =  HiROM_START_ADR
				model->rom.isLoROM   =  FALSE
				model->rom.init_cb   =  NULL
				model->rom.next_cb   =  AddressOf(HiROM_nextAddress)
				model->rom.exit_cb   =  NULL
			End If
	

		Case SFC_MAP_SDD1
			model->sram.adr      =  &H806000
			model->sram.bankStep =  &H010000
			model->sram.bankSize =  &H002000
			model->sram.ctrlBus  =  CBUS_RST
			model->rom.adr       =  HiROM_START_ADR
			model->rom.isLoROM   =  FALSE
			model->rom.init_cb   =  AddressOf(SDD1_init)
			model->rom.next_cb   =  AddressOf(SDD1_nextAddress)
			model->rom.exit_cb   =  NULL


		Case SFC_MAP_SPC7110
			model->sram.adr      =  &H306000
			model->sram.bankStep =  &H010000
			model->sram.bankSize =  &H002000
			model->sram.ctrlBus  =  CBUS_RST or CBUS_ROMSEL or SRAM_CTRL_SPC7110
			model->rom.adr       =  HiROM_START_ADR
			model->rom.isLoROM   =  FALSE
			model->rom.init_cb   =  AddressOf(SPC7110_init)
			model->rom.next_cb   =  AddressOf(SPC7110_nextAddress)
			model->rom.exit_cb   =  NULL


		Case SFC_MAP_SpLoROM
			model->sram.adr      =  &H700000
			model->sram.bankStep =  &H010000
			model->sram.bankSize =  &H008000
			model->sram.ctrlBus  =  CBUS_RST or CBUS_ROMSEL
			model->rom.adr       =  LoROM_OFFSET_ADR
			model->rom.isLoROM   =  TRUE
			model->rom.init_cb   =  NULL
			model->rom.next_cb   =  AddressOf(SpLoROM_nextAddress)
			model->rom.exit_cb   =  NULL


		Case SFC_MAP_BSX
			model->sram.adr      =  &H105000
			model->sram.bankStep =  &H010000
			model->sram.bankSize =  &H001000
			model->sram.ctrlBus  =  CBUS_RST or CBUS_ROMSEL
			model->rom.adr       =  LoROM_OFFSET_ADR
			model->rom.isLoROM   =  TRUE
			model->rom.init_cb   =  NULL
			model->rom.next_cb   =  AddressOf(LoROM_nextAddress)
			model->rom.exit_cb   =  NULL


		Case SFC_MAP_ST010
			model->sram.adr      =  &H680000
			model->sram.bankStep =  &H010000
			model->sram.bankSize =  &H001000
			model->sram.ctrlBus  =  CBUS_RST
			model->rom.adr       =  LoROM_OFFSET_ADR
			model->rom.isLoROM   =  TRUE
			model->rom.init_cb   =  NULL
			model->rom.next_cb   =  AddressOf(LoROM_nextAddress)
			model->rom.exit_cb   =  NULL


		Case SFC_MAP_ST018
			model->sram.adr      =  &H700000
			model->sram.bankStep =  &H010000
			model->sram.bankSize =  &H008000
			model->sram.ctrlBus  =  CBUS_RST
			model->rom.adr       =  LoROM_OFFSET_ADR
			model->rom.isLoROM   =  TRUE
			model->rom.init_cb   =  NULL
			model->rom.next_cb   =  AddressOf(LoROM_nextAddress)
			model->rom.exit_cb   =  NULL


		Case SFC_MAP_CX4_2DC0N
			model->sram.adr      =  &H700000
			model->sram.bankStep =  &H010000
			model->sram.bankSize =  &H008000
			model->sram.ctrlBus  =  CBUS_RST
			model->rom.adr       =  LoROM_OFFSET_ADR
			model->rom.isLoROM   =  TRUE
			model->rom.init_cb   =  AddressOf(CX4_init_x2)
			model->rom.next_cb   =  AddressOf(LoROM_nextAddress)
			model->rom.exit_cb   =  NULL


		Case SFC_MAP_CX4_1DC0N
			model->sram.adr      =  &H700000
			model->sram.bankStep =  &H010000
			model->sram.bankSize =  &H008000
			model->sram.ctrlBus  =  CBUS_RST
			model->rom.adr       =  LoROM_OFFSET_ADR
			model->rom.isLoROM   =  TRUE
			model->rom.init_cb   =  AddressOf(CX4_init_x3)
			model->rom.next_cb   =  AddressOf(LoROM_nextAddress)
			model->rom.exit_cb   =  NULL


		Case SFC_MAP_SF_MENU
			model->sram.adr      =  &H700000
			model->sram.bankStep =  &H010000
			model->sram.bankSize =  &H008000
			model->sram.ctrlBus  =  CBUS_RST
			model->rom.adr       =  LoROM_OFFSET_ADR
			model->rom.isLoROM   =  TRUE
			model->rom.init_cb   =  NULL
			model->rom.next_cb   =  AddressOf(LoROM_nextAddress)
			model->rom.exit_cb   =  NULL


		Case SFC_MAP_XBAND
			model->sram.adr      =  &HE00000
			model->sram.bankStep =  &H008000
			model->sram.bankSize =  &H008000	' 32kbit x2 SRAM
			model->sram.ctrlBus  =  CBUS_RST OR SRAM_CTRL_XBAND
			model->rom.adr       =  HiROM_START_ADR
			model->rom.isLoROM   =  TRUE
			model->rom.init_cb   =  NULL
			model->rom.next_cb   =  AddressOf(HiROM_nextAddress)
			model->rom.exit_cb   =  NULL


		'JRA PAT用（Flash）
		Case SFC_MAP_JRAPAT
			model->sram.adr      =  &HC00000
			model->sram.bankStep =  &H010000
			model->sram.bankSize =  &H008000
			model->sram.ctrlBus  =  CBUS_RST or CBUS_ROMSEL
			model->rom.adr       =  LoROM_OFFSET_ADR
			model->rom.isLoROM   =  TRUE
			model->rom.init_cb   =  NULL
			model->rom.next_cb   =  AddressOf(LoROM_nextAddress)
			model->rom.exit_cb   =  NULL


		Case Else
			debug
	End Select

End Function
