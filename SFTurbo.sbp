'-----------------------------------------------------------------------------
'  イベント プロシージャ
'-----------------------------------------------------------------------------
' このファイルには、ウィンドウ [SFTurbo] に関するイベントをコーディングします。
' ウィンドウ ハンドル: hSFTurbo

' TODO: この位置にグローバルな変数、構造体、定数、関数を定義します。
Dim SFTW_bMove As BOOL

dim hFont_InfoBox As HANDLE

'-----------------------------------------------------------------------------
' ウィンドウメッセージを処理するためのコールバック関数

Function SFTurboProc(hWnd As HWND, dwMsg As DWord, wParam As WPARAM, lParam As LPARAM) As DWord
	' TODO: この位置にウィンドウメッセージを処理するためのコードを記述します。

	' イベントプロシージャの呼び出しを行います。
	SFTurboProc=EventCall_SFTurbo(hWnd,dwMsg,wParam,lParam)
End Function


'-----------------------------------------------------------------------------
' ここから下は、イベントプロシージャを記述するための領域になります。
Sub SFTurbo_open()
	If hSFTurbo = NULL Then CreateDialog(hMainWnd, "SFTurbo")
	MainWnd_Move(0, 0)
	SFTW_bMove = FALSE
End Sub

Sub SFTurbo_close()
	If hSFTurbo = NULL Then ExitSub
	SendMessage(hSFTurbo, WM_CLOSE, 0, 0)
End Sub

Sub SFTurbo_Destroy()
	hSFTurbo = NULL
	DeleteObject(hFont_InfoBox)
	hFont_InfoBox=NULL
End Sub


Sub SFTurbo_Move(x As Integer, y As Integer)
	if SFTW_bMove = TRUE Then ExitSub
	
	Dim sfrect As RECT
	GetWindowRect(hSFTurbo, sfrect)
	Dim mwrect As RECT, mw_width As Long
	GetWindowRect(hMainWnd, mwrect)
	Dim wndframe_x As Long
	wndframe_x = GetSystemMetrics(SM_CXSIZEFRAME) * 2
	
	SFTW_bMove = TRUE
	mw_width = mwrect.right - mwrect.left
	SetWindowPos(hMainWnd, NULL, sfrect.left - mw_width - wndframe_x, sfrect.top, 0, 0, SWP_NOSIZE or SWP_NOACTIVATE)
	SFTW_bMove = FALSE
End Sub


Function SFTWnd(child AS Long) AS HWND
	SFTWnd = GetDlgItem(hSFTurbo, child)
End Function

Function SFTWnd_GetTitleBoxHandle(index As Long) AS HWND	
	Dim SFTWnd_EB_TITLE_TABLE[SFT_SLOT_MAX-1] = [ _
		EB_TITLE_A, _
		EB_TITLE_B _
	] As Long
	
	SFTWnd_GetTitleBoxHandle = GetDlgItem(hSFTurbo, SFTWnd_EB_TITLE_TABLE[index])
End Function

Function SFTWnd_GetRadioButtonHandle(index As Long) AS HWND	
	Dim TABLE[SFT_SLOT_MAX-1] = [ _
		RB_SLOT_A, _
		RB_SLOT_B _
	] As Long
	
	SFTWnd_GetRadioButtonHandle = GetDlgItem(hSFTurbo, TABLE[index])
End Function


Sub SFTWnd_SetTitleBox(index AS Long, header As *SFT_ROM_HEADER)
	if IsSlotEmpty(header) Then
		SetWindowText(SFTWnd_GetTitleBoxHandle(index), "<NOT SLOTTED>")
	Else
		SetWindowText(SFTWnd_GetTitleBoxHandle(index), header->title)
	End If
End Sub

' ==========================================================================================================

/* FROM FULLSNES
  00h 14 ID "BANDAI SFC-ADX" (required, compared against 14-byte ID in BIOS)
  0Eh 2  Zero-filled
  10h 14 Title, padded with spaces (can be 7bit ASCII and 8bit Japanese)
  1Eh 2  Zero-filled
  20h 2  Entrypoint (in bank 20h) ;game starts here (if it is in Slot A)
  22h 2  NMI Vector (in bank 20h) ;if RAM[000000h]=00h: use BIOS NMI handler
  24h 2  IRQ Vector (in bank 20h)
  26h 2  COP Vector (in bank 20h)
  28h 2  BRK Vector (in bank 20h)
  2Ah 2  ABT Vector (in bank 20h)
  2Ch 4  Zero-filled
  30h 3  Unique 24bit ID of a Game (or series of games) (usually 0xh,00h,0yh)
  33h 1  Index within a series (01h and up) (eg. 01h..06h for Gundam 1-6)
  34h 1  ROM Speed (00h=Slow/2.68Mhz, 01h=Fast=3.58MHz)
  35h 1  Chipset/Features (00h=Simple, 01h=SRAM or Linkable?, 03h=Special?)
  36h 1  ROM Size in 128Kbyte Units (04h=512K, 08h=1024K)
  37h 1  SRAM Size in 2Kbyte Units (00h=None, 01h=2K, 04h=8K)
  38h 8  Zero-filled
*/

Const SFT_ROM_OFFSET_SLOT_A = &H200000
Const SFT_ROM_OFFSET_SLOT_B = &H400000

Const SFT_SRAM_OFFSET_SLOT_A = &H600000
Const SFT_SRAM_OFFSET_SLOT_B = &H700000

Type Align(1) SFT_ROM_HEADER
	magic[15] As Byte
	title[15] As Byte
	entry_point As Word
	vector_nmi As Word
	vector_irq As Word
	vector_cop As Word
	vector_brk As Word
	vector_abt As Word
	dummy0 As DWord
	game_id As DWord
	rom_speed As Byte
	chipset As Byte
	rom_size As Byte
	sram_size As Byte
End Type
Const SFT_ROM_MAGIC = "BANDAI SFC-ADX"

/*
  0000h 15 ID "SFC-ADX BACKUP",0   ;Other = begin of free memory
  000Fh 1  Zero
  0010h 14 Title (same as 0010h..001Dh in ROM Header)
  001Eh 1  Zero
  001Fh 1  Zero (except, 01h in Poi Poi Ninja)
  0020h 4  Unique ID and Index in Series (same as 0030h..0033h in ROM Header)
  0024h 1  Filesize (in 2Kbyte units)    (same as 0037h in ROM Header)
  0025h 11 Zero-filled
*/
Type Align(1) SFT_SRAM_HEADER
	magic[15] As Byte
	title[15] As Byte
	game_id As DWord
	file_size As Byte
	dummy0[10] As Byte
End Type
Const SFT_SRAM_MAGIC = "SFC-ADX BACKUP"

Const SFT_SLOT_MAX = 2
Dim SFT_ROM_OFFSET_TABLE[SFT_SLOT_MAX] = [ _
	SFT_ROM_OFFSET_SLOT_A, _
	SFT_ROM_OFFSET_SLOT_B, _
	0 _
] As DWord

Dim SFT_SRAM_OFFSET_TABLE[SFT_SLOT_MAX] = [ _
	SFT_SRAM_OFFSET_SLOT_A, _
	SFT_SRAM_OFFSET_SLOT_B, _
	0 _
] As DWord

Dim SFT_SLOT_NAME_TABLE[SFT_SLOT_MAX] = [ _
	"Slot A", _
	"Slot B", _
	"UNDEFINED" _
] As BytePtr


Sub SFTurbo_CommandButton4_Click()
	dim slot[1] as SFT_ROM_HEADER
	dim sram[1] as SFT_SRAM_HEADER
	Dim i As Long
	Dim info As StringClass

	for i=0 to SFT_SLOT_MAX-1
		if GetSFTurboRomHeader(i,VarPtr(slot[i]))=FALSE Then
			ErrMes(hSFTurbo,"ROM io error.",0,0):	ExitSub
		endif
		
		Dump(VarPtr(slot[i]),sizeof(SFT_ROM_HEADER))
		Dump(VarPtr(sram[i]),sizeof(SFT_SRAM_HEADER))

		SFTWnd_SetTitleBox(i, VarPtr(slot[i]))

		info.sprintf(ex"%s:\r\n", SFT_SLOT_NAME_TABLE[i])
		SFTurboRomHeaderToStringSimple(VarPtr(info), VarPtr(slot[i]))
		info.cat(ex"\r\n")

		SetCheckBox(SFTWnd_GetRadioButtonHandle(i), FALSE)
	Next	

	SetWindowText(SFTWnd(EditBox1), info.ptr)
End Sub

Function GetSFTurboRomHeader(index As Long, header As *SFT_ROM_HEADER) AS BOOL
	if ReadROM(hCOM,header,0, SFT_ROM_OFFSET_TABLE[index], sizeof(SFT_ROM_HEADER),FALSE)=FALSE Then
		GetSFTurboRomHeader=FALSE
		ExitFunction
	End If

	GetSFTurboRomHeader=TRUE
End Function

Function GetSFTurboSramHeader(index As Long, header As *SFT_SRAM_HEADER) AS BOOL
	if ReadROM(hCOM,header,0, SFT_SRAM_OFFSET_TABLE[index], sizeof(SFT_SRAM_HEADER),FALSE)=FALSE Then
		GetSFTurboSramHeader=FALSE
		ExitFunction
	End If

	GetSFTurboSramHeader=TRUE
End Function

Function IsSlotEmpty(header As *SFT_ROM_HEADER) AS BOOL
	if lstrcmp(header->magic, SFT_ROM_MAGIC) = 0 then
		IsSlotEmpty = FALSE
	Else
		IsSlotEmpty = TRUE
	End If
End Function

Sub SFTurboRomHeaderToString(str AS *StringClass, header As *SFT_ROM_HEADER)
	if IsSlotEmpty(header) Then
		str->cat(ex"- mini cartridge is not inserted.\r\n")
		ExitSub
	End If

	str->sprintf( _
		ex"- Magic : %s\r\n- Title : %s\r\n- GameID: %08Xh (Series No.%d)\r\n", _
		header->magic, header->title, _
		ChangeEndianDW2(header->game_id), header->game_id >> 24 _
	)

	dim RomSpeedText As BytePtr
	Select Case header->rom_speed
		Case 0
			RomSpeedText = "Slow/2.68MHz"
		Case 1
			RomSpeedText = "Fast/3.58MHz"
		Case Else
			RomSpeedText = "Unknown"
	End Select

	dim ChipsetText As BytePtr
	Select Case header->chipset
		Case 0
			ChipsetText = "Simple"
		Case 1
			ChipsetText = "SRAM or Linkable"
		Case 3
			ChipsetText = "Special"
		Case Else
			ChipsetText = "Unknown"
	End Select

	dim SramSize[23] As Byte
	if header->sram_size = 0 Then
		lstrcpy(SramSize,"none")
	Else
		wsprintf(SramSize,"%3d KB [%2d Kbit]",2*header->sram_size, 16*header->sram_size)
	End If

	str->sprintf( _
		ex"- RomSize : %d KB [%2d Mbit]\r\n- SramSize: %s\r\n- RomSpeed: %02Xh %s\r\n- Chipset : %02Xh %s\r\n", _
		128*header->rom_size,header->rom_size,_
		SramSize, _
		header->rom_speed, RomSpeedText,_
		header->chipset, ChipsetText,_
	)
	
End Sub

Sub SFTurboRomHeaderToStringSimple(str AS *StringClass, header As *SFT_ROM_HEADER)
	if IsSlotEmpty(header) Then
		str->cat(ex"- mini cartridge is not inserted.\r\n")
		ExitSub
	End If

	dim SramSize[23] As Byte
	if header->sram_size = 0 Then
		lstrcpy(SramSize,"none")
	Else
		wsprintf(SramSize,"%dKB",2*header->sram_size)
	End If

	str->sprintf( _
		ex"- Title : %s\r\n- GameID: %08X\r\n- ROM %dKB / SRAM %s\r\n", _
		header->title, _
		ChangeEndianDW2(header->game_id), _
		128*header->rom_size, SramSize
	)
End Sub


Function IsValidSram(header As *SFT_SRAM_HEADER) AS BOOL
	if lstrcmp(header->magic, SFT_SRAM_MAGIC) = 0 then
		IsValidSram = FALSE
	Else
		IsValidSram = TRUE
	End If
End Function

Sub SFTurboSramHeaderToString(str AS *StringClass, rom As *SFT_ROM_HEADER, header As *SFT_SRAM_HEADER)
	if rom Then
		if rom->sram_size = 0 Then
			str->cat(ex"- SRAM is none.\r\n")
			ExitSub
		End If
	End If

	if IsValidSram(header) Then
		str->cat(ex"- SRAM data is broken.\r\n")
		ExitSub
	End If

	str->sprintf(ex"- SramFile: %s (%d KB)\r\n",_
		header->title, _
		2*header->file_size
	)

End Sub

Sub OnSelectSlot(index As Long)
	dim slot As SFT_ROM_HEADER
	dim sram As SFT_SRAM_HEADER
	if GetSFTurboRomHeader(index,VarPtr(slot))=FALSE Then
		ErrMes(hSFTurbo,"ROM I/O ERROR.",0,0):	ExitSub
	endif	
	if GetSFTurboSramHeader(index,VarPtr(sram))=FALSE Then
		ErrMes(hSFTurbo,"SRAM io error.",0,0):	ExitSub
	endif

	SFTWnd_SetTitleBox(index, VarPtr(slot) )

	Dim info As StringClass
	info.sprintf(ex"%s Infomation:\r\n", SFT_SLOT_NAME_TABLE[index])
	SFTurboRomHeaderToString(VarPtr(info), VarPtr(slot) )
	SFTurboSramHeaderToString(VarPtr(info), VarPtr(slot), VarPtr(sram) )

	SetWindowText(SFTWnd(EditBox1), info.ptr)
End Sub

Sub SFTurbo_RB_SLOT_A_Click()
	OnSelectSlot(0)
End Sub

Sub SFTurbo_RB_SLOT_B_Click()
	OnSelectSlot(1)
End Sub

Sub SFTurbo_Create(ByRef CreateStruct As CREATESTRUCT)
	hFont_InfoBox=CreateFont(-12,0,0,0,400,0,0,0,128,3,2,1,50,"MS Gothic")
	SendMessage(SFTWnd(EditBox1),WM_SETFONT,hFont_InfoBox As WPARAM,0)
End Sub
