' Internal Rom HederとそれをパースしたSFC_CART_INFO構造体関連

'-----------------
' Rom Header Defines
'-----------------

Const SFC_SPEC_HEADER_SIZE=&H20+&H10
Const SFC_SPEC_HEADER_ADDR=&HFFC0-&H10

' ROMヘッダーのマッピング情報
' MapModeの下位4ビット
Enum SFC_MAP_TYPE_RAW
	SFC_MAP_RAW_LoROM = 0
	SFC_MAP_RAW_HiROM = 1
	SFC_MAP_RAW_SDD1= 2
	SFC_MAP_RAW_SA1	= 3
	SFC_MAP_RAW_ExHiROM = 5
	SFC_MAP_RAW_SPC7110 = &H0A
End Enum

Const SFC_CHIPSET_BSX   = &HE5
Const SFC_CHIPSET_CX4   = &HF3
Const SFC_CHIPSET_ST018 = &HF5
Const SFC_CHIPSET_ST010 = &HF6

' HKACが判断したマッピングID
' ROM, SRAMへのアクセス方法を識別
' SFC_MAP_TYPE_RAWと違って連番
Enum SFC_MAP_TYPE
	SFC_MAP_LoROM = 0
	SFC_MAP_HiROM
	SFC_MAP_ExHiROM
	SFC_MAP_SA1
	SFC_MAP_SDD1
	SFC_MAP_SPC7110
	SFC_MAP_SpLoROM '衛星対応カートリッジでかつLoROMで3MBのもの(ダビスタ)
	SFC_MAP_BSX
	SFC_MAP_JRAPAT
	SFC_MAP_ST018
	SFC_MAP_ST010
	SFC_MAP_SF_MENU 'SFメモリカートリッジ
	SFC_MAP_CX4_2DC0N ' ロックマンX2,  8Mbit ROM x2
	SFC_MAP_CX4_1DC0N ' ロックマンX3, 16Mbit ROM x1
	SFC_MAP_TYPE__NUM
End Enum


' ↑のラベル
Dim SFC_MAP_TYPE_LABEL[SFC_MAP_TYPE__NUM] = [
	"LoROM"				,
	"HiROM"				,
	"ExHiROM"			,
	"SA-1 HiROM"		,
	"S-DD1"				,
	"SPC7110"			,
	"SpecialLoROM"		,
	"LoROM (BS-X)"		,
	"LoROM (JRA PAT)"	,
	"LoROM with ST018 "	,
	"LoROM with ST010 "	,
	"MX15001 (SFメモリ)",
	"CX4 for RockMan X2",
	"CX4 for RockMan X3",
	"<invalid mapper id>"
] AS BytePtr

'スーファミヘッダから取得した情報
'後の都合のいい処理がしてある。
'生ヘッダを見たければrawHeaderにアクセス
Type SFC_CART_INFO
	Title[23] As Byte		'ゲームタイトル
	MapType As Long			'SFC_MAP_TYPE ... ROM/RAMのアクセス方法を識別するコード
	Chipset As Byte		'Cartridge parts contents
	RomSize As DWord		'Game ROM Size (byte)
	SramSize As DWord		'Save SRAM Size(byte)
	Country As Byte			'国コード
	Version As Byte			'ROMバージョン
	CheckSum1 As Word		'チェックサム
	CheckSum2 As Word		'チェックサムのNOT
	hasExtraHeader As BOOL	'拡張ヘッダ（FFB0h-FFBFh)があるかどうか
	enableChecksum As BOOL	'チェックサムが有効かどうかMENU PROGRAMとかBSMC等
	isFastRom As BOOL		'false: SlowRrom
'	isLoROM As BOOL			'ROMのマッピングがLoROMなもの。SFC_MAP_LoROM, SA1, SpLoROM, SF_MENUなどでTRUEになる
	isBSX  As BOOL			'BSMCスロットがあるかどうか（衛星放送対応カートリッジかどうか）
	isFlashSave As BOOL		'FLASHセーブかどうか
	MakerCode As Word		'メーカーコード
	GameCode[4] As Byte		'ゲームコードの文字列（Extraheaderがある時のみ有効)
'	AddrOffset As DWord		'ROMの開始アドレス
	
	rawHeader As SFC_CART_HEADER
EndType

' Raw ROM-Header (FFB0h〜)
Type Align(1) SFC_CART_HEADER
	MakerCode 	AS Word	'未使用のこともある
	GameCode	AS DWord
	dummy0[5] 	AS Byte
	FlashSize 	AS Byte
	ExRamSize 	AS Byte
	SpecialVer	AS Byte
	ChipsetSub  As Byte
	'------------------
	GameTitle[20] As Byte
	MapMode 	AS Byte
	Chipset 	AS Byte
	RomSize 	AS Byte
	SramSize 	AS Byte
	CountryID	AS Byte
	OldMakerCode As Byte	'33h固定のはずだが、そうでないものも多い
	Version		As Byte
	Checksum1	AS Word
	Checksum2 	As Word
End Type



'-----------------
' Header Functions
'-----------------

'生のROMヘッダをSFC_CART_INFOに

Sub SloveCartInfo(data As * SFC_CART_HEADER, info As * SFC_CART_INFO)
	'カートリッジのヘッダエリアのデータをSFC_CART_INFOへ格納
	
	Dim i As Long
	
	memcpy(VarPtr(info->rawHeader), data, Sizeof(SFC_CART_HEADER))
	
	'タイトル取得
	memcpy(info, data->GameTitle, 21)
	If info->Title[i] = 0 Then
		lstrcpy(info->Title, "CART CONNECTION ERR")
	Else
		'右からスペースをNULL文字で埋めル
		For i = 20 To 0 Step -1
			If info->Title[i] <> &H20 And info->Title[i] <> 0 Then	exitfor
			info->Title[i] = 0
		Next i
	End If

	info->Title[21] = 0 ' NULL文字挿入
	info->Chipset = data->Chipset
	info->Country = data->CountryID
	info->Version = data->Version
	info->CheckSum1 = data->Checksum1
	info->CheckSum2 = data->Checksum2
	info->isFastRom = data->MapMode And &H10

	info->enableChecksum = TRUE	' 仮決定
	info->isFlashSave = FALSE 	' 仮決定
	

	' 拡張ヘッダがあるかチェック
	' MarkerCodeとGameCodeがASCIIコードから外れてたら拡張ヘッダナシと判定
	Dim p As BytePtr
	p = VarPtr(data->MakerCode)
	info->hasExtraHeader = TRUE
	For i = 0 To 5
		If (p[i] < &H20) Or (p[i] > &H7F) Then
			info->hasExtraHeader = FALSE
			ExitFor
		End If
	Next i
	
	' 拡張ヘッダの情報セット
	If info->hasExtraHeader Then
		info->MakerCode = data->MakerCode
		lstrcpy(info->GameCode, Dw2Str(info->rawHeader.GameCode))
		If lstrcmp(info->GameCode, "	") = 0 Then lstrcpy(info->GameCode, "????")
	Else
		' 拡張ヘッダが無い場合、OldMakerCodeからMakerCodeを作成
		Dim old_gc[2] AS Byte
		wsprintf(old_gc, "%02X", data->OldMakerCode)
		info->MakerCode = GetWord(old_gc)
	End If

	' MapTypeを仮決定。MapModeから判定できない特殊なものは後で決定される
	Select Case (data->MapMode And &H0F)
		Case 0
			info->MapType = SFC_MAP_LoROM
		Case 1
			info->MapType = SFC_MAP_HiROM
		Case 2
			info->MapType = SFC_MAP_SDD1
		Case 3
			info->MapType = SFC_MAP_SA1
		Case 5
			info->MapType = SFC_MAP_ExHiROM
		Case &H0A
			info->MapType = SFC_MAP_SPC7110
		Case Else
			info->MapType = SFC_MAP_LoROM
	End Select
	
	' ChipsetからMapTypeを検討
	Select Case info->Chipset
		Case SFC_CHIPSET_BSX
			info->MapType = SFC_MAP_BSX

		Case SFC_CHIPSET_CX4
			' 同じCX4でもロックマンX2かX3かでMapTypeを変えなきゃならない
			' ゲームタイトルからX2かX3か判定する。
			' 海外版でも文字数が同じなのでこの手法が使える
			If info->Title[9] = GetByte("2") Then
				info->MapType = SFC_MAP_CX4_2DC0N

			ElseIf info->Title[9] = GetByte("3") Then
				info->MapType = SFC_MAP_CX4_1DC0N
			Else
				DBM("[WAN] Failed to detect CX4 ROM Type.")
				info->MapType = SFC_MAP_CX4_1DC0N
			End If

		Case SFC_CHIPSET_ST018
			info->MapType = SFC_MAP_ST018

		Case SFC_CHIPSET_ST010
			info->MapType = SFC_MAP_ST010
			info->SramSize = 4 * 1024		' ST010内蔵RAM

	End Select

	' ROM / SRAMサイズ計算
	If data->RomSize<>0 Then
		info->RomSize = &H0400 << data->RomSize
	Else
		info->RomSize = 0
	End If

	If data->SramSize<>0 Then
		info->SramSize = &H0400 << data->SramSize
	
	Elseif info->hasExtraHeader And data->ExRamSize Then
		info->SramSize = &H0400 << data->ExRamSize

	Elseif info->MapType = SFC_MAP_ST010 Then
		' ST010内蔵RAM
		info->SramSize = 4 * 1024

	Else
		info->SramSize = 0
	End If

	'メーカがEJ（NTT DATA）ならFlashSaveカセット
	If info->MakerCode = &H4A45 Then
		info->isFlashSave = TRUE
		info->MapType = SFC_MAP_JRAPAT
	End If

	if info->isFlashSave Then
		if info->hasExtraHeader Then
			info->SramSize = (1024 << data->FlashSize) As DWord
		Else
			' Flashサイズが無いので仮決定(JRAPAT共通サイズ)
			info->SramSize = (1024 * 128) As DWord
		End If
	End If
			
	'SpecialLoROMはLoROMの衛星対応カートリッジで3MB目を吸うときにバンク切り替えが必要
	'品番がSHVC-ZxxJであるものは衛星対応カートリッジ
	'ここではダビスタ96とサウンドノベルツクールとBSXがヒットするはず。
	'BSXは1MBなのでバンク切り替え必要なし
	If info->GameCode[0] = Asc("Z") And info->GameCode[3] = Asc("J") Then
		info->isBSX = TRUE
		If info->MapType = SFC_MAP_LoROM Then
			If info->RomSize>1024 * 1024 * 2 Then
				info->MapType = SFC_MAP_SpLoROM
				info->RomSize = 1024 * 1024 * 3
			End If
		End If
	End If
	
	'タイトルがMENU PROGRAMならSFM確定
	If lstrcmp("MENU PROGRAM", info->Title) = 0 Then
		info->MapType = SFC_MAP_SF_MENU
		info->enableChecksum = FALSE
	End If
	

	'SUPER FOMATION SOCCERのタイトルーオーバランを修正
	If lstrcmp("SUPER FORMATION SOCCE", info->Title) = 0 Then
		lstrcat(info->Title, "R")
		info->MapType = SFC_MAP_LoROM
	End If

			
EndSub

' those country codes are from fullsnes.
Enum SFC_COUNTRY
	SFC_COUNTRY_JAPAN = 0
	SFC_COUNTRY_ENGLISH
	SFC_COUNTRY_PAL
	SFC_COUNTRY_SWEDEN
	SFC_COUNTRY_FINLAND
	SFC_COUNTRY_DENMARK
	SFC_COUNTRY_FRANCE
	SFC_COUNTRY_HOLLAND
	SFC_COUNTRY_SPAIN
	SFC_COUNTRY_GERMANY
	SFC_COUNTRY_ITALY
	SFC_COUNTRY_CHINA
	SFC_COUNTRY_INDONESIA
	SFC_COUNTRY_KOREA
	SFC_COUNTRY_A
	SFC_COUNTRY_CANADA
	SFC_COUNTRY_BRAZIL
	SFC_COUNTRY_AUSTRALIA
	SFC_COUNTRY_X
	SFC_COUNTRY_Y
	SFC_COUNTRY_Z
	SFC_COUNTRY__NUM
End Enum

' ↑のラベル
Dim SFC_COUNTRY_LABEL[SFC_COUNTRY__NUM] = [
	"[J] Japan"			,
	"[E] USA"			,
	"[P] Europe"		,
	"[W] Sweden"		,
	"[-] Finland"		,
	"[-] Denmark"		,
	"[F] France"		,
	"[H] Holland"		,
	"[S] Spain"			,
	"[D] Germany"		,
	"[I] Italy"			,
	"[C] China"			,
	"[-] Indonesia"		,
	"[K] South Korea"	,
	"[A] Common (0x0E)"	,
	"[N] Canada"		,
	"[B] Brazil"		,
	"[U] Australia"		,
	"[X] Other (0x12)"	,
	"[Y] Other (0x13)"	,
	"[Z] Other (0x14)"	,
	"[ ] Unknown"	
] AS BytePtr

Function GetCountryString(country_code AS Byte) As BytePtr
	if country_code >= SFC_COUNTRY__NUM Then country_code = SFC_COUNTRY__NUM
	GetCountryString = SFC_COUNTRY_LABEL[country_code]
End Function

Function GetMappingString(maptype AS Long) As BytePtr
	if maptype >= SFC_MAP_TYPE__NUM Then maptype = SFC_MAP_TYPE__NUM
	GetMappingString = SFC_MAP_TYPE_LABEL[maptype]
End Function

Function GetChipsetString(info As *SFC_CART_INFO) AS BytePtr
	Dim label AS BytePtr
	
	'http://snesemu.black-ship.net/misc/hardware/-from%20nsrt.edgeemu.com-chipinfo.htm
	Select Case info->Chipset>>4
		Case &H00
			Select Case info->Chipset And &H0F
				Case &H00 : label = "ROM"
				Case &H01 : label = "ROM+RAM"
				Case &H02 : label = "ROM+RAM+BAT"
				Case &H03 : label = "ROM+DSP"
				Case &H04 : label = "ROM+DSP+RAM"
				Case &H05 : label = "ROM+DSP+RAM+BAT"
				Case Else : label = "ROM (?)"
			End Select
		Case &H01 'SuperFX
			Select Case info->Chipset And &H0F
				Case &H03 : label = "[SFX]ROM+MARIO+RAM"
				Case &H04 : label = "[SFX]ROM+GSU+RAM"
				Case &H05 : label = "[SFX]ROM+GSU+RAM+BAT"
				Case &H0A : label = "[SFX]ROM+GSU1+RAM+BAT"
				Case Else : label = "[SFX]ROM+GSU (?)"
			End Select
		Case &H02 : label = "ROM+OBC1+RAM+BAT"
		Case &H03 
			If info->Chipset = &H34 Then
				label = "ROM+SA-1+RAM"
			Elseif info->Chipset = &H35 then
				 label = "ROM+SA-1+RAM+BAT"
			Else
				label = "ROM+SA1 (?)"
			End If
		Case &H04
			If (info->Chipset And &H0F) = 3 Then
				label = "ROM+SDD1"
			Elseif info->Chipset = &H45 then
				label = "ROM+SDD1+RAM+BAT"
			Else
				label = "ROM+SDD1 [unknown:4xh]"
			End If
		Case &H05 : label = "S-RTC+RAM+BAT"
		Case &H0E 
			Select Case info->Chipset And &H0F
				Case &H03 : label = "ROM+SGBCPU+ICD2+2xRAM+GB slot"
				Case &H05 : label = "ROM+2xRAM+MCCBSC+BAT"
				Case Else : label = "ROM+Co-processor (?)"
			End Select
		Case &H0F
			Select Case info->rawHeader.ChipsetSub
				Case &H00
					if info->Chipset = &HF5 Then
						label = "ROM+SPC7110+RAM+BAT"
					Elseif info->Chipset = &HF9 Then
						label = "ROM+SPC7110+RTC+RAM+BAT"
					Else
						label = "ROM+SPC7110 (?)"
					End If

				Case &H01
					If info->RomSize=&H100000 Then
						label = "ROM+ST010"
					Else
						label = "ROM+ST011"
					End If

				Case &H02 : label = "ROM+ST018+RAM+BAT"
				Case &H10 : label = "ROM+CX4"
				Case Else : label = "ROM+Co-processor (?)"
			End Select
		Case Else
			label = "ROM (? unknown chipset)"
	End Select

	GetChipsetString = label
End Function



' 生ヘッダ関連
Function RawHeader_GetRomSpeedString(mapMode As Byte) As BytePtr
	If (mapMode And &H10) Then
		RawHeader_GetRomSpeedString = "Fast"
	Else
		RawHeader_GetRomSpeedString = "Slow"
	End If
End Function

Function RawHeader_GetRomMapString(mapMode As Byte) As BytePtr
	Select Case (mapMode And &H0F)
		Case SFC_MAP_RAW_LoROM
			RawHeader_GetRomMapString = "LoROM"
		Case SFC_MAP_RAW_HiROM
			RawHeader_GetRomMapString = "HiROM"
		Case SFC_MAP_RAW_SDD1
			RawHeader_GetRomMapString = "S-DD1"
		Case SFC_MAP_RAW_SA1
			RawHeader_GetRomMapString = "SA-1"
		Case SFC_MAP_RAW_ExHiROM
			RawHeader_GetRomMapString = "ExHiROM"
		Case SFC_MAP_RAW_SPC7110
			RawHeader_GetRomMapString = "SPC7110"
		Case Else
			RawHeader_GetRomMapString = "unknown"
	End Select
End Function

Function ceil(var As Single) As Long
	ceil = Int(var)
	if var - ceil > 0 Then ceil++
End Function

Const HEADER_INFO_TEXT_LEN = 1024
Function GenerateHeaderInfoText(header As *SFC_CART_INFO, text_buffer as BytePtr, text_len AS SIZE_T) As BOOL
	Dim info AS StringClass
	info.allocStr(HEADER_INFO_TEXT_LEN)

	info.cat(ex"==== Cartridge infomation ====")
	info.sprintf(ex"\r\n- Title: %s ", header->Title As DWord)
	
	Dim publisher_text AS BytePtr
	publisher_text = GetMakerString(header->MakerCode)
	if lstrlen(publisher_text) < 15 Then
		info.sprintf(ex"\r\n- Publisher: %c%c/%s", _
			header->MakerCode As DWord, (header->MakerCode >> 8) As DWord, publisher_text As DWord)
	Else			
		info.sprintf(ex"\r\n- Publisher: %c%c \r\n - %s", _
			header->MakerCode As DWord, (header->MakerCode >> 8) As DWord, publisher_text As DWord)
	Endif

	If header->hasExtraHeader Then		
		info.cat(ex"\r\n- GameCode : SHVC-"): info.cat(header->GameCode)
	End If

	info.sprintf(ex"\r\n- Version  : %d.%d", (1+header->Version/10) As DWord, header->Version Mod 10)
	info.sprintf(ex"\r\n- Checksum : 0x%04X, 0x%04X", header->CheckSum2, header->CheckSum1)

	Dim model AS SFC_MMAP_MODEL, lastbank As DWord
	GetMmapModel(header, FALSE, VarPtr(model)) 

	Dim fastrom[1] = ["Slow", "Fast"] As BytePtr
	Dim lohi[1]	= ["Hi","Lo"] As BytePtr
	info.sprintf(ex"\r\n- RomType : Mode%02X, %s%sROM", _
			header->rawHeader.MapMode  		As DWord, _
			fastrom[header->isFastRom And 1] 	As DWord, _
			lohi[model.rom.isLoROM And 1]		As DWord)

	info.sprintf(ex"\r\n- Mapping : %s", GetMappingString(header->MapType) As DWord)

	Dim chipset_text AS BytePtr
	chipset_text = GetChipsetString(header)
	if lstrlen(chipset_text) < 15 Then
		info.sprintf(ex"\r\n- Chipset : 0x%02X %s", header->Chipset, chipset_text As DWord)
	Else
		info.sprintf(ex"\r\n- Chipset : 0x%02X\r\n - %s", header->Chipset, chipset_text As DWord)
	End If

	info.cat(ex"\r\n- SaveType: ")
	If header->isFlashSave Then 
		info.cat("FLASH")
	Elseif header->SramSize = 0 Then
		info.cat("None")
	Elseif header->MapType = SFC_MAP_ST010 Then
		info.cat("ST010 Internal RAM")
	Else
		info.cat("SRAM")
	End If

	if header->SramSize Then
		lastbank = (model.sram.adr + (model.sram.bankStep) * (ceil(header->SramSize/model.sram.bankSize-1))) + model.sram.bankSize-1
		info.sprintf(ex"\r\n - Map: $%02X:%04X-$%02X:%04X %dbank", _
			model.sram.adr>>16, model.sram.adr And &HFFFF, _
			lastbank>>16, lastbank And &HFFFF, _
			ceil(header->SramSize/model.sram.bankSize))
	End If

	If header->hasExtraHeader Then
		if header->rawHeader.SpecialVer <> 0 Then
			info.sprintf(ex"\r\n- SpecialVersion: 0x%02X", header->rawHeader.SpecialVer)
		Endif
	End If

	If header->isBSX Then	info.cat(ex"\r\nBS Memory Slot detected.")
	If header->hasExtraHeader Then	info.cat(ex"\r\nExtra Header detected.")

	info.cat(ex"\r\n\r\n")
	

	Dim copy_size AS SIZE_T
	if text_len < info.length() Then
		copy_size = text_len
	Else
		copy_size = info.length()
	End If

	memcpy(text_buffer, info.ptr, copy_size)
End Function

' ヘッダかどうか判定
Function isSnesHeader(header As * SFC_CART_HEADER) As BOOL
	Dim i As Long
	For i = 0 To 19
		If header->GameTitle[i] < &H20 Then
			If Not(i>4 And header->GameTitle[i] = 0) Then GoTo * ISH_ERR
		End If
	Next i
	'サイズチェック
	If header->RomSize > &H0D Then GoTo * ISH_ERR 'Over 64Mbit
	isSnesHeader = TRUE
	ExitFunction
	
*ISH_ERR
	isSnesHeader = FALSE
End Function

' Checksumが一致してるかチェック
Function CheckChecksum(info As *SFC_CART_INFO, actualSum AS Word) As BOOL	
	If info->CheckSum2 = (actualSum And &HFFFF) and info->CheckSum1 = (not(actualSum) And &HFFFF) Then
		CheckChecksum = TRUE
	Else
		CheckChecksum = FALSE
	End If
End Function

'チェックサム計算（Byte単位）
Function SumSnesChecksum(data As BytePtr,length As DWord) As DWord
	Dim i As DWord
	SumSnesChecksum=0
	Do
		SumSnesChecksum += data[i]
		If i => length-1 Then ExitDo
		i++
	Loop
End Function

'チェックサム計算（ROM単位）
Function CalcSnesChecksum(info As *SFC_CART_INFO, rom As BytePtr) AS Word
	CalcSnesChecksum = SumSnesChecksum(rom, info->RomSize) As Word

	if (info->MapType = SFC_MAP_SpLoROM) And (info->RomSize = 3*1024) Then
		'3MBの時はラスト8Mbitを再加算
		CalcSnesChecksum += SumSnesChecksum(rom+1024*2, 1024)
	End If
End Function