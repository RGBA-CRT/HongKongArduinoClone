'-----------------------------------------------------------------------------
'  イベント プロシージャ
'-----------------------------------------------------------------------------
' このファイルには、ウィンドウ [MainWnd] に関するイベントをコーディングします。
' ウィンドウ ハンドル: hMainWnd

' TODO: この位置にグローバルな変数、構造体、定数、関数を定義します。

Dim hCOM AS HANDLE
Dim DlgStatus AS DLG_STATUS

'ダイアログの状態
Enum DLG_STATUS
	STATUS_CONNECTED
	STATUS_DUMPING
	STATUS_CLOSED
End Enum

'-----------------------------------------------------------------------------
' ウィンドウメッセージを処理するためのコールバック関数

Function MainWndProc(hWnd As HWND, dwMsg As DWord, wParam As WPARAM, lParam As LPARAM) As DWord
	' TODO: この位置にウィンドウメッセージを処理するためのコードを記述します。

	'デバイス切断接続メッセージ
	if dwMsg=WM_DEVICECHANGE Then
		if DlgStatus=STATUS_CLOSED Then
			'接続されていなかったら
			ListUpComPort(GetDlgItem(hMainWnd,ComList))

		Else if DlgStatus=STATUS_CONNECTED Then
			'Arduinoが抜けてないかチェック
			if CheckFirmware(hCOM,FALSE)=FALSE Then
				DisconnectDevice()
				DBM("Device disconnected.")
			Endif
		
		End If
	End If
	' イベントプロシージャの呼び出しを行います。
	MainWndProc=EventCall_MainWnd(hWnd,dwMsg,wParam,lParam)
End Function

'-----------------------------------------------------------------------------
' ここから下は、イベントプロシージャを記述するための領域になります。
Function MWnd(DlgItem AS Long) AS HWND
	MWnd=GetDlgItem(hMainWnd,DlgItem)
EndFunction

Sub MainWnd_Destroy()
	if hCOM<>0 Then CloseHandle(hCOM)

	HongKongArduinoClone_DestroyObjects()
	PostQuitMessage(0)
End Sub

Sub ResetDBM()
	SetWindowText(MWnd(EditBox1),"")
	DBM(ProgramName+" "+VerStr+ex"\r\nProgrammed by RGBA_CRT 2016\r\nThis program was cloned \r\n     from WinHongKongArduino\r\nCopyright (c) 2014 たにやま\r\n")
End Sub

Sub MainWnd_Create(ByRef CreateStruct As CREATESTRUCT)
	ResetDBM()

	SetIniPath()
	ListUpComPort(GetDlgItem(hMainWnd,ComList))
	SendMessage(MWnd(MAPPING),CB_ADDSTRING,0,"LoROM" AS Long)
	SendMessage(MWnd(MAPPING),CB_ADDSTRING,0,"HiROM" AS Long)
	SendMessage(MWnd(MAPPING),CB_ADDSTRING,0,"ExHiROM" AS Long)
	SendMessage(MWnd(MAPPING),CB_ADDSTRING,0,"SA-1" AS Long)
	
    SendMessage(MWnd(EditBox1),WM_SETFONT,CreateFont(-12,0,0,0,400,0,0,0,SHIFTJIS_CHARSET,OUT_RASTER_PRECIS,0,DEFAULT_QUALITY,FIXED_PITCH,"ＭＳ ゴシック") As DWord ,TRUE)
	SendMessage(hMainWnd,WM_SETICON,ICON_SMALL,LoadImage(GetModuleHandle(0),IDI_ICON1 AS BytePtr,IMAGE_ICON,GetSystemMetrics(SM_CXSMICON),GetSystemMetrics(SM_CYSMICON),LR_DEFAULTCOLOR) As Long)

	SetDlgEnable(STATUS_CLOSED)

	Dim baudrate As DWord
	baudrate=GetPrivateProfileInt(ProgramName,"BaudRate",DEFAULT_BAUDRATE,INIFILE_PATH)
	if baudrate=0 Then baudrate=DEFAULT_BAUDRATE
	SetWindowText(MWnd(EditBox6),Str$(baudrate))
End Sub

Sub SetIniPath()
	'INIファイルへのパスを記録
	Dim Path[MAX_PATH+20] As Byte,i AS Long

	'自己のファイルパスを取得
		GetModuleFileName(NULL,Path,MAX_PATH)
		For i = lstrlen(Path) To 0 Step -1
			If Path[i]=&H5C then ExitFor' \ だったら
		Next i
		Path[i+1]=0'￥以下を潰す

	INIFILE_PATH=calloc(lstrlen(Path)+Len(INIFILE_NAME)+10)
	lstrcpy(INIFILE_PATH,Path)
	lstrcat(INIFILE_PATH,INIFILE_NAME)
EndSub

Sub ListUpComPort(Wnd AS HWND)
	Dim buf AS BytePtr,p AS DWord,C AS Long
	dim QDD_BUFSIZE AS DWord

	QDD_BUFSIZE=GetPrivateProfileInt(ProgramName,"QDDSize",DEFAULT_QDD_BUFSIZE,INIFILE_PATH)
	if QDD_BUFSIZE<1024 Then 
		QDD_BUFSIZE=DEFAULT_QDD_BUFSIZE
		DBM("QDD size fixed.")
		WritePrivateProfileString(ProgramName,"QDDSize",Str$(QDD_BUFSIZE),INIFILE_PATH)
	endif

	SendMessage(Wnd,CB_RESETCONTENT,0,0)

	buf=calloc(QDD_BUFSIZE)
	if QueryDosDevice(NULL,buf,QDD_BUFSIZE) = 0 Then 
		SendMessage(Wnd,CB_ADDSTRING,0,"Error!" AS Long)
		p=GetLastError()
		DBM(ex"COM Port Listup Error!\r\nCode."+Str$(p))
		if p=122 Then
			ErrMes(hMainWnd,ex"デバイスリストバッファのサイズが小さすぎます\n"+INIFILE_NAME+"を開き、QDDSizeの右辺の値を増やしてください。","QueryDosDevice Error",0)
		Endif
		Goto *LUCP_EXIT
	endif	
	Do
		if win_strncmp(buf+p,"COM",3)=TRUE Then	
			SendMessage(Wnd,CB_ADDSTRING,0,(buf+p) AS Long)
			C++
		Endif
		While buf[p]<>0
			p++
		Wend
		p++
		if buf[p+1]=0 Then Exitdo	'ダブルNULLで終了
	Loop

*LUCP_EXIT
	free(buf)

	if C=0 then SendMessage(Wnd,CB_ADDSTRING,0,"None" AS Long)
	SendMessage(Wnd,CB_SETCURSEL,0,0)
EndSub

Sub DBM(Text AS BytePtr)
	Dim LastPos As DWord,hEB AS  HANDLE
	hEB=MWnd(EditBox1)
	LastPos=GetWindowTextLength(hEB)
	SendMessage(hEB,EM_SETSEL,LastPos,LastPos)
	SendMessage(hEB,EM_REPLACESEL,0,Text As Long)
	SendMessage(hEB,EM_REPLACESEL,0,ex"\r\n" As Long)
	OutputDebugString(Text)
	OutputDebugString(ex"\r\n")
EndSub

Sub DBMN(Text AS BytePtr)
	Dim LastPos As DWord,hEB AS  HANDLE
	hEB=MWnd(EditBox1)
	LastPos=GetWindowTextLength(hEB)
	SendMessage(hEB,EM_SETSEL,LastPos,LastPos)
	SendMessage(hEB,EM_REPLACESEL,0,Text As Long)

EndSub

Sub MainWnd_CommandButton5_Click()
	if hCOM=0 then
		'接続
		Dim txCom AS BytePtr,rate AS DWord

		rate=GetDlgItemInt(hMainWnd,EditBox6,NULL,FALSE)
		if rate=0 Then ErrMes(hMainWnd,"ボーレートが不正です。","接続失敗",0):ExitSub

		txCom=GetWndTextMalloc(GetDlgItem(hMainWnd,ComList))
		DBM("Connect to "+MakeStr(txCom))

		hCOM=ConnectToCOM(txCom,rate)

		if hCOM =< 0 Then 
			ErrMes(hMainWnd,MakeStr(txCom)+ex"への接続に失敗しました。\nErr."+Str$(GetLastError()),"接続失敗",0)
			DBM("Failed.")
			hCOM=0
			free(txCom)	
			ExitSub
		Else
			DBM(ex"Connection successful!\r\n")
		endif

		free(txCom)	

		SetWindowText(MWnd(CommandButton5),"Close")
		SetDlgEnable(STATUS_CONNECTED)

		Sleep(500)
		if CheckFirmware(hCOM,TRUE)=FALSE Then 
			'エラーメッセージ関数内で出す。
			DisconnectDevice()
			SetWindowText(MWnd(SRAM_SIZE),"")
			SetWindowText(MWnd(ROM_SIZE),"")
			SetWindowText(MWnd(ROMTITLE),"")
			SetWindowText(MWnd(CART_CIPS),"")
			SetWindowText(MWnd(MAPPING),"")
			ExitSub	
		Endif

		'GetCartInfo
		MainWnd_CommandButton1_Click()

	Else
		'切断
		DisconnectDevice()
		
	endif

End Sub

Sub DisconnectDevice()
	if hCOM=0 Then ExitSub
	CloseHandle(hCOM)
	hCOM=0
	SetWindowText(MWnd(CommandButton5),"Connect")
	SetDlgEnable(STATUS_CLOSED)

	DBM(ex"Connection is closed.\r\n")
End Sub

Sub SetDlgEnable(Mode AS DLG_STATUS)
	'ボタンの有効/無効セット

	Dim isEnable As Long
	if Mode=STATUS_CONNECTED Or Mode=STATUS_DUMPING then
		isEnable=FALSE
	Else Mode=STATUS_CLOSED Then
		isEnable=TRUE
	endif
	EnableWindow(MWnd(ComList),isEnable)
	EnableWindow(MWnd(EditBox6),isEnable)
	EnableWindow(MWnd(Static9),isEnable)
	EnableWindow(MWnd(Static10),isEnable)

	if Mode=STATUS_DUMPING Then isEnable=NOT(isEnable) And &H01

	EnableWindow(MWnd(CommandButton1),NOT(isEnable) And &H01)
	EnableWindow(MWnd(CommandButton2),NOT(isEnable) And &H01)
	EnableWindow(MWnd(CommandButton3),NOT(isEnable) And &H01)
	EnableWindow(MWnd(CommandButton4),NOT(isEnable) And &H01)	

	EnableWindow(MWnd(MAPPING),NOT(isEnable) And &H01)	
	if Mode=STATUS_DUMPING Then 
		EnableWindow(MWnd(CommandButton5),FALSE)
	Else
		EnableWindow(MWnd(CommandButton5),TRUE)		
	endif

	DlgStatus=Mode
EndSub

Function GetWndTextMalloc(hWnd AS HWND) As BytePtr
	'コントロールのテキスト取得
	Dim buf AS BytePtr
	buf=calloc(GetWindowTextLength(hWnd)+20)
	GetWindowText(hWnd,buf,GetWindowTextLength(hWnd)+1)

	GetWndTextMalloc=buf
EndFunction

Sub MainWnd_KeyUp(KeyCode As Long, flags As Long)
'	DBM("PressKey:"+Hex$(KeyCode))
	Select Case KeyCode
		Case &H70 : SpeedTest()	'F1
		Case &H71 : CheckFirmware(hCOM,FALSE)	'F2
		Case &H74 : ListUpComPort(GetDlgItem(hMainWnd,ComList))
	EndSelect
End Sub

Sub SpeedTest()
	'Arduinoとの接続速度テスト
	Dim rd AS BytePtr,mes[256] AS Byte,total As DWord,lt AS DWord,i AS Long
	DBM("Speedtest : Read 1KB*10")
	Const TEST_READ_SIZE=1024*10
	rd=calloc(TEST_READ_SIZE)
	total=0:lt=0
	For i = 0 To 9
		lt=GetTickCount()
		ReadROM(hCOM,rd, 0, i*TEST_READ_SIZE, TEST_READ_SIZE,FALSE)
		total+=GetTickCount()-lt
		wsprintf(mes,ex"\t[%d]Time : %dms",i,GetTickCount()-lt)
		DBM(mes)
	Next i
	wsprintf(mes,ex"Total:%dms\r\nAverage:%dms\r\nSpeed : %dbyte/sec (%dKB/s)\r\n",total,total/9,(TEST_READ_SIZE*10)/(total/1000),(TEST_READ_SIZE*10)/(total/1000)/1000)
	DBM(mes)
	free(rd)
End Sub



Sub MainWnd_CommandButton2_Click()
	'ROM吸出しボタン

	Dim info AS SFC_ROM_HEADER
	Dim path As BytePtr

	GetSFCinfo(info)

#ifndef _DEBUG
	path=SaveDialogCalloc(ex"SFC ROMイメージファイル(*.sfc)\0*.sfc\0すべてのファイル(*.*)\0*.*\0\0","sfc",info.Title)
	if path=0 Then ExitSub
#else
	path="dump.smc"
#endif

	DumpFullROM(VarPtr(info),path)

#ifndef _DEBUG
	free(path)
#endif

	MessageBeep(MB_ICONASTERISK)
End Sub

Sub GetDlgOption(ByRef info as SFC_ROM_HEADER) 
	'LoROM/HiROMの選択とMAD1のチェック取得

	Dim Tmp[2] AS Byte

	GetWindowText(MWnd(MAPPING),Tmp,3)
	if Tmp[0]=Asc("H") Then 
		info.ROMType=SFC_ROM_HiROM
	Elseif Tmp[0]=Asc("S") Then
		info.ROMType=SFC_ROM_SA1
	Else
		info.ROMType=SFC_ROM_LoROM
	Endif

	info.Mad=GetCheckBox(MWnd(CheckBox1))
	if info.Mad=TRUE Then
		if info.ROMType=SFC_ROM_HiROM Then
			info.SRAMAddress=SRAM_ADDRESS_HiROM_MAD
		Else
			info.SRAMAddress=SRAM_ADDRESS_LoROM_MAD
		endif
	endif
EndSub

Function GetCheckBox(Ctrl As HWND) As Byte
	if SendMessage(Ctrl,BM_GETCHECK,0,0) = BST_CHECKED then
		GetCheckBox=TRUE
	Else
		GetCheckBox=FALSE
	endif
endfunction

Sub MainWnd_CommandButton1_Click()
	Dim buf[SFC_SPEC_HEADER_SIZE+2] AS Byte,cartInfo AS SFC_ROM_HEADER
	DBM( "Get Cartridge Infomation")
	
	'ヘッダを読み出し＆ダイアログに情報を表示
	SendControl(hCOM,DEFAULT_CTRLBUS)	'default
	if ReadROM(hCOM,buf, 0, SFC_SPEC_HEADER_ADDR, SFC_SPEC_HEADER_SIZE,FALSE)<>SFC_SPEC_HEADER_SIZE Then
		lstrcpy(cartInfo.Title,"[ERR]通信エラー")
		SetCartInfo(VarPtr(cartInfo))
		ExitSub
	End If
	SloveCartInfo(buf,VarPtr(cartInfo))
	SetCartInfo(VarPtr(cartInfo))

	'アクセスランプをLow
	SetAddress(hCOM,&H000000,FALSE)

End Sub

Sub MainWnd_EditBox6_Change()

End Sub

/*
	Todo:ダブルクリックでテキストボックスを有効にして手動ROM・RAMサイズ入力
*/	

Sub MainWnd_QueryClose(ByRef cancel As Integer)
	SaveIniFile()
End Sub

Sub SaveIniFile()
	Dim ratestr As BytePtr,Tmp AS DWord

	ratestr=GetWndTextMalloc(MWnd(EditBox6))
	WritePrivateProfileString(ProgramName,"BaudRate",ratestr,INIFILE_PATH)
	free(ratestr)

	Tmp=GetPrivateProfileInt(ProgramName,"MaxContinue",DEFAULT_CONTINUE,INIFILE_PATH)
	WritePrivateProfileString(ProgramName,"MaxContinue",Str$(Tmp),INIFILE_PATH)

	Tmp=GetPrivateProfileInt(ProgramName,"QDDSize",DEFAULT_QDD_BUFSIZE,INIFILE_PATH)
	if Tmp=0 Then Tmp=DEFAULT_QDD_BUFSIZE
	WritePrivateProfileString(ProgramName,"QDDSize",Str$(Tmp),INIFILE_PATH)
	
	Tmp=GetPrivateProfileInt(ProgramName,"DumpBufferSize",DEFAULT_DUMP_SIZE,INIFILE_PATH)
	if Tmp <= 0 Then Tmp=DEFAULT_DUMP_SIZE
	WritePrivateProfileString(ProgramName,"DumpBufferSize",Str$(Tmp),INIFILE_PATH)
EndSub

Sub MainWnd_CommandButton3_Click()
	Dim info AS SFC_ROM_HEADER
	Dim path As BytePtr

	GetSFCinfo(info)
#ifndef _DEBUG
	path=SaveDialogCalloc(ex"SRAMイメージファイル(*.srm)\0*.srm\0すべてのファイル(*.*)\0*.*\0\0","srm",info.Title)
	if path=0 Then ExitSub
#else
	path="dump.srm"
#endif

	DumpSRAM(hCOM,VarPtr(info),path)
#ifndef _DEBUG
	free(path)
#endif
	MessageBeep(MB_ICONASTERISK)

End Sub

Sub MainWnd_CommandButton4_Click()
	Dim path AS BytePtr

#ifndef _DEBUG
	path=LoadDialogCalloc(ex"SRAMイメージファイル(*.srm)\0*.srm\0すべてのファイル(*.*)\0*.*\0\0","srm")
	if path=0 Then ExitSub
#else
	path="write.srm"
#endif
	if MessageBox(hMainWnd,ex"この操作を行うとカセット内のセーブデータの内容が消えて上書きされます。\nまた、この機能は未完成のため正常にデータが書き込めない可能性があります。\n続行しますか？",ProgramName+" - SRAM write",MB_YESNO or MB_ICONWARNING) = IDNO Then ExitSub
	Dim info AS SFC_ROM_HEADER
	GetSFCinfo(info)
	WriteSRAM(hCOM,VarPtr(info),path)
#ifndef _DEBUG
	free(path)
#endif
	MessageBeep(MB_ICONASTERISK)
End Sub

Function SaveDialogCalloc(filter AS BytePtr,ext AS String)(defFileName AS BytePtr)	As BytePtr
	Dim tOfn As OPENFILENAME,i As DWord

	'ファイルオープン構造体の初期化
	tOfn.lStructSize = SizeOf(OPENFILENAME)-SizeOf(DWord)*2-SizeOf(VoidPtr)
	tOfn.hwndOwner = hMainWnd
	tOfn.lpstrFilter = filter'ex"wavファイル(*.wav)\0*.wav\0すべてのファイル(*.*)\0*.*\0\0"'StrPtr(sFilter)
	tOfn.nFilterIndex = 1
	tOfn.nMaxFile = MAX_PATH
	tOfn.Flags=OFN_OVERWRITEPROMPT
	tOfn.lpstrDefExt=StrPtr(ext)'"wav"
	tOfn.lpstrFile = calloc(MAX_PATH+10)
	if defFileName<>0 Then lstrcpy(tOfn.lpstrFile,defFileName)

	'ファイルオープンダイアログを表示する
	If GetSaveFileName(tOfn) = 0 Then
		ExitFunction
	End If
	
	SaveDialogCalloc=calloc(lstrlen(tOfn.lpstrFile)+1)
	lstrcpy(SaveDialogCalloc,tOfn.lpstrFile)
	free(tOfn.lpstrFile)
EndFunction

Function LoadDialogCalloc(filter AS BytePtr,ext AS String)	As BytePtr
	Dim tOfn As OPENFILENAME,i As DWord

	'ファイルオープン構造体の初期化
	tOfn.lStructSize = SizeOf(OPENFILENAME)-SizeOf(DWord)*2-SizeOf(VoidPtr)
	tOfn.hwndOwner = hMainWnd
	tOfn.lpstrFilter = filter'ex"wavファイル(*.wav)\0*.wav\0すべてのファイル(*.*)\0*.*\0\0"'StrPtr(sFilter)
	tOfn.nFilterIndex = 1
	tOfn.nMaxFile = MAX_PATH
	tOfn.Flags=OFN_OVERWRITEPROMPT
	tOfn.lpstrDefExt=StrPtr(ext)'"wav"
	tOfn.lpstrFile = calloc(MAX_PATH+10)

	'ファイルオープンダイアログを表示する
	If GetOpenFileName(tOfn) = 0 Then
		ExitFunction
	End If
	
	LoadDialogCalloc=calloc(lstrlen(tOfn.lpstrFile)+1)
	lstrcpy(LoadDialogCalloc,tOfn.lpstrFile)
	free(tOfn.lpstrFile)
EndFunction

Sub MainWnd_RButtonDblClick(flags As Long, x As Integer, y As Integer)
	ResetDBM()
	DBM("Cleared Log.")
End Sub

Sub MainWnd_Static1_DblClick()
	exec("http://hongkongarduino.web.fc2.com/")
End Sub

Sub MainWnd_CommandButton6_Click()
	if hCOM=0 Then ExitSub
	Dim data As BytePtr,adr AS DWord
	data=calloc(&H10000)
	adr=GetDlgItemHex(MWnd(EditBox2))
	DBM("Dump 0x"+Hex$(adr))
'	SendControl(hCOM,12)
	ReadROM(hCOM,data,0,adr,&h5000,GetCheckBox(MWnd(CheckBox5)))
	Dim f AS File
	f.openFile("test.bin",GENERIC_WRITE)
	f.write(data,&h5000)
	f.close()
	DBM("OK")
	Dim p aS DWord,i AS Long
	p=data+&H5000
	For i=0 To 7
		p+=wsprintf(p,"%02X ",data[i])
	Next i
	p+=wsprintf(p,ex"\r\n",data[i])
	For i=0 To 7
		p+=wsprintf(p,"[%c]",data[i])
	Next i
	DBM(data+&H5000)
End Sub

Sub MainWnd_CART_CIPS_Change()

End Sub

Sub MainWnd_MButtonDblClick(flags As Long, x As Integer, y As Integer)
	if GetKeyState(VK_ESCAPE) And &H80 Then MoveWindow(hMainWnd,0,0,475,330,TRUE)
End Sub

Sub MainWnd_CommandButton7_Click()
	Dim data As Byte,adr AS DWord
	data=GetDlgItemHex(MWnd(EditBox3))
	adr=GetDlgItemHex(MWnd(EditBox4))
	DBM("Write 0x"+Hex$(data)+" to 0x"+Hex$(adr))
	WriteROM(hCOM,VarPtr(data),0,adr,1,GetCheckBox(MWnd(CheckBox5)))
End Sub

'RST WE CS OE
Sub MainWnd_CommandButton8_Click()
	if hCOM=0 Then ExitSub
	Dim ctrl AS Byte
	ctrl=GetCheckBox(MWnd(CheckBox2))<<3 or GetCheckBox(MWnd(CheckBox3))<<2 or _
		GetCheckBox(MWnd(CheckBox4))<<1 or GetCheckBox(MWnd(CheckBox5))
	DBM("SetCtrlBus : 0"+Hex$(ctrl))

	SendControl(hCOM,ctrl)
End Sub


Sub MainWnd_CheckBox6_Click()

End Sub
