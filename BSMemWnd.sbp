'-----------------------------------------------------------------------------
'  イベント プロシージャ
'-----------------------------------------------------------------------------
' このファイルには、ウィンドウ [BSMem] に関するイベントをコーディングします。
' ウィンドウ ハンドル: hBSMem

' TODO: この位置にグローバルな変数、構造体、定数、関数を定義します。


'-----------------------------------------------------------------------------
' ウィンドウメッセージを処理するためのコールバック関数

Function BSMemProc(hWnd As HWND, dwMsg As DWord, wParam As WPARAM, lParam As LPARAM) As DWord
	' TODO: この位置にウィンドウメッセージを処理するためのコードを記述します。

	' イベントプロシージャの呼び出しを行います。
	BSMemProc=EventCall_BSMemWnd(hWnd,dwMsg,wParam,lParam)
End Function


'-----------------------------------------------------------------------------
' ここから下は、イベントプロシージャを記述するための領域になります。
Sub BSM_open()
	if hBSMem=NULL Then CreateDialog(hMainWnd,"BSMemWnd")
	MainWnd_Move(0,0)
	BSMW_bMove=FALSE
End Sub

Sub BSM_close()
	if hBSMem=NULL Then ExitSub
	SendMessage(hBSMem,WM_CLOSE,0,0)
End Sub

Dim BSMW_bMove AS BOOL
Sub BSMemWnd_Move(x As Integer, y As Integer)
	if BSMW_bMove=TRUE Then ExitSub
	
	Dim sfrect aS RECT
	GetWindowRect(hBSMem,sfrect)
	Dim mwrect aS RECT, mw_width AS Long
	GetWindowRect(hMainWnd,mwrect)
	Dim wndframe_x AS Long
	wndframe_x = GetSystemMetrics(SM_CXSIZEFRAME)*2

	BSMW_bMove=TRUE
	mw_width=mwrect.right-mwrect.left
	SetWindowPos(hMainWnd,NULL,sfrect.left-mw_width-wndframe_x,sfrect.top,0,0,SWP_NOSIZE or SWP_NOACTIVATE)
	BSMW_bMove=FALSE
End Sub
	
Sub BSMemWnd_ListBox1_SelChange()
	if headerList[0]=NULL Then ExitSub

	Dim idx As Long
	idx=SendMessage(BSMWnd(ListBox1),LB_GETCURSEL,0,0)
	if idx<0 or idx>BSM_SLOT_MAX+1 then ExitSub

	Dim str AS BytePtr
	if headerList[idx]<>NULL Then
		DBM("BSM File #"+Str$(idx))
		str=BSM_printInfo(headerList[idx])
		DBM(str)
		free(str)
	Else
		DBM("BSMem Full Dump")
	End If
End Sub

Function BSMWnd(child AS Long) AS HWND
	BSMWnd=GetDlgItem(hBSMem,child)
End Function

Sub BSMemWnd_Create(ByRef CreateStruct As CREATESTRUCT)
	Dim i=0 As Long
	while slotNameTable[i]<>0
		SendMessage(BSMWnd(BSM_CT),CB_ADDSTRING,0,slotNameTable[i] As Long)
		i++
	Wend
	SendMessage(BSMWnd(BSM_CT),CB_SETCURSEL,0,0)

	i=0
	while packNameTable[i]<>0
		SendMessage(BSMWnd(BSM_MT),CB_ADDSTRING,0,packNameTable[i] As DWord)
		i++
	Wend
	SendMessage(BSMWnd(BSM_MT),CB_SETCURSEL,BSM_UNKNOWN,0)

	'BSMの中身を一覧表示する。
	'CREATE時点ではスロットタイプがMainWndから送られてきていないのでメッセージ送るだけ
	PostMessage(BSMWnd(CommandButton3),BM_CLICK,0,0)
End Sub

Sub BSM_createCartInfoForBSX(ByRef virtualHeader As SFC_CART_INFO)
	Dim idx As Long
	idx=SendMessage(BSMWnd(BSM_CT),CB_GETCURSEL,0,0)
	if idx=-1 Then DBM("Slot Type not selected."):exitsub

	With virtualHeader				
		lstrcpy(.Title,"BSX Mempack")
		.diableChecksum=TRUE
		.ROMSize=1024*1024
		.ROMType=SFC_MAP_HiROM
		.AddrOffset=BSM_GetMempackAdress(idx)
		.isLoROM=BSM_isLoROM(idx)
	End With
End Sub

Sub BSMemWnd_CommandButton1_Click()
	Dim idx As Long
	idx=SendMessage(BSMWnd(BSM_CT),CB_GETCURSEL,0,0)
	if idx=BSM_SLOT_SA1 Then	
		BSM_SA1_MemPackAccess(TRUE)
	End If

	'ダイアログの設定から仮想SFCヘッダを生成してダンプ
	Dim virtualHeader As SFC_CART_INFO
	BSM_createCartInfoForBSX(virtualHeader)

	Dim path AS BytePtr
#ifndef _DEBUG
	path=SaveDialogCalloc(ex"BSMイメージ(*.bs)\0*.bs\0SFC ROMイメージ(*.sfc)\0*.bs\0すべてのファイル(*.*)\0*.*\0\0","bs",virtualHeader.Title)
	if path=0 Then ExitSub
#else
	path="bsdump.bs"
#endif

	DumpFullROM(VarPtr(virtualHeader),path)
	
#ifndef _DEBUG
	free(path)
#endif
	if idx=BSM_SLOT_SA1 Then	
		BSM_SA1_MemPackAccess(FALSE)
	End If
Endsub

	
Sub BSMemWnd_Destroy()
 	hBSMem=NULL
End Sub

Sub BSMemWnd_BSM_MT_SelChange()
	if SendMessage(BSMWnd(BSM_MT),CB_GETCURSEL,0,0) > BSM_8M_TYPE4 Then
		SetWindowText(BSMWnd(EditBox1),"512")
	Else
		SetWindowText(BSMWnd(EditBox1),"1024")
	End If
End Sub

'SA-1のバンク切り替えでメモリパックにアクセスできるようにする
Sub BSM_SA1_MemPackAccess(isStart AS BOOL)
	if isStart Then
		SetCPU_Clock(hCOM,HKAC_CLOCK_CPU_OVERCLOCKED)
		Sleep(500)
		SetCartRegister(&H00,&H2220,&H04,FALSE)	
	Else
		SetCartRegister(&H00,&H2220,&H00,FALSE)		
		SetCPU_Clock(hCOM,HKAC_CLOCK_NORMAL)
	End If
End Sub

Sub BSMemWnd_CommandButton3_Click()
	if hCOM=NULL Then ExitSub
	
	Dim info As *BSM_MEMPACK_INFO
	info=calloc(sizeof(BSM_MEMPACK_INFO))
	BSM_GetMemPackInfo(info)

	Dim mpstatus AS BytePtr
	if info->MP = &H504D Then
		mpstatus="OK"
	Else
		mpstatus="NG"
	End If
	DBM(sprintfStr(ex"MemoryPackInfo:\r\n MagicNum  : %s (%c%c)\r\n FlashType : %d\r\n Capacity  : %dKB\r\n",_
		(mpstatus) As DWord, (info->MP) As DWord, (info->MP>>8) As DWord, (info->DeviceInfo>>4) As DWord, _
		(1 << (info->DeviceInfo And &H0F) ) As DWord
	))

	Dim typeNumber AS Long
	typeNumber=info->DeviceInfo>>4

	if typeNumber<1 And typeNumber>4 Then
		SendMessage(BSMWnd(BSM_MT),CB_SETCURSEL,BSM_UNKNOWN,0)
		DBM("Illegal Memory Pack Type")
	Else	
		SendMessage(BSMWnd(BSM_MT),CB_SETCURSEL,typeNumber-1,0)
	End If
Endsub

'メモリパック自体の情報と、中身のファイルリストを取得する（いつか分離する）
Function BSM_GetMemPackInfo(mempackinfo AS *BSM_MEMPACK_INFO) AS BOOL
	Dim idx AS DWord,cmdBank AS Byte,isLoROM AS BOOL
	Dim info[32] AS Byte
	idx=SendMessage(BSMWnd(BSM_CT),CB_GETCURSEL,0,0)
	cmdBank=(BSM_GetMempackAdress(idx)>>16) AS Byte
	isLoROM=BSM_isLoROM(idx)

	DBM("Bank:"+Hex$(cmdBank)+" isLoROM:"+Str$(isLoROM))

	if idx=BSM_SLOT_BIOS Then
		'Disable BS-X MCC Write Protects
		SetCPU_Clock(hCOM,HKAC_CLOCK_CPU_ENABLED)
		Sleep(500)
		SetCartRegister(&H0C,&H5000,&H80,FALSE)	
		SetCartRegister(&H0D,&H5000,&H80,FALSE)	
		SetCartRegister(&H0E,&H5000,&H80,FALSE)	
	Else if idx=BSM_SLOT_SA1 Then	
		BSM_SA1_MemPackAccess(TRUE)
	End If
	

	'request chip info part1
	SetCartRegister(cmdBank,&H0000,&H38,isLoROM)	
	SetCartRegister(cmdBank,&H0000,&HD0,isLoROM)
	'WAIT(コマンドにオーバーヘッドあるから大丈夫)
	
	ReadROM(hCOM,info,0,(cmdBank<<16)+2,1,isLoROM)

	'enter status mode
	SetCartRegister(cmdBank,&H0000,&H71,isLoROM)	
	'WAIT

	ReadROM(hCOM,info,0,(cmdBank<<16)+&H00FF00,16,isLoROM)
	Dump(info,16)

	'request chip info part2
	SetCartRegister(cmdBank,&H0000,&H72,isLoROM)
	SetCartRegister(cmdBank,&H0000,&H75,isLoROM)

	ReadROM(hCOM,info,0,(cmdBank<<16)+&H00FF00,16,isLoROM)
'	Dump(info,16)
	mempackinfo->MP=(info[0] Or info[2]<<8) AS Word
	mempackinfo->Flags=info[4]
	mempackinfo->DeviceInfo=info[6]
'	Dump(mempackinfo,sizeof(BSM_MEMPACK_INFO))

	'exit status mode
	SetCartRegister(cmdBank,&H0000,&HFF,isLoROM)

	Dim virtualHeader As SFC_CART_INFO
	BSM_createCartInfoForBSX(virtualHeader)

	if BSM_genHeaderList(TRUE,hCOM,virtualHeader.AddrOffset,virtualHeader.isLoROM)=FALSE Then
		DBM(ex"MemoryPack is not working...\r\n")	
		SendMessage(BSMWnd(ListBox1),LB_RESETCONTENT,0,0)
		SendMessage(BSMWnd(ListBox1),LB_ADDSTRING,0,"(Empty)" As Long)
		Goto *BSM_DITECT_BTN_EXIT
	End If
	BSM_listupFiles()
	DBM(ex"MemoryPack has found!\r\n")

*BSM_DITECT_BTN_EXIT
	if idx=BSM_SLOT_BIOS Then
		SetCPU_Clock(hCOM,HKAC_CLOCK_NORMAL)
	Elseif idx=BSM_SLOT_SA1 Then
		BSM_SA1_MemPackAccess(FALSE)
	End If
End Function

Sub BSMemWnd_DropFiles(hDrop As HDROP)
	Dim buf[MAX_PATH] As Byte
	Dim i as long

	Do
		If DragQueryFile(hDrop,i,buf,MAX_PATH)=0 Then Exit Do
		i++
	Loop
	DragFinish(hDrop)	

	if BSM_genHeaderList(FALSE,buf,0,FALSE)=FALSE Then
		DBM("This is not BS Memory Image File.")
		ExitSub
	End If

	BSM_listupFiles()

End Sub

Sub BSM_listupFiles()
	SendMessage(BSMWnd(ListBox1),LB_RESETCONTENT,0,0)

	if headerList[0]=NULL Then
		SendMessage(BSMWnd(ListBox1),LB_ADDSTRING,0,"(Press detect button)" As Long)
		ExitSub
	End If

	Dim str AS StringClass,title[16] AS Byte
	Dim i=0 As Long
	while headerList[i]<>0
		memcpy(title,headerList[i]->raw.title,16)
		str.set("")
		str.sprintf("#%d %s %d/%d",i,title As DWord,headerList[i]->raw.month >> 4,headerList[i]->raw.day >> 3)
		SendMessage(BSMWnd(ListBox1),LB_ADDSTRING,0,str.ptr As Long)
		i++
	Wend
End Sub