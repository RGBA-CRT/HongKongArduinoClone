#include <RGBALib.sbp>

Const SFC_SPEC_HEADER_SIZE=32
Const SFC_SPEC_HEADER_ADDR=&HFFC0

Const HiROM_START_ADR=&HC00000

Const SRAM_ADDRESS_LoROM_NORMAL = &H700000'&H380000
Const SRAM_ADDRESS_LoROM_MAD 	= &H384000

Const SRAM_ADDRESS_HiROM_NORMAL = &H1C0000
Const SRAM_ADDRESS_HiROM_MAD 	= &H206000'&HA06000

Const SRAM_ADDRESS_SA1 = &H400000

Const OE = 1
Const CE = 2
Const WE = 4
Const RST= 8
Const SRAM_READ_NOMAL = RST or WE 
Const SRAM_READ_MAD   = RST or WE or CE
Const SRAM_WRITE_NORMAL=RST or OE
Const SRAM_WRITE_MAD  = RST or OE or CE

Const SRAM_WRITE_SA1 = RST or OE or WE or CE

Const DEFAULT_CTRLBUS = 12

'↓の並びはコンボボックスとあわせること
Enum SFC_ROM_TYPE
	SFC_ROM_ExHiROM = 0
	SFC_ROM_HiROM
	SFC_ROM_LoROM 
	SFC_ROM_SA1
End Enum
	
Type SFC_ROM_HEADER
	Title[21] AS Byte
	ROMType As SFC_ROM_TYPE
	CartType AS Byte
	ROMSize AS DWord
	SRAMSize AS DWord
	SRAMAddress As DWord
	Country AS Byte
	Version AS Byte
	CheckSum1 AS Word
	CheckSum2 AS Word
	Mad AS Byte
EndType

Sub SloveCartInfo(data AS BytePtr,info As *SFC_ROM_HEADER)
	'カートリッジのヘッダエリアのデータをSFC_ROM_HEADERへ格納

	Dim i as Long

	memcpy(info,data,21)
	For i=0 To 20
		if info->Title[i] = 0 Then
			lstrcpy(info->Title,"CART CONNECTION ERR")
			exitfor
		Endif
	Next i
	info->Title[21]=0

	info->CartType = data[22]
	if (info->CartType And &HF0)=&H30 Then
		info->ROMType=SFC_ROM_SA1
		info->SRAMAddress=SRAM_ADDRESS_SA1
	elseif data[21]=&H35 Then
		info->ROMType=SFC_ROM_ExHiROM
	Elseif (data[21] And &H01) = 0 Then 
		info->ROMType=SFC_ROM_LoROM
		info->SRAMAddress=SRAM_ADDRESS_LoROM_NORMAL
	Else
		info->ROMType=SFC_ROM_HiROM
		info->SRAMAddress=SRAM_ADDRESS_HiROM_NORMAL
	Endif
	'	DBM("[SCI]"+Hex$(data[21]))
	
	Select Case (data[23])
		Case &H0D :	info->ROMSize = &H800000	'8MB  = 64MBit
		Case &H0C : info->ROMSize = &H400000	'4MB  = 32MBit 
		Case &H0B : info->ROMSize = &H200000	'2MB  = 16MBit
		Case &H0A : info->ROMSize = &H100000	'1MB  =  8MBit
		Case &H09 : info->ROMSize = &H080000	'512KB = 4MBit
		Case &H08 : info->ROMSize = &H040000	'256KB = 2MBit
	EndSelect

	info->SRAMSize = data[24]
	Select Case (data[24])
		Case &H00 :	info->SRAMSize = &H0000	'なし
		Case &H01 : info->SRAMSize = &H0800	'2KB
		Case &H02 : info->SRAMSize = &H1000	'4KB
		Case &H03 : info->SRAMSize = &H2000	'8KB
		Case &H04 : info->SRAMSize = &H4000	'16KB
		Case &H05 : info->SRAMSize = &H8000	'32KB
		Case &H06 : info->SRAMSize = &H010000	'64KB
		Case &H07 : info->SRAMSize = &H020000	'128KB
	EndSelect

	info->Country = data[25]
	info->Version = data[27]
	info->CheckSum1 = ((data[29] << 8) Or data[28]) AS Word
	info->CheckSum2 = ((data[31] << 8) Or data[30]) AS Word
EndSub

Function SetComTimeOut(hComPortPort AS HANDLE,TimeOut AS DWord) AS Byte
	Dim ct AS COMMTIMEOUTS
	ct.ReadIntervalTimeout=TimeOut		'連続受信タイムアウト
	ct.ReadTotalTimeoutConstant=TimeOut	'Constant+Multiplier*バイト数＝タイムアウト
	ct.ReadTotalTimeoutMultiplier=20
	ct.WriteTotalTimeoutConstant=TimeOut
	ct.WriteTotalTimeoutMultiplier=20

	SetCommTimeouts(hComPortPort,VarPtr(ct))
EndFunction

Function ConnectToCOM(PortName AS BytePtr,rate AS DWord) AS HANDLE
	Dim hComPort As HANDLE
	Dim dcb As DCB_SETTING

	if rate=0 Then rate=DEFAULT_BAUDRATE

	hComPort=CreateFile(PortName,GENERIC_READ Or GENERIC_WRITE,NULL,ByVal NULL,OPEN_EXISTING,FILE_ATTRIBUTE_NORMAL,NULL)
	if hComPort=INVALID_HANDLE_VALUE  Then ConnectToCOM=-1 AS VoidPtr :ExitFunction

	dcb.BaudRate = rate		'転送速度の指定
	dcb.ByteSize = 8		'ビット長の指定
	dcb.fBitFields = &H3001	'バイナリモードのフラグを有効にし
	dcb.Parity = 0			'パリティの設定（パリティなし）
	dcb.StopBits = 0		'ストップビット数を指定(1ビット)
	SetCommState(hComPort,dcb)

	'通信タイムアウトの設定
	SetComTimeOut(hComPort,1000)

	DBM("baudrate="+Str$(rate)+"bps")
	
	ConnectToCOM=hComPort
EndFunction

Sub SendControl(hComPort AS HANDLE,b AS Byte)
	'SetControl pin 0b[RST][WE][CS][OE]
	Dim cmd[1] AS Byte,dwAB AS DWord
	cmd[0]=Asc("c")
	cmd[1]=b
	DBM("SetCtrlBus : 0"+Hex$(b))
	if WriteFile(hComPort,cmd,2,VarPtr(dwAB),ByVal NULL)=FALSE or dwAB<>2 Then DBM("CTL_ERR "+Str$(GetLastError()))
EndSub

Sub SetAddress(hFile AS HANDLE,address AS DWord, isLoROM AS Byte)
	Dim cmd[7] AS Byte
	Dim ReadByte As DWord
	Dim dwReadByte As DWord

	if isLoROM Then
		cmd[0]=Asc("a")
	Else
		cmd[0]=Asc("A")
	Endif

	cmd[1] = (address >> (8 * 0)) AS Byte
	cmd[2] = (address >> (8 * 1)) AS Byte
	cmd[3] = (address >> (8 * 2)) AS Byte

	WriteFile(hFile,cmd,4,VarPtr(dwReadByte),ByVal NULL)

EndSub

Function ReadROM(hFile AS HANDLE,data AS BytePtr, offset AS Long,address AS DWord, size AS Long, isLoROM AS Byte) As Long

	Dim cmd[7] AS Byte
	Dim ReadByte As DWord
	Dim dwReadByte As DWord

	if isLoROM Then
		cmd[0]=Asc("r")
	Else
		cmd[0]=Asc("R")
	Endif

	cmd[1] = (address >> (8 * 0)) AS Byte
	cmd[2] = (address >> (8 * 1)) AS Byte
	cmd[3] = (address >> (8 * 2)) AS Byte

	cmd[4] = (size >> (8 * 0)) AS Byte
	cmd[5] = (size >> (8 * 1)) AS Byte
	cmd[6] = (size >> (8 * 2)) AS Byte

	WriteFile(hFile,cmd,7,VarPtr(dwReadByte),ByVal NULL)

	dwReadByte=0

	Do
		if ReadFile(hFile,(data)+offset + ReadByte, size - ReadByte,VarPtr(dwReadByte),ByVal NULL) = FALSE Then DBM(ex"\r\n    [Connection Error!]"):ExitDo
		ReadByte+=dwReadByte
		if ReadByte <= size Then exitdo
		if ReadByte=0 Then debug
	Loop
	ReadROM=ReadByte
EndFunction



Function CheckFirmware(hFile AS HANDLE,msg As BOOL) AS BOOL
	Dim cmd[1] AS Byte,rsv[6] As byte,FwVer AS Byte,retry AS Long
	Dim dwWD As DWord
	
	cmd[0] = Asc("v")
*SEND_VER_CHECK
	if WriteFile(hFile,cmd,1,VarPtr(dwWD),ByVal NULL)=FALSE Then ExitFunction
	if ReadFile(hFile,rsv, 5 ,VarPtr(dwWD),ByVal NULL)=FALSE Then ExitFunction
	if msg=TRUE Then DBMN("Firmware ID : ") : DBM(rsv)

	FwVer=rsv[4]
	rsv[4]=0

	if lstrcmp(rsv,FIRMWARE_ID)=0 Then 
		if FwVer=FIRMWARE_VERSION Then
			CheckFirmware=TRUE
		Else
			if msg=FALSE Then CheckFirmware=FALSE:ExitFunction
			if MessageBox(hMainWnd,ex"ファームウェアバージョンが不一致です。\nFirmware : ver"+Chr$(FwVer)+ex"\nRequest : ver"+Chr$(FIRMWARE_VERSION)+ex"\n\n続行しますか？","FirmwareVersion mismatch",MB_YESNO or MB_ICONWARNING) = IDYES Then
				CheckFirmware=TRUE
			Else
				CheckFirmware=FALSE
			End If
		End If
	Else
		if retry>3 Then
			if msg=TRUE Then MessageBox(hMainWnd,ex"接続に失敗しました。デバイスからの応答が不正です。\nCOMポート番号　通信レート Arduinoのスケッチなどを確認してください。\n\n正しい場合は、再試行してください。","Firmware mismatch",MB_ICONERROR)
			CheckFirmware=FALSE
		Else
			retry++
			DBM("VerCheck retry...")
			DBM("")
			Goto *SEND_VER_CHECK
		End If

	End If

End Function

Function WriteROM(hFile AS HANDLE,data AS BytePtr, offset AS Long,address AS DWord, size AS Long, isLoROM AS Byte) As Long
	Dim cmd[7] AS Byte
	Dim WriteCount As DWord
	Dim dwWD As DWord

	if isLoROM Then
		cmd[0]=Asc("w")
	Else
		cmd[0]=Asc("W")
	Endif

	cmd[1] = (address >> (8 * 0)) AS Byte
	cmd[2] = (address >> (8 * 1)) AS Byte
	cmd[3] = (address >> (8 * 2)) AS Byte

	cmd[4] = (size >> (8 * 0)) AS Byte
	cmd[5] = (size >> (8 * 1)) AS Byte
	cmd[6] = (size >> (8 * 2)) AS Byte

	WriteFile(hFile,cmd,7,VarPtr(dwWD),ByVal NULL)
	Sleep(10)

	WriteCount=0

	'1バイトずつ送信(100バイトずつウェイト置いた方がいいかも)
	Do
		WriteFile(hFile, data+WriteCount , 1 ,VarPtr(dwWD),ByVal NULL)

		WriteCount+=dwWD
		if WriteCount => size Then exitdo
		if (WriteCount Mod 32) =0 Then Sleep(5)
		if (WriteCount Mod 128) =0 Then Sleep(10)
		if dwWD=0 Then debug
	Loop
	
	WriteROM=WriteCount
	
EndFunction

