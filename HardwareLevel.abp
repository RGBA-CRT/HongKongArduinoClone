'ファーム制御系

Const OE = 1
Const CE = 2
Const WE = 4
Const RST= 8
Const SRAM_READ_NOMAL = RST or WE 
Const SRAM_READ_MAD   = RST or WE or CE
Const SRAM_WRITE_NORMAL=RST or OE
Const SRAM_WRITE_MAD  = RST or OE or CE
Const SRAM_WRITE_SA1 = RST or OE or WE or CE

Const DEFAULT_CTRLBUS = &H0C	'RST WE


Function SetComTimeOut(hSerialPort AS HANDLE,TimeOut AS DWord) AS Byte
	Dim ct AS COMMTIMEOUTS
	ct.ReadIntervalTimeout=TimeOut		'連続受信タイムアウト
	ct.ReadTotalTimeoutConstant=TimeOut	'Constant+Multiplier*バイト数＝タイムアウト
	ct.ReadTotalTimeoutMultiplier=20
	ct.WriteTotalTimeoutConstant=TimeOut
	ct.WriteTotalTimeoutMultiplier=20

	SetCommTimeouts(hSerialPort,VarPtr(ct))
EndFunction

Sub ChangeComBaudrate(hSerial AS HANDLE,rate AS DWord)
	Dim dcb As DCB_SETTING
	GetCommState(hSerial,dcb)
	dcb.BaudRate = rate		'転送速度の指定
	SetCommState(hSerial,dcb)

	FlushCom(hSerial)

	GetCommState(hSerial,dcb)
End Sub

Sub ChangeBaudrate(hSerial AS HANDLE,rate AS DWord)
	'Arduinoレート変更コマンド送信
	Dim cmd[5] AS Byte,dwAB AS DWord
	cmd[0]=Asc("b")
	memcpy(cmd+1,VarPtr(rate),4)

	if WriteFile(hSerial,cmd,5,VarPtr(dwAB),ByVal NULL)=FALSE or dwAB<>5 Then DBM("BC_ERR "+Str$(GetLastError()))
	FlushFileBuffers(hSerial)
	FlushCom(hSerial)

	'PC側レート変更
	ChangeComBaudrate(hSerial,rate)
End Sub

Function OpenComPort(PortName AS BytePtr,rate AS DWord)(inBuffer As DWord,outBuffer AS DWord) AS HANDLE
	Dim hSerial As HANDLE
	Dim dcb As DCB_SETTING

	if rate=0 Then rate=DEFAULT_BAUDRATE

	hSerial=CreateFile(PortName,GENERIC_READ Or GENERIC_WRITE,NULL,ByVal NULL,OPEN_EXISTING,FILE_ATTRIBUTE_NORMAL,NULL)
	if hSerial=INVALID_HANDLE_VALUE  Then OpenComPort=NULL AS VoidPtr :ExitFunction

	'バッファ設定
	if inBuffer=0 Then	inBuffer=1024*10
	if outBuffer=0 Then	outBuffer=1024*10
	if SetupComm(hSerial,inBuffer,outBuffer)=0 Then
		outBuffer=GetLastError()
		DBM("Init com error")
		debug
	End If

	FlushCom(hSerial)

	dcb.BaudRate = rate		'転送速度の指定
	dcb.ByteSize = 8		'ビット長の指定
	dcb.fBitFields = TRUE	'バイナリモードのフラグを有効にし
	dcb.Parity = 0			'パリティの設定（パリティなし）
	dcb.StopBits = 0		'ストップビット数を指定(1ビット)
	SetCommState(hSerial,dcb)

	'通信タイムアウトの設定
	SetComTimeOut(hSerial,1000)

'	DBM("baudrate="+Str$(rate)+"bps")
	
	OpenComPort=hSerial
EndFunction

'RST OE WE CS などを制御
Sub SendControl(hSerial AS HANDLE,b AS Byte)
	Dim cmd[1] AS Byte,dwAB AS DWord
	cmd[0]=Asc("c")
	cmd[1]=b
	if WriteFile(hSerial,cmd,2,VarPtr(dwAB),ByVal NULL)=FALSE or dwAB<>2 Then DBM("CTL_ERR "+Str$(GetLastError()))
EndSub

'アドレスセット
Sub SetAddress(hSerial AS HANDLE,address AS DWord, isLoROM AS Byte)
	Dim cmd[7] AS Byte
	Dim ReadByte As DWord
	Dim dwReadByte As DWord

	'[0]コマンド
	if isLoROM Then
		cmd[0]=Asc("a")
	Else
		cmd[0]=Asc("A")
	Endif

	'[1-3] アドレス(ビッグエンディアン)
	cmd[1] = (address >>  0) AS Byte
	cmd[2] = (address >>  8) AS Byte
	cmd[3] = (address >> 16) AS Byte

	WriteFile(hSerial,cmd,4,VarPtr(dwReadByte),ByVal NULL)
EndSub

'カートリッジからのデータ受信(ROMだけでなくカートリッジ上のメモリ空間も対象)
'コントロールバスはいじらないので手動でやる必要あり
Function ReadROM(hSerial AS HANDLE,data AS BytePtr, offset AS Long,address AS DWord, size AS Long, isLoROM AS Byte) As Long
	Dim cmd[7] AS Byte
	Dim ReadByte As DWord
	Dim dwReadByte As DWord

	if isLoROM Then
		cmd[0]=Asc("r")	'LoROM	
	Else
		cmd[0]=Asc("R")	'HiROM
	Endif

	cmd[1] = (address >>  0) AS Byte
	cmd[2] = (address >>  8) AS Byte
	cmd[3] = (address >> 16) AS Byte

	cmd[4] = (size >>   0) AS Byte
	cmd[5] = (size >>   8) AS Byte
'	cmd[6] = (size >>  16) AS Byte

	if size>&HFFFF Then debug

	WriteFile(hSerial,cmd,6,VarPtr(dwReadByte),ByVal NULL)

	dwReadByte=0
	Const HKAC_HW_RETRY = 500
	Dim dwErrors AS DWord,retry AS DWord
	Dim cs AS COMSTAT

	Do		
		if retry>HKAC_HW_RETRY or GetKeyState(VK_ESCAPE) And &H80 Then ExitDo

		ClearCommError(hSerial,VarPtr(dwErrors),cs)
		if cs.cbInQue=0 Then 
			retry++
			if retry Mod 100 Then Sleep(1)
'			if retry Mod 50 Then Sleep(5)
			Continue
		End If

		if ReadFile(hSerial,(data)+offset + ReadByte, /*size - ReadByte*/cs.cbInQue,VarPtr(dwReadByte),ByVal NULL) = FALSE Then DBM(ex"\r\n    [Connection Error!]"):ExitDo
		ReadByte+=dwReadByte
	/*	if size<>dwReadByte then 
			DBM(Hex$(ReadByte)+"/"+Hex$(size)+" delta"+Hex$(dwReadByte))
		End If*/
		if ReadByte >= size Then exitdo
		'if dwReadByte=0 Then debug
	Loop
	'DBM(Str$(retry))

	printf(ex"%03X:%X/%X bytes recived %d\n",address,ReadByte,size,retry)
'	Dump(data,size)
	ReadROM=ReadByte
EndFunction

'カートリッジへの出力データ送信(ROMだけでなくカートリッジ上のメモリ空間も対象)
'コントロールバスはいじらないので手動でやる必要あり
Function WriteROM(hSerial AS HANDLE,data AS BytePtr, offset AS Long,address AS DWord, size AS Long, isLoROM AS Byte) As Long
	Dim cmd[7] AS Byte
	Dim WriteCount As DWord
	Dim dwWD As DWord

	if isLoROM Then
		cmd[0]=Asc("w")
	Else
		cmd[0]=Asc("W")
	Endif

	cmd[1] = (address >>  0) AS Byte
	cmd[2] = (address >>  8) AS Byte
	cmd[3] = (address >> 16) AS Byte

	cmd[4] = (size >>   0) AS Byte
	cmd[5] = (size >>   8) AS Byte
'	cmd[6] = (size >>  16) AS Byte

	WriteFile(hSerial,cmd,6,VarPtr(dwWD),ByVal NULL)
	Sleep(10)

	WriteCount=0

	'1バイトずつ送信(100バイトずつウェイト置いた方がいいかも)
	Do
		WriteFile(hSerial, data+WriteCount , HKAC_WRITE_BUFFER_LEN ,VarPtr(dwWD),ByVal NULL)

		WriteCount+=dwWD
		if WriteCount => size Then exitdo
'		if (WriteCount Mod 32) =0 Then Sleep(5)
'		if (WriteCount Mod 128) =0 Then Sleep(10)
		if dwWD=0 Then debug
	Loop
	
	WriteROM=WriteCount
	
EndFunction


Sub SetCPU_Clock(hSerial AS HANDLE,isStart AS BOOL)
	Dim dwWB AS DWord
	if isStart=TRUE Then
		WriteFile(hSerial,"g1", 2,VarPtr(dwWB) , ByVal NULL)
	Else
		WriteFile(hSerial,"g0", 2,VarPtr(dwWB) , ByVal NULL)
	End If
End Sub

#console
'Arduinoに書かれているファームをチェック(別のスケッチか識別)
'msgをFALSEにするとsilentモード
Function CheckFirmware(hSerial AS HANDLE,msg As BOOL) AS BOOL
	Dim cmd[2] AS Byte,rsv[10] As byte,FwVer AS Byte,retry AS Long
	Dim dwWD As DWord
	
	if msg=TRUE Then DBMN("Firmware ID : ") 
	cmd[0] = Asc("v")
*SEND_VER_CHECK
	if WriteFile(hSerial,cmd,1,VarPtr(dwWD),ByVal NULL)=FALSE Then ExitFunction
	if ReadFile(hSerial,rsv, 5 ,VarPtr(dwWD),ByVal NULL)=FALSE Then ExitFunction

	DBM(rsv) 
	Dump(rsv,6)
	

	FwVer=rsv[4]
	rsv[4]=0

	if lstrcmp(rsv,FIRMWARE_ID)=0 Then 
		if FwVer=FIRMWARE_VERSION Then
			CheckFirmware=TRUE

		Elseif FwVer<FIRMWARE_VERSION Then
			if msg=FALSE Then CheckFirmware=FALSE:ExitFunction
			if MessageBox(hMainWnd,ex"ファームウェアバージョンが不一致です\nファームウェアアップデートをしてください。\nArduino : ver "+Chr$(FwVer)+ex"\nRequest : ver "+Chr$(FIRMWARE_VERSION)+ex"\n\n続行しますか？","FirmwareVersion mismatch",MB_YESNO or MB_ICONWARNING) = IDYES Then
				CheckFirmware=TRUE
			Else
				CheckFirmware=FALSE
			End If
		Else
			Const HKAF_FC2_ERRMES=ex"高いバージョンのファームウェアが検出されました。\r\nこのプログラムを最新版に更新してください。\r\n"
			if msg=TRUE Then MessageBox(hMainWnd,HKAF_FC2_ERRMES,"情報",MB_ICONINFORMATION)
			DBM(HKAF_FC2_ERRMES)
			CheckFirmware=TRUE
		End If
	Else
		if retry>5 Then
			if msg=TRUE Then MessageBox(hMainWnd,ex"接続に失敗しました。デバイスからの応答が不正です。\nCOMポート番号　通信レート Arduinoのスケッチなどを確認してください。\n\n正しい場合は、再試行してください。","Firmware mismatch",MB_ICONERROR)
			DBM("VerCheck Failed.")
			CheckFirmware=FALSE
		Else
			retry++	
			DBMN("VerCheck retry...")
			PumpMessage()
			if retry And 1 = 0 Then
				WriteFile(hSerial,cmd,1,VarPtr(dwWD),ByVal NULL)
				FlushCom(hSerial)
				Sleep(100)
			End If
			if GetKeyState(VK_ESCAPE) And &H80 Then
				DBM("cancel")
				CheckFirmware=FALSE
			Else
				Goto *SEND_VER_CHECK
			End If
		End If

	End If
End Function

Sub FlushCom(hSerial AS HANDLE)
	PurgeComm(hSerial,PURGE_TXABORT)
	PurgeComm(hSerial,PURGE_RXABORT)

	Dim cs AS COMSTAT,dwErrors AS DWord,tmp aS BytePtr
	ClearCommError(hSerial,VarPtr(dwErrors),cs)
	'if cs.cbInQue=0 Then ExitSub

	'受信バッファを全部取り出す
	tmp=calloc(cs.cbInQue)
	LoadFile(hSerial,tmp,cs.cbInQue)
	printf(ex"ゴミ(%d bytes)：\n",cs.cbInQue)
	Dump(tmp,cs.cbInQue)
	printf(ex"%d bytes\n",cs.cbInQue)

	FlushFileBuffers(hSerial)

End Sub


Sub setRegister(bank AS Byte,address AS Word,val AS Byte)
	Dim cmd[5] AS Byte,dwAB AS DWord,retry AS BOOL

	cmd[0]=Asc("t")
	cmd[1] = bank
	cmd[2] = (address >>  0) AS Byte
	cmd[3] = (address >>  8) AS Byte

	cmd[4] = val

	WriteFile(hCOM,cmd,5,VarPtr(dwAB),ByVal NULL)
End Sub

