#include <RGBALib.sbp>

'ファーム制御系

Const OE = 1
Const CE = 2
Const WE = 4
Const RST= 8
Const SRAM_READ_NOMAL = RST or WE 
Const SRAM_READ_MAD   = RST or WE or CE
Const SRAM_WRITE_NORMAL=RST or OE
Const SRAM_WRITE_MAD  = RST or OE or CE
Const SRAM_WRITE_SA1 = RST or OE or WE or CE

Const DEFAULT_CTRLBUS = &H0C	'RST WE


Function SetComTimeOut(hComPortPort AS HANDLE,TimeOut AS DWord) AS Byte
	Dim ct AS COMMTIMEOUTS
	ct.ReadIntervalTimeout=TimeOut		'連続受信タイムアウト
	ct.ReadTotalTimeoutConstant=TimeOut	'Constant+Multiplier*バイト数＝タイムアウト
	ct.ReadTotalTimeoutMultiplier=20
	ct.WriteTotalTimeoutConstant=TimeOut
	ct.WriteTotalTimeoutMultiplier=20

	SetCommTimeouts(hComPortPort,VarPtr(ct))
EndFunction

Function ConnectToCOM(PortName AS BytePtr,rate AS DWord) AS HANDLE
	Dim hComPort As HANDLE
	Dim dcb As DCB_SETTING

	if rate=0 Then rate=DEFAULT_BAUDRATE

	hComPort=CreateFile(PortName,GENERIC_READ Or GENERIC_WRITE,NULL,ByVal NULL,OPEN_EXISTING,FILE_ATTRIBUTE_NORMAL,NULL)
	if hComPort=INVALID_HANDLE_VALUE  Then ConnectToCOM=-1 AS VoidPtr :ExitFunction

	dcb.BaudRate = rate		'転送速度の指定
	dcb.ByteSize = 8		'ビット長の指定
	dcb.fBitFields = &H3001	'バイナリモードのフラグを有効にし
	dcb.Parity = 0			'パリティの設定（パリティなし）
	dcb.StopBits = 0		'ストップビット数を指定(1ビット)
	SetCommState(hComPort,dcb)

	'通信タイムアウトの設定
	SetComTimeOut(hComPort,1000)

	DBM("baudrate="+Str$(rate)+"bps")
	
	ConnectToCOM=hComPort
EndFunction

'RST OE WE CS などを制御
Sub SendControl(hComPort AS HANDLE,b AS Byte)
	Dim cmd[1] AS Byte,dwAB AS DWord
	cmd[0]=Asc("c")
	cmd[1]=b
	if WriteFile(hComPort,cmd,2,VarPtr(dwAB),ByVal NULL)=FALSE or dwAB<>2 Then DBM("CTL_ERR "+Str$(GetLastError()))
EndSub

'アドレスセット
Sub SetAddress(hFile AS HANDLE,address AS DWord, isLoROM AS Byte)
	Dim cmd[7] AS Byte
	Dim ReadByte As DWord
	Dim dwReadByte As DWord

	'[0]コマンド
	if isLoROM Then
		cmd[0]=Asc("a")
	Else
		cmd[0]=Asc("A")
	Endif

	'[1-3] アドレス(ビッグエンディアン)
	cmd[1] = (address >>  0) AS Byte
	cmd[2] = (address >>  8) AS Byte
	cmd[3] = (address >> 16) AS Byte

	WriteFile(hFile,cmd,4,VarPtr(dwReadByte),ByVal NULL)
EndSub

'カートリッジからのデータ受信(ROMだけでなくカートリッジ上のメモリ空間も対象)
'コントロールバスはいじらないので手動でやる必要あり
Function ReadROM(hFile AS HANDLE,data AS BytePtr, offset AS Long,address AS DWord, size AS Long, isLoROM AS Byte) As Long
	Dim cmd[7] AS Byte
	Dim ReadByte As DWord
	Dim dwReadByte As DWord

	if isLoROM Then
		cmd[0]=Asc("r")	'LoROM
	Else
		cmd[0]=Asc("R")	'HiROM
	Endif

	cmd[1] = (address >>  0) AS Byte
	cmd[2] = (address >>  8) AS Byte
	cmd[3] = (address >> 16) AS Byte

	cmd[4] = (size >>   0) AS Byte
	cmd[5] = (size >>   8) AS Byte
	cmd[6] = (size >>  16) AS Byte

	WriteFile(hFile,cmd,7,VarPtr(dwReadByte),ByVal NULL)

	dwReadByte=0

	Do
		if ReadFile(hFile,(data)+offset + ReadByte, size - ReadByte,VarPtr(dwReadByte),ByVal NULL) = FALSE Then DBM(ex"\r\n    [Connection Error!]"):ExitDo
		ReadByte+=dwReadByte
		if ReadByte <= size Then exitdo
		if ReadByte=0 Then debug
	Loop
	ReadROM=ReadByte
EndFunction

'カートリッジへの出力データ送信(ROMだけでなくカートリッジ上のメモリ空間も対象)
'コントロールバスはいじらないので手動でやる必要あり
Function WriteROM(hFile AS HANDLE,data AS BytePtr, offset AS Long,address AS DWord, size AS Long, isLoROM AS Byte) As Long
	Dim cmd[7] AS Byte
	Dim WriteCount As DWord
	Dim dwWD As DWord

	if isLoROM Then
		cmd[0]=Asc("w")
	Else
		cmd[0]=Asc("W")
	Endif

	cmd[1] = (address >>  0) AS Byte
	cmd[2] = (address >>  8) AS Byte
	cmd[3] = (address >> 16) AS Byte

	cmd[4] = (size >>   0) AS Byte
	cmd[5] = (size >>   8) AS Byte
	cmd[6] = (size >>  16) AS Byte

	WriteFile(hFile,cmd,7,VarPtr(dwWD),ByVal NULL)
	Sleep(10)

	WriteCount=0

	'1バイトずつ送信(100バイトずつウェイト置いた方がいいかも)
	Do
		WriteFile(hFile, data+WriteCount , 1 ,VarPtr(dwWD),ByVal NULL)

		WriteCount+=dwWD
		if WriteCount => size Then exitdo
		if (WriteCount Mod 32) =0 Then Sleep(5)
		if (WriteCount Mod 128) =0 Then Sleep(10)
		if dwWD=0 Then debug
	Loop
	
	WriteROM=WriteCount
	
EndFunction


Sub SetCPU_Clock(hFile AS HANDLE,isStart AS BOOL)
	Dim dwWB AS DWord
	if isStart=TRUE Then
		WriteFile(hFile,"g1", 2,VarPtr(dwWB) , ByVal NULL)
	Else
		WriteFile(hFile,"g0", 2,VarPtr(dwWB) , ByVal NULL)
	End If
End Sub


'Arduinoに書かれているファームをチェック(別のスケッチか識別)
Function CheckFirmware(hFile AS HANDLE,msg As BOOL) AS BOOL
	Dim cmd[1] AS Byte,rsv[6] As byte,FwVer AS Byte,retry AS Long
	Dim dwWD As DWord
	
	cmd[0] = Asc("v")
*SEND_VER_CHECK
	if WriteFile(hFile,cmd,1,VarPtr(dwWD),ByVal NULL)=FALSE Then ExitFunction
	if ReadFile(hFile,rsv, 5 ,VarPtr(dwWD),ByVal NULL)=FALSE Then ExitFunction
	if msg=TRUE Then DBMN("Firmware ID : ") : DBM(rsv)

	FwVer=rsv[4]
	rsv[4]=0

	if lstrcmp(rsv,FIRMWARE_ID)=0 Then 
		if FwVer=FIRMWARE_VERSION Then
			CheckFirmware=TRUE
		Else
			if msg=FALSE Then CheckFirmware=FALSE:ExitFunction
			if MessageBox(hMainWnd,ex"ファームウェアバージョンが不一致です。\nFirmware : ver"+Chr$(FwVer)+ex"\nRequest : ver"+Chr$(FIRMWARE_VERSION)+ex"\n\n続行しますか？","FirmwareVersion mismatch",MB_YESNO or MB_ICONWARNING) = IDYES Then
				CheckFirmware=TRUE
			Else
				CheckFirmware=FALSE
			End If
		End If
	Else
		if retry>3 Then
			if msg=TRUE Then MessageBox(hMainWnd,ex"接続に失敗しました。デバイスからの応答が不正です。\nCOMポート番号　通信レート Arduinoのスケッチなどを確認してください。\n\n正しい場合は、再試行してください。","Firmware mismatch",MB_ICONERROR)
			CheckFirmware=FALSE
		Else
			retry++
			DBM("VerCheck retry...")
			DBM("")
			Goto *SEND_VER_CHECK
		End If

	End If

End Function


