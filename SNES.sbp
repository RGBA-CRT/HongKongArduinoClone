
Sub DumpFullROM(info AS *SFC_ROM_HEADER,Path AS BytePtr)
	Dim MAX_CONTINUE=DEFAULT_CONTINUE As DWord
	Dim DUMP_BUFFER_SIZE=DEFAULT_DUMP_SIZE AS DWord
	Dim DumpAddress As DWord, offset AS DWord, ret AS DWord, CheckSum=0 AS DWord,

	Dim buf AS BytePtr,nowSize As DWord,Size AS DWord,bRomType AS Byte
	Dim hout AS HANDLE,C AS Long	'コンテニューカウンタ
	Dim lt AS DWord,time AS DWord

	if info->ROMType=SFC_ROM_HiROM Then
		bRomType=FALSE
		DumpAddress=HiROM_START_ADR
		offset=HiROM_START_ADR
	Else
		bRomType=TRUE
		DumpAddress=0
		offset=0
	Endif

	buf=calloc(DUMP_BUFFER_SIZE+12)
	SendControl(hCOM,DEFAULT_CTRLBUS)

	DBM("(Pless Esc to Cancel)")
	DBMN("Dumping")
	hout=OpenFile(Path,GENERIC_WRITE)

	lt=GetTickCount()
	Size=info->ROMSize

	'設定ファイル読み込み
	MAX_CONTINUE=GetPrivateProfileInt(ProgramName,"MaxContinue",DEFAULT_CONTINUE,INIFILE_PATH)
	DUMP_BUFFER_SIZE=GetPrivateProfileInt(ProgramName,"DumpBufferSize",DEFAULT_DUMP_SIZE,INIFILE_PATH)
	if DUMP_BUFFER_SIZE <= 0 Then DUMP_BUFFER_SIZE=DEFAULT_DUMP_SIZE

	'UI系
	SendMessage( MWnd(hProg), PBM_SETPOS, 0, 0 )
	SendMessage(MWnd(hProg), PBM_SETRANGE,0,MAKELONG(0,(Size/DUMP_BUFFER_SIZE) As Word))
	SendMessage(MWnd(hProg), PBM_SETSTEP,1,0)
	SetDlgEnable(STATUS_DUMPING)

	Do
		'ESCキーでキャンセル
		PumpMessage()
		if GetKeyState(VK_ESCAPE) And &H80 Then DBM(ex"\r\nCancelled by user."):Goto *EXIT_DUMP

		'吸出し＆データチェック
		ret=ReadROM(hCOM,buf, 0, DumpAddress, DUMP_BUFFER_SIZE,bRomType)
		if ret=0 Then DBM("ERROR!"):Goto *EXIT_DUMP
		if ret<>DUMP_BUFFER_SIZE Then 
			DBM(ex"\r\n["+Str$(C)+ex"]Warning!")
			C++
			if C>MAX_CONTINUE Then DBM("Over retry count.")
			Continue
		endif

		'出力＆チェックサム計算
		OutFile(hout,buf,DUMP_BUFFER_SIZE)
		CheckSum+=CalcChkSum(buf,DUMP_BUFFER_SIZE)
	
		'次のアドレスを計算
		DumpAddress+=DUMP_BUFFER_SIZE
		if DumpAddress-offset>=Size Then ExitDo

		'進捗表示
		SendMessage(GetDlgItem(hMainWnd,hProg),PBM_STEPIT,0,0)
		SetWindowText(MWnd(Static7),Str$(Int((DumpAddress-offset)/Size*100))+"%")
		DBMN(".")
	Loop
	time=GetTickCount()-lt

	DBM(ex"\r\nTime  : "+Str$(time)+ex"ms")
	DBM("Speed : "+Str$(Int(Size/(time/1000)) AS Long)+ex"byte/sec\r\n")

	if info->CheckSum2=(CheckSum And &HFFFF) and info->CheckSum1=(not(CheckSum) And &HFFFF) Then
		DBM(ex"Checksum OK")
		DBM(ex"Successful!!!")
	Else
		DBM(ex"Checksum Error!!!")
		MessageBoxf(hMainWnd,"ROM Dump Error",MB_ICONERROR, _
			ex"Checksum Error!\nFailed to dump ROM.\nChecksum1 : %04X -> %04X\nChecksum2 : %04X -> %04X", info->CheckSum1,(not(CheckSum) And &HFFFF),info->CheckSum2,(CheckSum And &HFFFF))
	Endif
	

*EXIT_DUMP
	SendMessage( MWnd(hProg), PBM_SETPOS, 0, 0 )
	SetWindowText(MWnd(Static7),"100%")
	SetDlgEnable(STATUS_CONNECTED)

	CloseHandle(hout)
	free(buf)

	SetAddress(hCOM,0,FALSE)
EndSub

Function checkContiguous(adr AS BytePtr,size AS DWord) AS Long
	Dim i AS Long,someCount AS DWord,last AS Byte
	For i=0 To size
		if last=adr[i] Then
			/*if last<>0 Then*/ someCount++	'0連続はよくあるので除外
			
			if someCount=>&H1000 Then DBM(Hex$(last)+"fill"):ExitFunction
		Else
			someCount=0
		End If
		last=adr[i]
	Next i
	checkContiguous=TRUE
End Function
		


Function CalcChkSum(data AS BytePtr,length AS DWord) AS DWord
	Dim i AS DWord
	CalcChkSum=0
	Do
		CalcChkSum += data[i]
		if i => length-1 Then ExitDo
		i++
	Loop
End Function


Sub GetSFCinfo(ByRef info as SFC_ROM_HEADER)
	'カートリッジからヘッダを読み込んでSFC_ROM_HEADER構造体に格納

	Dim buf[SFC_SPEC_HEADER_SIZE+5] AS Byte
	ReadROM(hCOM,buf, 0, SFC_SPEC_HEADER_ADDR, SFC_SPEC_HEADER_SIZE,FALSE)
	SloveCartInfo(buf,VarPtr(info))

	GetDlgOption(info)

	SetCartInfo(VarPtr(info))
EndSub

Sub SetCartInfo(info AS *SFC_ROM_HEADER)
	'SFC_ROM_HEADERの内容をGUIに表示

	Dim CartChip[512] AS Byte
	Const UNK_CART_TYPE_TEXT = " UNKNOWN CART TYPE"

	SetWindowText(MWnd(ROMTITLE),info->Title)
	SendMessage(MWnd(MAPPING),CB_SETCURSEL,info->ROMType,0)
/*	if info->ROMType=SFC_ROM_HiROM Then
		SendMessage(MWnd(MAPPING),CB_SETCURSEL,2,0)
	Elseif info->ROMType=SFC_ROM_LoROM Then
		SendMessage(MWnd(MAPPING),CB_SETCURSEL,3,0)
	Else if info->
		SendMessage(MWnd(MAPPING),CB_SETCURSEL,1,1)
	endif*/
	DBMN("Chips : ")
	lstrcpy(CartChip,"ROM")

	'http://snesemu.black-ship.net/misc/hardware/-from%20nsrt.edgeemu.com-chipinfo.htm
	Select Case info->CartType>>4
		Case &H00
			Select Case info->CartType And &H0F
				Case &H00 : lstrcat(CartChip,"")
				Case &H01 : lstrcat(CartChip,"+RAM")
				Case &H02 : lstrcat(CartChip,"+RAM+SRAM")
				Case &H03 : lstrcat(CartChip,"+DSP")
				Case &H04 : lstrcat(CartChip,"+DSP+RAM")
				Case &H05 : lstrcat(CartChip,"+DSP+RAM+SRAM")
				Case Else : lstrcat(CartChip,UNK_CART_TYPE_TEXT)
			EndSelect
		Case &H01 'SuperFX
			Select Case info->CartType And &H0F
				Case &H03 : lstrcat(CartChip,"+MARIO+RAM")
				Case &H04 : lstrcat(CartChip,"+GSU+RAM")
				Case &H05 : lstrcat(CartChip,"+GSU+RAM+SRAM")
				Case &H0A : lstrcat(CartChip,"+GSU1+RAM+SRAM")
				Case Else : lstrcat(CartChip,UNK_CART_TYPE_TEXT)
			EndSelect
			lstrcat(CartChip," [SuperFX]")
		Case &H02 : lstrcat(CartChip,"+OBC1+RAM+SRAM")
		Case &H03 
			lstrcat(CartChip,"+SA-1+RAM")
			if info->CartType = &H34 Then
			Elseif info->CartType = &H35 then
				 lstrcat(CartChip,"+SRAM")
			Else
				lstrcat(CartChip,UNK_CART_TYPE_TEXT)
			endif
		Case &H04
			lstrcat(CartChip,"+SDD1+")
			if info->CartType And &H0F = 3 Then
			Elseif info->CartType And &H0F = 5 then
				 lstrcat(CartChip,"RAM+SRAM")
			Else
				lstrcat(CartChip,UNK_CART_TYPE_TEXT)
			endif
		Case &H05 : lstrcat(CartChip,"+S-RTC+RAM+SRAM")
		Case &H0E 
			Select Case info->CartType And &H0F
				Case &H03 : lstrcat(CartChip,"+SGB+RAM")
				Case &H05 : lstrcat(CartChip,"+BS-X")
				Case &H0A : lstrcat(CartChip,"+CX4")
				Case Else : lstrcat(CartChip,UNK_CART_TYPE_TEXT)
			EndSelect
		Case &H0F
			Select Case info->CartType And &H0F
				Case &H03 : lstrcat(CartChip,"+CX4")
				Case &H05
					if info->ROMType=SFC_ROM_LoROM Then
						lstrcat(CartChip,"+ST018+RAM+SRAM")
					Else
						lstrcat(CartChip,"+SPC7110+RAM+SRAM")
					endif
				Case &H0A6
					if info->ROMSize=&H100000 Then
						lstrcat(CartChip,"+ST010")
					Else
						lstrcat(CartChip,"+ST011")
					endif
				Case &H03 : lstrcat(CartChip,"+SPC7110+RAM+SRAM+RTC")
				Case Else : lstrcat(CartChip,UNK_CART_TYPE_TEXT)
			EndSelect
		Case Else
			lstrcat(CartChip," UNKNOWN CART TYPE")
	EndSelect

	SetWindowText(MWnd(CART_CIPS),CartChip)
	wsprintf(CartChip+lstrlen(CartChip),ex" [0x%02X]",info->CartType)
	DBM(CartChip)

	SetWindowText(MWnd(ROM_SIZE),Str$(info->ROMSize/1024)+"KB ["+Str$((info->ROMSize*8)/(1024^2))+"MBit]")
	if info->SRAMSize =0 Then
		SetWindowText(MWnd(SRAM_SIZE),"None")		
	Else
		SetWindowText(MWnd(SRAM_SIZE),Str$(info->SRAMSize/1024)+"KB ["+Str$((info->SRAMSize*8)/(1024))+"KBit]")
	endif

	DBMN("Country : ")
	Select Case info->Country
		Case 00 : DBM("Japan")
		Case 01 : DBM("USA")
		Case 02 : DBM("Europe")
		Case 03 : DBM("UnDefined")
	EndSelect

	DBM("Version : "+Str$(info->Version/10+1.0))
	if info->SRAMSize<>0 Then DBM("SRAM Address : 0x"+Hex$(info->SRAMAddress))
	DBM("CheckSum1(not)  : "+Hex$(info->CheckSum1))
	DBM("CheckSum2(ffff) : "+Hex$(info->CheckSum2))
/*
Dim nBank AS Long,rt[2]=[0,1,4] AS Byte
if info->ROMType=SFC_ROM_ExHiROM Then
	nBank=info->ROMSize*2
Else
	nBank=((info->ROMSize) * 1024 * 1024 / 8) / (32768 + ((rt[info->ROMType]) * 32768))
End If
	DBM("nBank=0x"+Hex$(nBank))*/
	DBM("")

EndSub	


/*  http://hongkongarduino.web.fc2.com/archive/forprogram.htm
    Ch4に3を設定。SRAMのOEとディスエーブル、CEをイネーブルにする。= CE:0 RST:1 OE:1
    MADチップの場合は7を出力する。								  = CE:1 RST:1 OE:1
    アドレスを設定する。
    74138のCBAを100にし、データ出力モードにする。
    このとき、STROBEはL(反転出力に注意)にしておく。
    STROBEをHにし、WEをイネーブルにする。
    BUSY線から74645が有効になっているか確認してからデータを出力する。
    STROBEをLにし、WEをディスエーブルにする。
    Ch4を1に設定する。MADチップの場合は5。 
*/
Sub SetCPU_Clock(hFile AS HANDLE,isStart AS BOOL)
	Dim dwWB AS DWord
	if isStart=TRUE Then
		WriteFile(hFile,"g1", 2,VarPtr(dwWB) , ByVal NULL)
	Else
		WriteFile(hFile,"g0", 2,VarPtr(dwWB) , ByVal NULL)
	End If
End Sub


Sub WriteSRAM(hFile AS HANDLE,info AS *SFC_ROM_HEADER,FileName AS BytePtr)
	Dim hIn AS HANDLE,buf AS BytePtr
	Dim CtrMask as Byte

	if info->SRAMSize=0 Then DBM("SRAM Size is zero."):ExitSub
	DBM("SRAM Writeing...")
	DBM("Address:0x"+Hex$(info->SRAMAddress))
	PumpMessage()

	hIn=OpenFile(FileName,GENERIC_READ)	
	if info->SRAMSize <> GetFileSize(hIn,NULL) Then
		if MessageBox(hMainWnd,"ファイルサイズが不正です。続行しますか？",ProgramName+" - Write SRAM",MB_YESNO) = IDNO Then ExitSub
	Endif

	buf=calloc(info->SRAMSize)
	LoadFile(hIn,buf,info->SRAMSize)
	CloseHandle(hIn)

debug
	if info->ROMType <> SFC_ROM_SA1 Then
		'ノーマルカートリッジ
		if info->Mad=TRUE Then
			CtrMask=SRAM_WRITE_MAD
		Else
			CtrMask=SRAM_WRITE_NORMAL
		Endif	

		SendControl(hFile,CtrMask)	' SRAM CE
		WriteROM(hFile,buf, 0, info->SRAMAddress , info->SRAMSize,FALSE)
	
	Else
		'SA-1 (sanni氏のcartreaderを参考)
		DBM("SA-1 Write BW-RAM (can't work)")
		Dim cmd[512] AS Byte
		Dim block AS Long,lastBlock AS Long,curByte AS DWord,i AS Long

		lastBlock=info->SRAMSize/&H2000
		DBM("blocks = "+Hex$(lastBlock))

		SetCPU_Clock(hFile,TRUE)
	
		SendControl(hFile,RST or OE or CE or WE)'SRAM_WRITE_SA1)	' RST WE RD CE -> High

		for block=0 To lastBlock-1
			cmd[0]=block
			cmd[1]=block
			WriteROM(hFile,cmd,0,&H2224,2,FALSE)	'MAP SRAM to 0x6000~0x7FFF
			cmd[0]=&H80
			cmd[1]=&H80
			WriteROM(hFile,cmd,0,&H2226,2,FALSE)	'SRAM WRITE ENABLE
			DBM("Writeing block"+Str$(block))
			FillMemory(cmd,512,block+lastBlock)

			for curByte=0 To &H7FFF Step 512
				if curByte < &H6000 Then
				'	WriteROM(hFile,cmd,0,curByte,512,FALSE)
				Else
					WriteROM(hFile,buf+curByte-&H6000+block*&H2000,0,curByte,512,FALSE)
					DBM(Hex$(curByte-&H6000+block*&H2000)+" / "+Hex$(curByte))
				End If
				Sleep(10)

			Next curByte

			Sleep(1000)
Exitfor
		Next block
		cmd[0]=0
		WriteROM(hFile,cmd,0,&H2227,1,FALSE)	'SRAM DISABLE

		SetCPU_Clock(hFile,FALSE)

		SendControl(hFile,12)	'RST LOW
	Endif

	DBM(ex"Done\r\n")
	free(buf)
	
	SendControl(hFile,DEFAULT_CTRLBUS)	'default
	SetAddress(hFile,0,FALSE)
EndSub

Sub DumpSRAM(hFile AS HANDLE,info AS *SFC_ROM_HEADER,FileName AS BytePtr)
	Dim hout AS HANDLE,buf AS BytePtr
	Dim CtrMask as Byte

	if info->SRAMSize=0 Then DBM("SRAM Size is zero."):ExitSub
	DBM("SRAM Dumping...")
	DBM("Address:0x"+Hex$(info->SRAMAddress))
	PumpMessage()
	
	buf=calloc(info->SRAMSize)

	if info->Mad=TRUE Then
		CtrMask=SRAM_READ_MAD
	Else
		CtrMask=SRAM_READ_NOMAL
	Endif	

	SendControl(hFile,CtrMask)	' SRAM CE
	ReadROM(hFile,buf, 0, info->SRAMAddress , info->SRAMSize,FALSE)

	hout=OpenFile(FileName,GENERIC_WRITE)
	OutFile(hout,buf,info->SRAMSize)
	CloseHandle(hout)

	DBM(ex"Done\r\n")
	free(buf)
	
	SetAddress(hFile,0,FALSE)
	SendControl(hFile,DEFAULT_CTRLBUS)	'default
EndSub

