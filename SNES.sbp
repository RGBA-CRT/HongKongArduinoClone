'スーファミシステム系
' Control bus defines
Const CBUS_OE = 1
Const CBUS_ROMSEL = 2
Const CBUS_WE = 4
Const CBUS_RST= 8

Const CBUS_DEFAULT = &H0C	'CBUS_RST CBUS_WE



Const LoROM_BANK_SIZE = &H8000

'----------------
' ROM Functions
'----------------

'ROMの吸出し


	
Enum HKAC_DUMPROM_RESULT
	HKAC_DUMPROM_OK = 0
	HKAC_DUMPROM_COMMERROR
	HKAC_DUMPROM_RETRY_OVER
	HKAC_DUMPROM_COPRO_ERROR
	HKAC_DUMPROM_USER_CANCEL
	HKAC_DUMPROM_PTRERROR
End Enum

Function DumpRom(info As * SFC_CART_INFO, Path As BytePtr, RomOffset As DWord) As Long
	DumpRom = HKAC_DUMPROM_OK
	Dim MAX_CONTINUE = DEFAULT_CONTINUE As DWord
	Dim DUMP_BUFFER_SIZE = DEFAULT_DUMP_SIZE As DWord
	Dim DumpAddress As DWord, offset As DWord, ret As DWord
	Dim CheckSum = 0 As DWord, bufChecksum As DWord
	Dim bBankChanged = FALSE As BOOL '8MBitBank
	
	Dim buf As BytePtr, nowSize As DWord, Size As DWord, bMapType As Byte
	Dim hout As HANDLE, C As Long 'コンテニューカウンタ
	Dim lt As DWord, time As DWord
	
	'アドレス系準備
	offset = info->AddrOffset '固定
	DumpAddress = offset 'インクリメントしていく
	Size = info->RomSize
	SendControl(hCOM, CBUS_DEFAULT)
	
	'設定ファイル読み込み
	MAX_CONTINUE = GetPrivateProfileInt(ProgramName, "MaxContinue", DEFAULT_CONTINUE, INIFILE_PATH)
	DUMP_BUFFER_SIZE = GetPrivateProfileInt(ProgramName, "DumpBufferSize", DEFAULT_DUMP_SIZE, INIFILE_PATH)
	If DUMP_BUFFER_SIZE < 1 Then DUMP_BUFFER_SIZE = DEFAULT_DUMP_SIZE
	
	'特殊系のセットアップ
	If info->MapType = SFC_MAP_SA1 And info->isBSX Then
		'バス釣りのときだけ実行する処理（判定がザルなようであれば修正）
		/* SA1_Init()
		SA1_BankCtrl(hCOM, 0)
		DBM("バス釣り用SA1初期化処理実行")
		*/
	ElseIf info->MapType = SFC_MAP_SDD1 Then
		SDD1_SetBanks(hCOM, 0)
		SDD1_PrintBanks(hCOM)
		
		DUMP_BUFFER_SIZE = DEFAULT_DUMP_SIZE '0x400000で必ず止まる必要が有るため
		
	ElseIf info->MapType = SFC_MAP_SPC7110 Then
		DBM("Checking SPC7110...")
		If SPC7110_SetBanks(hCOM, 1, FALSE) = FALSE or _
							SPC7110_SetBanks(hCOM, 0, FALSE) = FALSE Then
			ErrMes(hMainWnd, ex"SPC7110のセットアップに失敗しました。\nSA-1追加回路が接続されているか確認し、Arduinoを再起動してください。", "SPC7110 Bank Control Error", 0)
			ExitSub
		End If
		SPC7110_PrintBanks(hCOM)
		
	ElseIf info->MapType = SFC_MAP_CX4_2DC0N Then
		DBM("CX4 for ROCKMAN X2")
		
		' https://sd2snes.de/files/cx4_notes.txt
		/*
		$7f52: ROM configuration select
		       LoROM: 0: 2x  8Mbit (A21 switches between ROM /CE1 and /CE2)
		              1: 1x 16Mbit (maybe A22 switches but 40-7f/c0-ff are inactive)

		       HiROM: 0: 2x  8Mbit (A20 switches)
		              1: 2x 16Mbit (A21 switches)
		*/
		' Set ROM configuration to 2xROM (8Mx2)
		SetCartRegister(0, &H7f52, 0)
		
	ElseIf info->MapType = SFC_MAP_CX4_1DC0N Then
		DBM("CX4 for ROCKMAN X3")
		
		' Set ROM configuration to 1xROM (16Mx1)
		SetCartRegister(0, &H7f52, 1)
		
	End If
	
	'UI系
	SendMessage( MWnd(hProg), PBM_SETPOS, 0, 0 )
	SendMessage(MWnd(hProg), PBM_SETRANGE, 0, MAKELONG(0, (Size / DUMP_BUFFER_SIZE) As Word))
	SendMessage(MWnd(hProg), PBM_SETSTEP, 1, 0)
	SetDlgEnable(STATUS_DUMPING)
	
	'ダンプバッファの作成
	buf = calloc(DUMP_BUFFER_SIZE+12)
	lstrcpy(buf, "<<UNUSED??>>")
	hout = OpenFile(Path, GENERIC_WRITE)
	
	DBM("(Pless Esc to Cancel)")
	DBMN("Dumping")
	
	lt = GetTickCount()
	
	Do
		'ESCキーでキャンセル
		PumpMessage()
		If GetCancelKey() Then DBM(ex"\r\nCanceled by the user."):Goto * EXIT_DUMP
		
		'吸出し＆データチェック
		ret = ReadROM(hCOM, buf, 0, DumpAddress, DUMP_BUFFER_SIZE, info->isLoROM)
		If ret = 0 Then 
			DBM("ERROR!")
			DumpRom=HKAC_DUMPROM_COMMERROR
			Goto * EXIT_DUMP

		Else If ret<>DUMP_BUFFER_SIZE Then
			DBMN(ex"[x" + Str$(C) + ex"]")
			C++
			If C>MAX_CONTINUE Then 
				DBM("Over retry count.")
				DumpRom=HKAC_DUMPROM_RETRY_OVER
				Goto * EXIT_DUMP
			End If
			Continue
		Else
			C=0

		End If
		
		'ファイルへ出力
		OutFile(hout, buf, DUMP_BUFFER_SIZE)
		
		'バッファのチェックサム計算
		bufChecksum = SumSnesChecksum(buf, DUMP_BUFFER_SIZE)
		
		'3MBの時はラスト8Mbitを再加算
		If DumpAddress>= 1024 * 1024 * 2 Then
			If info->RomSize = 1024 * 1024 * 3 Then
				bufChecksum + = bufChecksum
			End If
		End If
		
		'チェックサム加算
		CheckSum + = bufChecksum
		
		'次のアドレスを計算
		DumpAddress + = DUMP_BUFFER_SIZE
		'特殊系のバンク切り替え
		If info->MapType = SFC_MAP_SpLoROM Then
			If DumpAddress - offset = &H200000 Then
				'吸出しアドレスをバンク80hに飛ばす
				offset = &H400000 'LoROMアドレスで400000h, HiROMアドレス(実アドレス)で800000h
				DumpAddress = offset
				Size = &H100000
				
				DBM(ex"\r\n[SpLoROM]バンク切り替え80h-")
			End If
			
		Else If DumpAddress - offset = &H400000 Then
			'4MB超えする時
			If info->MapType = SFC_MAP_SDD1 Then
				If bBankChanged = FALSE Then
					'ROMバンク0-3を吸い出したので、4-7バンクを吸い出す
					DBM(ex"\r\n")
					bBankChanged = TRUE
					SDD1_SetBanks(hCOM, 4)
					SDD1_PrintBanks(hCOM)
					DBM(ex"")
					
					DumpAddress = offset 'アドレスリセット
				Else
					'4-7バンクを吸い出し終わったので終了
					ExitDo
				End If
				
			ElseIf info->MapType = SFC_MAP_SPC7110 Then
				If bBankChanged = TRUE Then ExitDo
				DBM("")
				bBankChanged = TRUE
				SPC7110_SetBanks(hCOM, 1, FALSE) 'D0:1,E0:2,F0:3 ... F0:0000にデータROMのバンク3をマップ
				DumpAddress = offset + &H300000 'F0:0000からリスタート
				
			ElseIf info->MapType = SFC_MAP_ExHiROM Then
				'わざわざバンク切り替え使わなくてもダンプできるけど一応
				
				If bBankChanged Then
					ExitDo
				Else
					DumpAddress = &H400000
					offset = &H400000
					DBM("[ExHiROM]ROM P1 Bank:40-")
					bBankChanged = TRUE
				End If
			End If
			
		End If
		If DumpAddress - offset>= Size Then ExitDo
		
		'進捗表示
		SendMessage(GetDlgItem(hMainWnd, hProg), PBM_STEPIT, 0, 0)
		SetWindowText(MWnd(Static7), Str$(Int(((DumpAddress - offset) * (bBankChanged + 1)) / Size * 100)) + "%")
		DBMN(".")
	Loop
	time = GetTickCount() - lt

	DBM(ex"\r\nTime  : " + Str$(time) + ex"ms")
	DBM("Speed : " + Str$(Int(Size / (time / 1000)) As Long) + ex"byte/sec\r\n")

	DBM("HeaderSum:" + Hex$(info->CheckSum2))
	DBM("ActualSum:" + Hex$(CheckSum And &HFFFF))
	If info->CheckSum2 = (CheckSum And &HFFFF) and info->CheckSum1 = (not(CheckSum) And &HFFFF) Then
		DBM(ex"Checksum OK")
		DBM(ex"Successful!!!")
	Else
		If info->enableChecksum Then
			DBM(ex"Checksum Error!!!")
			MessageBoxf(hMainWnd, "ROM Dump Error", MB_ICONERROR, _
						ex"Checksum Error!\nFailed to dump ROM.\nChecksum1 : %04X -> %04X\nChecksum2 : %04X -> %04X", info->CheckSum1, (not(CheckSum) And &HFFFF), info->CheckSum2, (CheckSum And &HFFFF))
		Else
			DBM("Checksum is disabled.")
		End If
	End If

*EXIT_DUMP

	SendMessage( MWnd(hProg), PBM_SETPOS, 0, 0 )
	SetWindowText(MWnd(Static7), "100%")
	SetDlgEnable(STATUS_CONNECTED)

	free(buf)
	CloseHandle(hout)

	SetAddress(hCOM, 0, FALSE)

	FlushCom(hCOM)

	DBM("")
End Function

Function GetDumpBufferSize() AS DWord
	Dim bufferSize AS DWord
	bufferSize = GetPrivateProfileInt(ProgramName, "DumpBufferSize", DEFAULT_DUMP_SIZE, INIFILE_PATH)
	If bufferSize < 1 Then 
		bufferSize = DEFAULT_DUMP_SIZE * 1024
	Elseif bufferSize > (LoROM_BANK_SIZE/1024) Then
		bufferSize = LoROM_BANK_SIZE
	Else
		'LoROMバンクをまたいだバンクサイズだとバンク切り替えできないので　丸める(脳死アルゴリズム)
		*MARU
		if LoROM_BANK_SIZE Mod bufferSize Then bufferSize--:Goto *MARU
		bufferSize *= 1024
	End If
	GetDumpBufferSize = bufferSize
End Function

' refactored new dump logic
Function DumpRom2(hSerial AS HANDLE, info As * SFC_CART_INFO, mmodel As *SFC_MMAP_MODEL, rom As BytePtr, progress AS * ProgressCallback) As HKAC_DUMPROM_RESULT
	Dim dwReadByte As DWord
	Dim totalReadBytes As DWord
	Dim currentAddress As DWord
	Dim retry As DWord, retryLimit As DWord
	Dim romBuffer AS BytePtr, bufferSize AS DWord

	if mmodel=NULL or rom=NULL Then DumpRom2 = HKAC_DUMPROM_PTRERROR: ExitFunction
	if mmodel->rom.next_cb=NULL Then DBM("next callback is NULL"): 	DumpRom2 = HKAC_DUMPROM_PTRERROR: ExitFunction

	DumpRom2 = HKAC_DUMPROM_OK

	' 設定読み出し
	retryLimit = GetPrivateProfileInt(ProgramName, "DumpErrorRetryLimit", DEFAULT_CONTINUE, INIFILE_PATH)
	bufferSize = GetDumpBufferSize()

	' 初期アドレスセット
	currentAddress = mmodel->rom.adr
	SendControl(hCOM, CBUS_DEFAULT)

	' MMC初期化
	if mmodel->rom.init_cb Then mmodel->rom.init_cb(hSerial, info)

	' ダンプバッファの作成
	romBuffer = calloc(bufferSize)

	if progress Then progress->Init( info->RomSize )

	Do
		'ESCキーでキャンセル
		if progress Then
			If progress->isCancel() Then DumpRom2 = HKAC_DUMPROM_USER_CANCEL: Goto *EXIT_DUMP2
		End If

		'吸出し＆データチェック
		Dim ret AS Long
		ret = ReadROM(hSerial, romBuffer, 0, currentAddress, bufferSize, FALSE)
		If ret = 0 Then
			DumpRom2=HKAC_DUMPROM_COMMERROR
			Goto *EXIT_DUMP2
		Else If ret<>bufferSize Then
			retry++
			if progress Then progress->ErrorRetry(retry, retryLimit)
			If retry>retryLimit Then DumpRom2=HKAC_DUMPROM_RETRY_OVER:Goto *EXIT_DUMP2
			Continue
		Else
			retry=0
		End If

		'出力
		memcpy(rom + totalReadBytes, romBuffer, bufferSize)
		
		if progress Then progress->Step( bufferSize , currentAddress)

		totalReadBytes += bufferSize
		if totalReadBytes >= info->RomSize Then ExitDo

		currentAddress = mmodel->rom.next_cb(hSerial, info, currentAddress, bufferSize)

	Loop
	
	if mmodel->rom.exit_cb Then mmodel->rom.exit_cb(hSerial, info)

*EXIT_DUMP2
	if progress<>NULL Then progress->Final()

	free(romBuffer)	
	
End Function



'---------------------------
' SRAM Functions
'---------------------------
Sub DumpSRAM(hSerial As HANDLE, info As *SFC_CART_INFO, mmap As *SFC_MMAP_MODEL, sram As BytePtr, progress AS * ProgressCallback)
'	Dim fout As File
	
	If info->SramSize = 0 Then
		DBM("SRAM Size is zero.")
		ExitSub
	End If
	
/*	If fout.openFile(FileName, GENERIC_WRITE) = FALSE Then
		DBM("Cannot open file! " + MakeStr(FileName))
		ErrMes(hMainWnd, "SRAMを保存できませんでした。", "File I/O Error", 0, GetLastError())
		ExitSub
	End If
*/	
	Dim sraminfo As *SFC_SRAM_MODEL
	Dim bankCount As DWord
	Dim lastDumpSize As DWord
	Dim buf As BytePtr
	
	sraminfo = VarPtr(mmap->sram)
	
	If sraminfo->ctrlBus And SRAM_CTRL_SPC7110 Then
		SPC7110_SetBanks(hCOM, 0, TRUE) 'SRAM ENABLE
	End If
	
	bankCount = Int(info->SramSize / sraminfo->bankSize)
	lastDumpSize = info->SramSize - bankCount * sraminfo->bankSize
	buf = calloc(sraminfo->bankSize)
	
	SendControl(hSerial, (sraminfo->ctrlBus Or CBUS_WE) As Byte)

	if progress Then progress->Init(bankCount)

	Dim i As Long, readAddr As DWord
	Do
		If i = > bankCount Then ExitDo	
		if progress Then 
			If progress->isCancel() Then DBM(ex"\r\nCanceled by the user."):GoTo *EXIT_SRAM_DUMP
		End If

		readAddr = sraminfo->adr + i * sraminfo->bankStep
		
		SendControl(hSerial, (sraminfo->ctrlBus Or CBUS_WE) As Byte)
		ReadROM(hSerial, buf, 0, readAddr, sraminfo->bankSize, FALSE)
		memcpy(sram+(i * sraminfo->bankSize), buf, sraminfo->bankSize)
		i++
		
		if progress Then progress->Step(1, readAddr)
		PumpMessage()
	Loop
	
	If lastDumpSize > 0 Then
		readAddr = sraminfo->adr + i * sraminfo->bankStep
		ReadROM(hSerial, buf, 0, readAddr, lastDumpSize, FALSE)
		memcpy(sram+(i * sraminfo->bankSize), buf, lastDumpSize)		
		if progress Then progress->Step(lastDumpSize, readAddr)
	End If
	
	
*EXIT_SRAM_DUMP
	If sraminfo->ctrlBus And SRAM_CTRL_SPC7110 Then
		SPC7110_SetBanks(hCOM, 0, FALSE) 'SRAM ENABLE
	End If
	
	SendControl(hSerial, CBUS_DEFAULT)

	if progress Then progress->Final()
	
'	fout.close()
	free(buf)
		
End Sub

'Writing SA-1 SRAM routine is based on sanni's cartreader.

Sub WriteSRAM(hSerial As HANDLE, info As * SFC_CART_INFO, mmap As *SFC_MMAP_MODEL, sram As BytePtr, progress AS * ProgressCallback)
	Dim fin As File
	
	'諸計算
	Dim sraminfo As *SFC_SRAM_MODEL
	Dim bankCount As DWord
	Dim lastDumpSize As DWord
	Dim buf As BytePtr
	
	sraminfo = VarPtr(mmap->sram)
	bankCount = Int(info->SramSize / sraminfo->bankSize)
	lastDumpSize = info->SramSize - bankCount * sraminfo->bankSize
	buf = sram
	
	
	if progress Then progress->Init(bankCount)

	If sraminfo->ctrlBus And SRAM_CTRL_SA1 Then
		SA1_SramInit(hSerial)	
		
	Else If sraminfo->ctrlBus And SRAM_CTRL_SPC7110 Then
		SPC7110_SetBanks(hCOM, 0, TRUE) 'SRAM ENABLE
	End If
	
	'ライト開始
	SendControl(hSerial, (sraminfo->ctrlBus or CBUS_OE) As Byte)
	
	Dim i As DWord, writeAddr As DWord
	Do
		if progress Then 
			if progress->isCancel() Then ExitDo
		End If
		If i = > bankCount Then ExitDo
		
		writeAddr = sraminfo->adr + i * sraminfo->bankStep
		If sraminfo->ctrlBus And SRAM_CTRL_SA1 Then
			SA1_SramBankSel(hSerial, i As Byte)
			writeAddr = sraminfo->adr
		End If
		
		SendControl(hSerial, (sraminfo->ctrlBus or CBUS_WE) As Byte)
		WriteROM(hSerial, buf + i * sraminfo->bankSize, 0, writeAddr, sraminfo->bankSize, FALSE)
		
		i++
		if progress Then progress->Step(1, writeAddr)
		'PumpMessage()
	Loop
	
	If lastDumpSize > 0 Then
		WriteROM(hSerial, buf + i * sraminfo->bankSize, 0, sraminfo->adr + i * sraminfo->bankStep, lastDumpSize, FALSE)
		if progress Then progress->Step(1, writeAddr)
	End If
	
	If sraminfo->ctrlBus And SRAM_CTRL_SA1 Then
		SA1_SramExit(hSerial, buf)
		
	Else If sraminfo->ctrlBus And SRAM_CTRL_SPC7110 Then
		SPC7110_SetBanks(hCOM, 0, FALSE) 'SRAM DISABLE
		
	End If
	
	SendControl(hSerial, CBUS_DEFAULT)
	
	SetAddress(hSerial, &H000000 , FALSE)

	if progress Then progress->Final()
	
End Sub


'------------------------------
' Memory Controller Functions
'------------------------------

Sub SA1_Init(hSerial As HANDLE)
	SetCPU_Clock(hSerial, HKAC_CLOCK_CPU_OVERCLOCKED)
	SetCPU_Clock(hSerial, HKAC_CLOCK_CPU_ENABLED)
	
	Sleep(500)
End Sub

Sub SA1_DeInit(hSerial As HANDLE)
	SetCPU_Clock(hSerial, HKAC_CLOCK_NORMAL)
End Sub

Sub SA1_BankCtrl(hSerial As HANDLE, startBank As Long)
	SetCartRegister(&H00, &H2220, startBank + 0, FALSE)
	SetCartRegister(&H00, &H2221, startBank + 1, FALSE)
	SetCartRegister(&H00, &H2222, startBank + 2, FALSE)
	SetCartRegister(&H00, &H2223, startBank + 3, FALSE)
End Sub

Sub SA1_SramInit(hSerial As HANDLE)
	'SA-1レジスタセットアップ

	' バス釣り：OVERCLOCKだと成功する, NORMALだと書きこぼしがある
	' 星：OVERCLOCKだと下記こぼす, NORMALだと成功する
	'  -> WRITEパルス伸ばして解決

	SetCPU_Clock(hCOM,HKAC_CLOCK_CPU_ENABLED) 'Enable CPU Clock for Writing SA-1 Register 
	Sleep(500)

	SetCartRegister(&H00, &H2224, &H00, FALSE) 'SNES CPU BW-RAM Mapping to 6000h-7FFFh (W)
	SetCartRegister(&H00, &H2226, &H80, FALSE) 'SNES CPU BW-RAM Write Enable (W)
	SetCartRegister(&H00, &H2228, &H00, FALSE) 'BW-RAM Write-Protected Area (W)
	Sleep(100)
End Sub

Sub SA1_SramBankSel(hSerial As HANDLE, bank As Byte)
	'SA-1 SRAM バンク切り替え
	SetCartRegister(&H00, &H2224, bank As Byte , FALSE) 'SNES CPU BW-RAM Mapping to 6000h-7FFFh (W)
	SetCartRegister(&H00, &H2226, &H80	  , FALSE) 'SNES CPU BW-RAM Write Enable (W)
End Sub

Sub SA1_SramExit(hSerial As HANDLE, sramBuffer As BytePtr)
	'SRAMを最後まで書き込んだ後、何故かSRAMの先頭バイトが0x00になってしまうので再度書き込み
	SendControl(hSerial,CBUS_RST OR CBUS_ROMSEL OR CBUS_OE OR CBUS_WE)
	SetCartRegister(&H00, &H2224, 0   , FALSE) 'SNES CPU BW-RAM Mapping to 6000h-7FFFh (W)
	SetCartRegister(&H00, &H2226, &H80, FALSE) 'SNES CPU BW-RAM Write Enable (W)
	SetCartRegister(&H00, &H6000, sramBuffer[0], FALSE) 'Rewrite First Byte
	Sleep(100)
	SetCartRegister(&H00, &H2226, &H00, FALSE) 'SNES CPU BW-RAM Write Enable (W)
	
	'CPUクロックを停止してフィニッシュ
	SetCPU_Clock(hCOM, HKAC_CLOCK_NORMAL)
End Sub

'SDD1のバンクをセットアップ
'SNESバンクC0, D0, E0, F0にbankStartから始まるROMバンク(1MByteごと)を割り当て
Sub SDD1_SetBanks(hCOM As HANDLE, bankStart As Long)
	Dim buf[3] As Byte, i As Long
	DBM(sprintfStr("Setting S-DD1 bank %d-%d...", bankStart, bankStart + 3))
	
	For i = 0 To 3
		buf[i] = (bankStart + i) As Byte
	Next i
	
	SendControl(hCOM, CBUS_RST Or CBUS_OE)
	WriteROM(hCOM, buf, 0, &H004804, 4, FALSE)
	SendControl(hCOM, CBUS_DEFAULT)
End Sub

'現在のSDD1のバンク設定をGUIに出力

Sub SDD1_PrintBanks(hCOM As HANDLE)
	Dim buf[3] As Byte, i As Long
	
	SendControl(hCOM, CBUS_DEFAULT)
	ReadROM(hCOM, buf, 0, &H004804, 4, FALSE)
	
	For i = 0 To 3
		DBM(sprintfStr("%X00000h-%XFFFFFh : ROM bank%d", &HC + i, &HC + i, buf[i]))
	Next i
	
End Sub

Const SNES_SPC7110_VBANKS_COUNT = 3
Const SNES_SPC7110_MMC_REG_SIZE = SNES_SPC7110_VBANKS_COUNT+2
Const SNES_SPC7110_MMC_ADR = &H4830
Function SPC7110_SetBanks(hCOM As HANDLE,bank As Long,bSRAM_Enable As BOOL) As BOOL
	Dim buf[SNES_SPC7110_MMC_REG_SIZE] As Byte, i As Long

	If bSRAM_Enable Then
		DBM("[SPC7110]SRAM Enable")
	Else
		DBM("[SPC7110]SRAM Disable")
	End If 

	'RESET
	SendControl(hCOM,CBUS_WE or CBUS_ROMSEL or CBUS_OE)

	For i=0 To SNES_SPC7110_VBANKS_COUNT-1
		buf[i+1] = (bank+i) As Byte
		DBM(sprintfStr("[SPC7110]SET_VBANK%X:%0d ",i,buf[i+1]))
	Next i
	buf[0]=(bSRAM_Enable<<7) As Byte
	buf[4]=&H03 '3バンク変更する

	SendControl(hCOM, CBUS_RST or CBUS_ROMSEL or CBUS_OE)
	WriteROM(hCOM, buf, 0, SNES_SPC7110_MMC_ADR, SNES_SPC7110_MMC_REG_SIZE, FALSE)
	SendControl(hCOM, CBUS_DEFAULT)
	ReadROM(hCOM, buf, 0, SNES_SPC7110_MMC_ADR, SNES_SPC7110_MMC_REG_SIZE, FALSE)

	'check bank
	SPC7110_SetBanks=TRUE
	For i=0 To SNES_SPC7110_VBANKS_COUNT-1
		If buf[i+1] <> bank+i Then SPC7110_SetBanks=FALSE :	ExitFor
	Next i

	If SPC7110_SetBanks=FALSE Then
		DBM("bank change failed")
	End If
End Function

Sub SPC7110_PrintBanks(hCOM As HANDLE)
	Dim buf[SNES_SPC7110_MMC_REG_SIZE] As Byte, i As Long '	SendControl(hCOM,CBUS_RST or CBUS_WE)
	SendControl(hCOM, CBUS_DEFAULT)
	ReadROM(hCOM, buf, 0, SNES_SPC7110_MMC_ADR, SNES_SPC7110_MMC_REG_SIZE, FALSE)

	If buf[0] And &H80 Then
		DBM("SRAM-ENABLE")
	Else
		DBM("SRAM-DISABLE")
	End If

	For i = 1 To SNES_SPC7110_VBANKS_COUNT
		DBM(sprintfStr("%X00000h-%XFFFFFh : ROM bank%d", & HC + i, & HC + i, buf[i]))
	Next i

	DBM("Logical-MaxBank : " + Str$(buf[4]))
End Sub