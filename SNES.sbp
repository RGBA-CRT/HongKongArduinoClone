'スーファミシステム系

Const SFC_SPEC_HEADER_SIZE=&H20+&H10
Const SFC_SPEC_HEADER_ADDR=&HFFC0-&H10

Const HiROM_START_ADR=&HC00000
Const HIROM_SRAM_BANKSIZE = 1024*8

Const SRAM_ADDRESS_LoROM_NORMAL = &H700000'&H380000
Const SRAM_ADDRESS_LoROM_MAD 	= &H384000
Const SRAM_ADDRESS_HiROM_NORMAL = &H306000
Const SRAM_ADDRESS_HiROM_MAD 	= &H306000'&HA06000
Const SRAM_ADDRESS_SA1 = &H400000



Const SFC_MAP_TYPE_NUM = 8
Enum SFC_MAP_TYPE	'ヘッダのRomTypeの下位4ビット
	SFC_MAP_LoROM = 0
	SFC_MAP_HiROM = 1
	SFC_MAP_SDD1= 2
	SFC_MAP_SA1	= 3
	SFC_MAP_ExHiROM = 5
	SFC_MAP_SPC7110 = &H0A
	'ここから特殊処理をしないと判定できないマッパ
	SFC_MAP_SpLoROM = &HF0 '衛星対応カートリッジでかつLoROMで3MBのもの
	SFC_MAP_SF_MENU = &HF1 'SFメモリカートリッジ
End Enum

'スーファミヘッダから取得した情報
'後の都合のいい処理がしてある。
'生ヘッダを見たければrawHeaderにアクセス
Type SFC_CART_INFO
	Title[21] As Byte		'ゲームタイトル
	MapMode As Byte			'FAST+HIROMなど
	ROMType As Byte			'MapModeの下位4ビット
	CartType As Byte		'ROM+SRAM+SFXみたいなの
	ROMSize As DWord		'intのromサイズ
	SRAMSize As DWord		'intのSRAMサイズ
	SRAMAddress As DWord	'SRAMがマップされているアドレス
	Country As Byte			'国コード
	Version As Byte			'ROMバージョン
	CheckSum1 As Word		'チェックサム
	CheckSum2 As Word		'チェックサムのNOT
	Mad As Byte				'MAD-1かどうか（現在未使用）
	hasExtraHeader As BOOL	'拡張ヘッダ（FFB0h-FFBFh)があるかどうか
	isBSX  AS BOOL			'BSMCスロットがあるかどうか（衛星放送対応カートリッジかどうか）
	diableChecksum As BOOL	'MENU PROGRAMとかBSMC等のチェックサムが無効なものに使う
	isLoROM AS BOOL			'ROMのマッピングがLoROMなもの。SFC_MAP_LoROM, SA1, SpLoROM, SF_MENUなどでTrueになる
	MakerCode AS Word		'メーカーコード
	MakerName AS BytePtr	'メーカーコードから出した文字列
	GameCode[4] AS Byte		'ゲームコードの文字列（Extraheaderがある時のみ有効)
	AddrOffset AS DWord		'ROMの開始アドレス
	rawHeader As SFC_CART_HEADER
EndType


Type Align(1) SFC_CART_HEADER
	MakerCode 	AS Word	'未使用のこともある
	GameCode	AS DWord
	dummy0[6] 	AS Byte
	ExRamSize 	AS Byte
	ExVersion	AS Byte
	CartSubNum	AS Byte
	'------------------
	GameTitle[20] As Byte
	MapMode 	AS Byte
	CartType 	AS Byte
	RomSize 	AS Byte
	SramSize 	AS Byte
	CountryID	AS Byte
	dummy1		As Byte	'33h固定のはずだが、そうでないものも多い
	Version		As Byte
	Checksum1	AS Word
	Checksum2 	As Word
End Type

'ROMの吸出し
Sub DumpFullROM(info As *SFC_CART_INFO,Path As BytePtr)
	Dim MAX_CONTINUE=DEFAULT_CONTINUE As DWord
	Dim DUMP_BUFFER_SIZE=DEFAULT_DUMP_SIZE As DWord
	Dim DumpAddress As DWord, offset As DWord, ret As DWord
	Dim CheckSum=0 As DWord,bufChecksum AS DWord
	Dim bBankChanged=FALSE As BOOL	'8MBitBank

	Dim buf As BytePtr,nowSize As DWord,Size As DWord,bRomType As Byte
	Dim hout As HANDLE,C As Long	'コンテニューカウンタ
	Dim lt As DWord,time As DWord

	'アドレス系準備
	offset=info->AddrOffset	'固定
	DumpAddress=offset	'インクリメントしていく
	Size=info->ROMSize
	SendControl(hCOM,DEFAULT_CTRLBUS)

	'設定ファイル読み込み
	MAX_CONTINUE=GetPrivateProfileInt(ProgramName,"MaxContinue",DEFAULT_CONTINUE,INIFILE_PATH)
	DUMP_BUFFER_SIZE=GetPrivateProfileInt(ProgramName,"DumpBufferSize",DEFAULT_DUMP_SIZE,INIFILE_PATH)
	if DUMP_BUFFER_SIZE <= 0 Then DUMP_BUFFER_SIZE=DEFAULT_DUMP_SIZE

	'特殊系のセットアップ
	if info->ROMType=SFC_MAP_SDD1 Then
		SDD1_SetBanks(hCOM,0)
		SDD1_PrintBanks(hCOM)

		DUMP_BUFFER_SIZE=DEFAULT_DUMP_SIZE	'0x400000で必ず止まる必要が有るため

	Elseif info->ROMType=SFC_MAP_SPC7110 Then
		DBM("Checking SPC7110...")
		if SPC7110_SetBanks(hCOM,1,FALSE) = FALSE or _
			SPC7110_SetBanks(hCOM,0,FALSE) = FALSE Then
			ErrMes(hMainWnd,ex"SPC7110のセットアップに失敗しました。\nSA-1追加回路が接続されているか確認し、Arduinoを再起動してください。","SPC7110バンク切り替え失敗",0)
			ExitSub
		End If
		SPC7110_PrintBanks(hCOM)
	End If

	'UI系
	SendMessage( MWnd(hProg), PBM_SETPOS, 0, 0 )
	SendMessage(MWnd(hProg), PBM_SETRANGE,0,MAKELONG(0,(Size/DUMP_BUFFER_SIZE) As Word))
	SendMessage(MWnd(hProg), PBM_SETSTEP,1,0)
	SetDlgEnable(STATUS_DUMPING)

	'ダンプバッファの作成	
	buf=calloc(DUMP_BUFFER_SIZE+12)
	hout=OpenFile(Path,GENERIC_WRITE)

	DBM("(Pless Esc to Cancel)")
	DBMN("Dumping")

	lt=GetTickCount()

	Do
		'ESCキーでキャンセル
		PumpMessage()
		if GetKeyState(VK_ESCAPE) And &H80 Then DBM(ex"\r\nCancelled by user."):Goto *EXIT_DUMP

		'吸出し＆データチェック
		ret=ReadROM(hCOM,buf, 0, DumpAddress, DUMP_BUFFER_SIZE,info->isLoROM)
		if ret=0 Then DBM("ERROR!"):Goto *EXIT_DUMP
		if ret<>DUMP_BUFFER_SIZE Then 
			DBMN(ex"[x"+Str$(C)+ex"]")
			C++
			if C>MAX_CONTINUE Then DBM("Over retry count.")
			Continue
		endif

		'ファイルへ出力
		OutFile(hout,buf,DUMP_BUFFER_SIZE)

		'バッファのチェックサム計算
		bufChecksum=CalcChkSum(buf,DUMP_BUFFER_SIZE)

		'3MBの時はラスト8Mbitを再加算
		if DumpAddress>=1024*1024*2 Then
			if info->ROMSize=1024*1024*3 Then
				bufChecksum+=bufChecksum
			End If
		End If
		
		'チェックサム加算
		CheckSum+=bufChecksum

		'次のアドレスを計算
		DumpAddress+=DUMP_BUFFER_SIZE
		'特殊系のバンク切り替え
		if info->ROMType=SFC_MAP_SpLoROM Then
			if DumpAddress-offset=&H200000 Then
				'吸出しアドレスをバンク80hに飛ばす
				offset=&H400000		'LoROMアドレスで400000h, HiROMアドレス(実アドレス)で800000h
				DumpAddress=offset
				Size=&H100000

				DBM(ex"\r\n[SpLoROM]バンク切り替え80h-")
			Endif

		Else if DumpAddress-offset=&H400000 Then
			'4MB超えする時
			if info->ROMType=SFC_MAP_SDD1 Then
				if bBankChanged=FALSE Then
					'ROMバンク0-3を吸い出したので、4-7バンクを吸い出す
					DBM(ex"\r\n")
					bBankChanged=TRUE
					SDD1_SetBanks(hCOM,4)
					SDD1_PrintBanks(hCOM)
					DBM(ex"")

					DumpAddress=offset	'アドレスリセット
				Else
					'4-7バンクを吸い出し終わったので終了
					ExitDo
				End If
			Elseif info->ROMType=SFC_MAP_SPC7110 Then
				if bBankChanged=TRUE Then ExitDo
				DBM("")
				bBankChanged=TRUE
				SPC7110_SetBanks(hCOM,1,FALSE) 'D0:1,E0:2,F0:3 ... F0:0000にデータROMのバンク3をマップ
				DumpAddress=offset+&H300000	'F0:0000からリスタート

			End If

		End If
		if DumpAddress-offset>=Size Then ExitDo

		'進捗表示
		SendMessage(GetDlgItem(hMainWnd,hProg),PBM_STEPIT,0,0)
		SetWindowText(MWnd(Static7),Str$(Int(((DumpAddress-offset)*(bBankChanged+1))/Size*100))+"%")
		DBMN(".")
	Loop
	time=GetTickCount()-lt

	DBM(ex"\r\nTime  : "+Str$(time)+ex"ms")
	DBM("Speed : "+Str$(Int(Size/(time/1000)) As Long)+ex"byte/sec\r\n")

	DBM("HeaderSum:"+Hex$(info->CheckSum2))
	DBM("ActualSum:"+Hex$(CheckSum And &HFFFF))
	if info->CheckSum2=(CheckSum And &HFFFF) and info->CheckSum1=(not(CheckSum) And &HFFFF) Then
		DBM(ex"Checksum OK")
		DBM(ex"Successful!!!")
	Else
		if info->diableChecksum Then
			DBM("Dumping may have been successful...")
		Else
			DBM(ex"Checksum Error!!!")
			MessageBoxf(hMainWnd,"ROM Dump Error",MB_ICONERROR, _
				ex"Checksum Error!\nFailed to dump ROM.\nChecksum1 : %04X -> %04X\nChecksum2 : %04X -> %04X", info->CheckSum1,(not(CheckSum) And &HFFFF),info->CheckSum2,(CheckSum And &HFFFF))
		End If
	Endif
	

*EXIT_DUMP
	SendMessage( MWnd(hProg), PBM_SETPOS, 0, 0 )
	SetWindowText(MWnd(Static7),"100%")
	SetDlgEnable(STATUS_CONNECTED)

	CloseHandle(hout)
	free(buf)

	SetAddress(hCOM,0,FALSE)

	FlushCom(hCOM)
EndSub


'チェックサム計算
Function checkContiguous(adr As BytePtr,size As DWord) As Long
	Dim i As Long,someCount As DWord,last As Byte
	For i=0 To size
		if last=adr[i] Then
			/*if last<>0 Then*/ someCount++	'0連続はよくあるので除外
			
			if someCount=>&H1000 Then DBM(Hex$(last)+"fill"):ExitFunction
		Else
			someCount=0
		End If
		last=adr[i]
	Next i
	checkContiguous=TRUE
End Function

Function CalcChkSum(data As BytePtr,length As DWord) As DWord
	Dim i As DWord
	CalcChkSum=0
	Do
		CalcChkSum += data[i]
		if i => length-1 Then ExitDo
		i++
	Loop
End Function

'NP   01 CPU_CLOCK. 02 EXPAND, 59 PA1が結線
'SA-1 01 CPU_CLOCK, 33 REFRESHが結線

/*  http://hongkongarduino.web.fc2.com/archive/forprogram.htm
    Ch4に3を設定。SRAMのOEとディスエーブル、CEをイネーブルにする。= CE:0 RST:1 OE:1
    MADチップの場合は7を出力する。								  = CE:1 RST:1 OE:1
    アドレスを設定する。
    74138のCBAを100にし、データ出力モードにする。
    このとき、STROBEはL(反転出力に注意)にしておく。
    STROBEをHにし、WEをイネーブルにする。
    BUSY線から74645が有効になっているか確認してからデータを出力する。
    STROBEをLにし、WEをディスエーブルにする。
    Ch4を1に設定する。MADチップの場合は5。 
*/
Sub WriteSRAM(hFile As HANDLE,info As *SFC_CART_INFO,FileName As BytePtr)
	Dim hIn As HANDLE,buf As BytePtr
	Dim CtrMask As Byte

	if info->SRAMSize=0 Then DBM("SRAM Size is zero."):ExitSub
	DBM("SRAM Writeing...")
	DBM("SRAM Adr : "+Hex$(info->SRAMAddress)+"h")
	PumpMessage()

	hIn=OpenFile(FileName,GENERIC_READ)	
	if info->SRAMSize <> GetFileSize(hIn,NULL) Then
		if MessageBox(hMainWnd,"ファイルサイズが不正です。続行しますか？",ProgramName+" - Write SRAM",MB_YESNO) = IDNO Then ExitSub
	Endif

	buf=calloc(info->SRAMSize)
	LoadFile(hIn,buf,info->SRAMSize)
	CloseHandle(hIn)

	if info->ROMType <> SFC_MAP_SA1 Then
		'ノーマルカートリッジ
		if info->Mad=TRUE Then
			CtrMask=SRAM_WRITE_MAD
		Else
			CtrMask=SRAM_WRITE_NORMAL
		Endif	
		SendControl(hFile,CtrMask)	' SRAM CE

		if info->ROMType = SFC_MAP_HiROM Then
			Dim BankCount As DWord,WriteSize As DWord,bi As Long,WriteAdr As DWord
			BankCount=(info->SRAMSize/HIROM_SRAM_BANKSIZE -1) AS DWord 	'8KBバンクごとに分ける
			if BankCount<0 Then  BankCount=0

			DBM("SRAM BANK COUNT : "+Str$(BankCount+1))
			if BankCount=0 Then
				WriteSize=info->SRAMSize	'normal Write
			Else
				WriteSize=HIROM_SRAM_BANKSIZE 'Write with bank change 
			Endif

			For bi=0 To BankCount
				WriteAdr=info->SRAMAddress+bi*&H010000
				DBM(sprintfStr("Address %06Xh-%06Xh",WriteAdr,WriteAdr+WriteSize))
				PumpMessage()				
				WriteROM(hFile,buf+bi*WriteSize, 0, WriteAdr , WriteSize,FALSE)
			Next bi
		Else

			WriteROM(hFile,buf, 0, info->SRAMAddress , info->SRAMSize,FALSE)
		Endif
	
	Else
		'SA-1 (sanni氏のcartreaderを参考)
		'http://forum.arduino.cc/index.php?topic=158974.210

		DBM("SA-1 Write BW-RAM (動作不能)")

		Dim cmd[1512] As Byte
		Dim block As Long,lastBlock As DWord,curByte As DWord,i As Long

		
		DBM("address = "+Hex$(info->SRAMAddress))
		lastBlock=(info->SRAMSize/&H2000) AS DWord
		DBM("blocks = "+Hex$(lastBlock))

		SetCPU_Clock(hFile,HKAC_CLOCK_CPU_ENABLED)
	
		for block=0 To lastBlock-1
			SendControl(hFile,RST or OE or CE or WE)'SRAM_WRITE_SA1)	' RST WE RD CE -> High

			cmd[0]=&H20
			WriteROM(hFile,cmd,0,&H2200,1,FALSE)	'SRAM WRITE ENABLE
			cmd[0]=&H00
			WriteROM(hFile,cmd,0,&H2200,1,FALSE)	'SRAM WRITE ENABLE
			cmd[0]=0 As Byte
			cmd[1]=0 As Byte
			WriteROM(hFile,cmd,0,&H2225,2,FALSE)	'MAP SRAM to 0x6000~0x7FFF
			cmd[0]=&H80
			cmd[1]=&H80
			WriteROM(hFile,cmd,0,&H2227,2,FALSE)	'SRAM WRITE ENABLE
		'	cmd[0]=&Hff
		'	WriteROM(hFile,cmd,0,&H2228,1,FALSE)	'SRAM WRITE ENABLE
			DBM("Writeing block"+Str$(block))

		/*	Dim ladr AS DWord,j AS DWord
			for j=0 to 15
				for i=0 to 15
					ladr=i*&H1000+&H0000+j*&H100000
					FillMemory(cmd,512,(i+(j<<4)) As Byte)
					WriteROM(hFile,cmd,0,ladr,512,FALSE)
					DBM(Hex$(ladr)+":+"+Hex$(cmd[0]))
				Next i
					if GetKeyState(VK_ESCAPE) And &H80 Then Exitfor
			Next j*/

			for curByte=0 To &H7FFF Step 512
				if curByte < &H6000 Then
					WriteROM(hFile,cmd,0,curByte,512,FALSE)
				Else
					WriteROM(hFile,buf+curByte-&H6000+block*&H2000,0,curByte,512,FALSE)
					DBM(Hex$(curByte-&H6000+block*&H2000)+" / "+Hex$(curByte))
				End If*/
				Sleep(100)

			Next curByte

			Sleep(1000)
		'	Exitfor
		Next block
		cmd[0]=0
		WriteROM(hFile,cmd,0,&H2226,1,FALSE)	'SRAM DISABLE

		SetCPU_Clock(hFile,HKAC_CLOCK_NORMAL)

		SendControl(hFile,12)	'RST LOW
	Endif

	DBM(ex"Done\r\n")
	free(buf)
	
	SendControl(hFile,DEFAULT_CTRLBUS)	'default
	SetAddress(hFile,0,FALSE)
EndSub

Sub DumpSRAM(hFile As HANDLE,info As *SFC_CART_INFO,FileName As BytePtr)
	Dim hout As HANDLE,buf As BytePtr
	Dim CtrMask As Byte

	hout=OpenFileEx(FileName,GENERIC_WRITE)
	if hout=NULL Then
		DBM("Cannot open file! "+MakeStr(FileName))
		ErrMes(hMainWnd,"SRAMを保存できませんでした。",0,0,GetLastError())
		ExitSub
	Endif

	if info->SRAMSize=0 Then DBM("SRAM Size is zero."):ExitSub
	DBM("SRAM Dumping...")
	PumpMessage()

	buf=calloc(info->SRAMSize)

	if info->Mad=TRUE Then
		CtrMask=SRAM_READ_MAD
	Else
		CtrMask=SRAM_READ_NOMAL
	Endif	

	SendControl(hFile,CtrMask)	' SRAM CE

	if info->ROMType = SFC_MAP_HiROM Then
		Dim BankCount As DWord,DumpSize As DWord,bi As Long,DumpAdr As DWord
		BankCount=(info->SRAMSize/HIROM_SRAM_BANKSIZE -1) AS DWord 	'8KBバンクごとに分ける
		if BankCount<0 Then  BankCount=0

		DBM("SRAM BANK COUNT : "+Str$(BankCount))
		if BankCount=0 Then
			DumpSize=info->SRAMSize	'normal dump
		Else
			DumpSize=HIROM_SRAM_BANKSIZE 'dump with bank change 
		Endif

		For bi=0 To BankCount
			DumpAdr=info->SRAMAddress+bi*&H010000
			DBM(sprintfStr("Address %06Xh-%06Xh",DumpAdr,DumpAdr+DumpSize))
			ReadROM(hFile,buf, 0, DumpAdr, DumpSize,FALSE)
			OutFile(hout,buf,DumpSize)
		Next bi
	Else
		ReadROM(hFile,buf, 0, info->SRAMAddress, info->SRAMSize,FALSE)
		OutFile(hout,buf,info->SRAMSize)
	End If

	CloseHandle(hout)

	DBM(ex"Done\r\n")
	free(buf)
	
	SetAddress(hFile,0,FALSE)
	SendControl(hFile,DEFAULT_CTRLBUS)	'default
EndSub


'生のROMヘッダをSFC_CART_INFOに
Sub SloveCartInfo(data As *SFC_CART_HEADER,info As *SFC_CART_INFO)
	'カートリッジのヘッダエリアのデータをSFC_CART_INFOへ格納

	Dim i As Long

	memcpy(VarPtr(info->rawHeader),data,Sizeof(SFC_CART_HEADER))

	memcpy(info,data->GameTitle,21)
	if info->Title[i] = 0 Then
		lstrcpy(info->Title,"CART CONNECTION ERR")
	Else
		'右からスペースをNULL文字で埋めル
		For i=20 To 0 Step -1
			if info->Title[i] <> &H20 And info->Title[i] <> 0 Then	
				exitfor
			Endif
			info->Title[i]=0
		Next i
	End If
	info->Title[21]=0

	info->CartType = data->CartType
	info->MapMode=data->MapMode
	info->ROMType=(info->MapMode And &H0F)

	
	'拡張（？）ヘッダがあるかチェック
	info->hasExtraHeader = ( (data->MakerCode>>8 >= &H20) And _
		(NOT(isSameBin(VarPtr(data->MakerCode),ex"\x00\x00\x00\x00\x00\x00\x00",7))) And _
		(NOT(isSameBin(VarPtr(data->MakerCode),ex"\xFF\xFF\xFF\xFF\xFF\xFF\xFF",7))) ) And &H01

	if info->hasExtraHeader Then
		'ヘッダのコードは文字列で来る
		'code = 下位 or 上位<<4
		Dim code AS Word
		code=data->MakerCode
		if code=0 Then code=&H3030
		code= ((code And &HFF00) -&H3000)>>8 or ( (code And &H0F) + (&H09 * ((code>>6) And &H01)) << 4 )
		info->MakerCode=code
		info->MakerName=getLicenceString(code)
		lstrcpy(info->GameCode,Dw2Str(info->rawHeader.GameCode))
		if lstrcmp(info->GameCode,"    ")=0 Then lstrcpy(info->GameCode,"????")
	End If

	Select Case info->ROMType
		Case SFC_MAP_HiROM
			info->SRAMAddress=SRAM_ADDRESS_HiROM_NORMAL

		Case SFC_MAP_SA1
			info->SRAMAddress=SRAM_ADDRESS_SA1

		Case Else
			info->SRAMAddress=SRAM_ADDRESS_LoROM_NORMAL

	End Select
	
	if data->RomSize<>0 then
		info->ROMSize=&H0400 << data->RomSize
	Else
		info->ROMSize=0
	End If

	if data->SramSize<>0 then
		info->SRAMSize = &H0400 << data->SramSize
	Else
		info->SRAMSize=0
	End If

	if info->ROMType=SFC_MAP_LoROM or info->ROMType=SFC_MAP_SpLoROM or info->ROMType=SFC_MAP_SF_MENU Then
		info->AddrOffset=0
		info->isLoROM=TRUE
	Else
		info->AddrOffset=HiROM_START_ADR
		info->isLoROM=FALSE
	End If


	info->Country = data->CountryID
	info->Version = data->Version
	info->CheckSum1 = data->Checksum1
	info->CheckSum2 = data->Checksum2

	'SpecialLoROMはLoROMの衛星対応カートリッジで3MB目を吸うときにバンク切り替えが必要
	'品番がSHVC-ZxxJであるものは衛星対応カートリッジ
	'ここではダビスタ96とサウンドノベルツクールとBSXがヒットするはず。
	'BSXは1MBなのでバンク切り替え必要なし
	If info->GameCode[0]=Asc("Z")  And info->GameCode[3]=Asc("J") Then 
		info->isBSX=TRUE
		if info->ROMType = SFC_MAP_LoROM Then
			if info->ROMSize>1024*1024*2 Then
				info->ROMType=SFC_MAP_SpLoROM
				info->ROMSize=1024*1024*3
			End If
		End If
	End If

	'タイトルがMENU PROGRAMならSFM確定
	if lstrcmp("MENU PROGRAM",info->Title)=0 Then
		info->ROMType=SFC_MAP_SF_MENU
		info->diableChecksum=TRUE
	End If

EndSub

Function isSnesHeader(header AS *SFC_CART_HEADER) AS BOOL
	Dim i AS Long
	For i=0 To 19
		if header->GameTitle[i] < &H20 Then 
			if NOT(i>4 And header->GameTitle[i]=0) Then	Goto *ISH_ERR
		End If
	Next i
	'サイズチェック
	if header->RomSize > &H0D Then Goto *ISH_ERR	'Over 64Mbit
'	if header->SramSize > &H07 Then Goto *ISH_ERR	'Over 128Kbit (BS-XだとSRAMSizeがデタラメなので廃止)
	isSnesHeader=TRUE
	ExitFunction

*ISH_ERR
	isSnesHeader=FALSE
End Function


'SDD1のバンクをセットアップ
'SNESバンクC0, D0, E0, F0にbankStartから始まるROMバンク(1MByteごと)を割り当て
Sub SDD1_SetBanks(hCOM As HANDLE,bankStart As Long)
	Dim buf[3] As Byte, i As Long
	DBM(sprintfStr("Setting S-DD1 bank %d-%d...",bankStart,bankStart+3))

	For i=0 To 3
		buf[i] = (bankStart+i) AS Byte
	Next i

	SendControl(hCOM,RST or OE)
	WriteROM(hCOM,buf,0,&H004804,4,FALSE)
	SendControl(hCOM,DEFAULT_CTRLBUS)
End Sub

'現在のSDD1のバンク設定をGUIに出力
Sub SDD1_PrintBanks(hCOM As HANDLE)
	Dim buf[3] As Byte, i As Long

	SendControl(hCOM,DEFAULT_CTRLBUS)
	ReadROM(hCOM,buf,0,&H004804,4,FALSE)
			
	For i=0 To 3
		DBM(sprintfStr("%X00000h-%XFFFFFh : ROM bank%d",&HC+i,&HC+i,buf[i]))
	Next i

End Sub



Const SNES_SPC7110_VBANKS_COUNT = 3
Const SNES_SPC7110_MMC_REG_SIZE = SNES_SPC7110_VBANKS_COUNT+2
Const SNES_SPC7110_MMC_ADR = &H4830
Function SPC7110_SetBanks(hCOM As HANDLE,bank As Long,bSRAM_Enable As BOOL) As BOOL
	Dim buf[SNES_SPC7110_MMC_REG_SIZE] As Byte, i As Long

	'RESET
	SendControl(hCOM,WE or CE or OE)

	For i=0 To SNES_SPC7110_VBANKS_COUNT-1
		buf[i+1] = (bank+i) AS Byte
		DBM(sprintfStr("[SPC7110]SET_VBANK%X:%0d ",i,buf[i+1]))
	Next i
	buf[0]=(bSRAM_Enable<<7) As Byte
	buf[4]=&H03

	SendControl(hCOM,RST or CE or OE)
	WriteROM(hCOM,buf,0,SNES_SPC7110_MMC_ADR,SNES_SPC7110_MMC_REG_SIZE,FALSE)
	SendControl(hCOM,DEFAULT_CTRLBUS)
	ReadROM(hCOM,buf,0,SNES_SPC7110_MMC_ADR,SNES_SPC7110_MMC_REG_SIZE,FALSE)

	'check bank
	SPC7110_SetBanks=TRUE
	For i=0 To SNES_SPC7110_VBANKS_COUNT-1
		if buf[i+1] <> bank+i Then SPC7110_SetBanks=FALSE :	ExitFor
	Next i

	if SPC7110_SetBanks=FALSE Then
		DBM("bank change failed")
	End If
End Function

Sub SPC7110_PrintBanks(hCOM As HANDLE)
	Dim buf[SNES_SPC7110_MMC_REG_SIZE] As Byte, i As Long

'	SendControl(hCOM,RST or WE)
	SendControl(hCOM,DEFAULT_CTRLBUS)
	ReadROM(hCOM,buf,0,SNES_SPC7110_MMC_ADR,SNES_SPC7110_MMC_REG_SIZE,FALSE)
	
	if buf[0] And &H80 Then 
		DBM("SRAM-ENABLE")
	Else
		DBM("SRAM-DISABLE")
	End If

	For i=1 To SNES_SPC7110_VBANKS_COUNT
		DBM(sprintfStr("%X00000h-%XFFFFFh : ROM bank%d",&HC+i,&HC+i,buf[i]))
	Next i

	DBM("Logical-MaxBank : "+Str$(buf[4]))
End Sub
