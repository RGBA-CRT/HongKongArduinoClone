'スーファミシステム系

Const SFC_SPEC_HEADER_SIZE=&H20+&H10
Const SFC_SPEC_HEADER_ADDR=&HFFC0-&H10

Const HiROM_START_ADR=&HC00000

Const SRAM_ADDRESS_LoROM_NORMAL = &H700000'&H380000
Const SRAM_ADDRESS_LoROM_MAD 	= &H384000
Const SRAM_ADDRESS_HiROM_NORMAL = &H1C0000
Const SRAM_ADDRESS_HiROM_MAD 	= &H206000'&HA06000
Const SRAM_ADDRESS_SA1 = &H400000

Const SFC_ROM_TYPE_NUM = 7
Enum SFC_ROM_TYPE	'ヘッダのRomTypeの下位4ビット
	SFC_ROM_LoROM = 0
	SFC_ROM_HiROM = 1
	SFC_ROM_SDD1= 2
	SFC_ROM_SA1	= 3
	SFC_ROM_ExHiROM = 5
	SFC_ROM_SPC7110 = &H0A
	SFC_ROM_SpLoROM = &HF0	'ダビスタ用で、ヘッダからはわからない
End Enum
	
Type SFC_CART_INFO
	Title[21] AS Byte
	MapMode AS Byte
	ROMType As Byte
	CartType AS Byte
	ROMSize AS DWord
	SRAMSize AS DWord
	SRAMAddress As DWord
	Country AS Byte
	Version AS Byte
	CheckSum1 AS Word
	CheckSum2 AS Word
	Mad AS Byte
	hasExtraHeader AS BOOL
	rawHeader AS SFC_CART_HEADER
EndType


Type Align(1) SFC_CART_HEADER
	MakerCode 	AS Word	'未使用のこともある
	GameCode	AS DWord
	dummy0[6] 	AS Byte
	ExRamSize 	AS Byte
	ExVersion	AS Byte
	CartSubNum	AS Byte
	'------------------
	GameTitle[20] AS Byte
	MapMode 	AS Byte
	CartType 	AS Byte
	RomSize 	AS Byte
	SramSize 	AS Byte
	CountryID	AS Byte
	dummy1		As Byte	'33h固定のはずだが、そうでないものも多い
	Version		As Byte
	Checksum1	AS Word
	Checksum2 	As Word
End Type

'ROMの吸出し
Sub DumpFullROM(info AS *SFC_CART_INFO,Path AS BytePtr)
	Dim MAX_CONTINUE=DEFAULT_CONTINUE As DWord
	Dim DUMP_BUFFER_SIZE=DEFAULT_DUMP_SIZE AS DWord
	Dim DumpAddress As DWord, offset AS DWord, ret AS DWord, CheckSum=0 AS DWord,
	Dim bBankChanged=FALSE AS BOOL	'8MBitBank

	Dim buf AS BytePtr,nowSize As DWord,Size AS DWord,bRomType AS Byte
	Dim hout AS HANDLE,C AS Long	'コンテニューカウンタ
	Dim lt AS DWord,time AS DWord

	'アドレス系準備
	if info->ROMType=SFC_ROM_LoROM or info->ROMType=SFC_ROM_SpLoROM Then
		bRomType=TRUE
		DumpAddress=0
		offset=0
	Else
		bRomType=FALSE
		DumpAddress=HiROM_START_ADR
		offset=HiROM_START_ADR
	Endif
	Size=info->ROMSize
	SendControl(hCOM,DEFAULT_CTRLBUS)

	'設定ファイル読み込み
	MAX_CONTINUE=GetPrivateProfileInt(ProgramName,"MaxContinue",DEFAULT_CONTINUE,INIFILE_PATH)
	DUMP_BUFFER_SIZE=GetPrivateProfileInt(ProgramName,"DumpBufferSize",DEFAULT_DUMP_SIZE,INIFILE_PATH)
	if DUMP_BUFFER_SIZE <= 0 Then DUMP_BUFFER_SIZE=DEFAULT_DUMP_SIZE

	'特殊系のセットアップ
	if info->ROMType=SFC_ROM_SDD1 Then
		SDD1_SetBanks(hCOM,0)
		SDD1_PrintBanks(hCOM)

		DUMP_BUFFER_SIZE=DEFAULT_DUMP_SIZE	'0x400000で必ず止まる必要が有るため

	Elseif info->ROMType=SFC_ROM_SPC7110 Then
		DBM("Checking SPC7110...")
		if SPC7110_SetBanks(hCOM,1,FALSE) = FALSE or _
			SPC7110_SetBanks(hCOM,0,FALSE) = FALSE Then
			ErrMes(hMainWnd,ex"SPC7110のセットアップに失敗しました。\nSA-1追加回路が接続されているか確認し、Arduinoを再起動してください。","SPC7110バンク切り替え失敗",0)
			ExitSub
		End If
		SPC7110_PrintBanks(hCOM)
	End If

	'UI系
	SendMessage( MWnd(hProg), PBM_SETPOS, 0, 0 )
	SendMessage(MWnd(hProg), PBM_SETRANGE,0,MAKELONG(0,(Size/DUMP_BUFFER_SIZE) As Word))
	SendMessage(MWnd(hProg), PBM_SETSTEP,1,0)
	SetDlgEnable(STATUS_DUMPING)

	'ダンプバッファの作成	
	buf=calloc(DUMP_BUFFER_SIZE+12)
	hout=OpenFile(Path,GENERIC_WRITE)

	DBM("(Pless Esc to Cancel)")
	DBMN("Dumping")

	lt=GetTickCount()

	Do
		'ESCキーでキャンセル
		PumpMessage()
		if GetKeyState(VK_ESCAPE) And &H80 Then DBM(ex"\r\nCancelled by user."):Goto *EXIT_DUMP

		'吸出し＆データチェック
		ret=ReadROM(hCOM,buf, 0, DumpAddress, DUMP_BUFFER_SIZE,bRomType)
		if ret=0 Then DBM("ERROR!"):Goto *EXIT_DUMP
		if ret<>DUMP_BUFFER_SIZE Then 
			DBM(ex"\r\n["+Str$(C)+ex"]Warning!")
			C++
			if C>MAX_CONTINUE Then DBM("Over retry count.")
			Continue
		endif

		'出力＆チェックサム計算
		OutFile(hout,buf,DUMP_BUFFER_SIZE)
		CheckSum+=CalcChkSum(buf,DUMP_BUFFER_SIZE)

		'次のアドレスを計算
		DumpAddress+=DUMP_BUFFER_SIZE
		'特殊系の小細工
		if info->ROMType=SFC_ROM_SpLoROM Then
			if DumpAddress-offset=&H200000 Then
				'吸出しアドレスをバンク80hに飛ばす
				offset=&H400000		'LoROMアドレスで400000h, HiROMアドレス(実アドレス)で800000h
				DumpAddress=offset
				Size=&H100000

				'特殊LoROMのチェックサムの出し方がわからなかったので、
				'このプログラムのアルゴリズムで出したダビスタのチェックサムを強制的にセットする
				'サウンドノベルツクール2は知らない
				if info->CheckSum2=&HCC86 Then
					info->CheckSum1=&H83BD
					info->CheckSum2=&H7C42
				Else
					DBM("未知の特殊LoROM：ダビスタ96以外はチェックサムエラーが必ず出ます。")
				End If
				DBM(ex"\r\n[SpLoROM]バンク切り替え80h-")
			Endif

		Else if DumpAddress-offset=&H400000 Then
			'4MB超えする時
			if info->ROMType=SFC_ROM_SDD1 Then
				if bBankChanged=FALSE Then
					'ROMバンク0-3を吸い出したので、4-7バンクを吸い出す
					DBM(ex"\r\n")
					bBankChanged=TRUE
					SDD1_SetBanks(hCOM,4)
					SDD1_PrintBanks(hCOM)
					DBM(ex"")

					DumpAddress=offset	'アドレスリセット
				Else
					'4-7バンクを吸い出し終わったので終了
					ExitDo
				End If
			Elseif info->ROMType=SFC_ROM_SPC7110 Then
				if bBankChanged=TRUE Then ExitDo
				DBM("")
				bBankChanged=TRUE
				SPC7110_SetBanks(hCOM,1,FALSE) 'D0:1,E0:2,F0:3 ... F0:0000にデータROMのバンク3をマップ
				DumpAddress=offset+&H300000	'F0:0000からリスタート
				'ここまで来るのは天外魔境Zero(Prog8M+Data4M)なので、ROMサイズを変更(40Mbit)
			End If

		End If
		if DumpAddress-offset>=Size Then ExitDo

		'進捗表示
		SendMessage(GetDlgItem(hMainWnd,hProg),PBM_STEPIT,0,0)
		SetWindowText(MWnd(Static7),Str$(Int(((DumpAddress-offset)*(bBankChanged+1))/Size*100))+"%")
		DBMN(".")
	Loop
	time=GetTickCount()-lt

	DBM(ex"\r\nTime  : "+Str$(time)+ex"ms")
	DBM("Speed : "+Str$(Int(Size/(time/1000)) AS Long)+ex"byte/sec\r\n")

	if info->CheckSum2=(CheckSum And &HFFFF) and info->CheckSum1=(not(CheckSum) And &HFFFF) Then
		DBM(ex"Checksum OK")
		DBM(ex"Successful!!!")
	Else
		DBM(ex"Checksum Error!!!")
		MessageBoxf(hMainWnd,"ROM Dump Error",MB_ICONERROR, _
			ex"Checksum Error!\nFailed to dump ROM.\nChecksum1 : %04X -> %04X\nChecksum2 : %04X -> %04X", info->CheckSum1,(not(CheckSum) And &HFFFF),info->CheckSum2,(CheckSum And &HFFFF))
	Endif
	

*EXIT_DUMP
	SendMessage( MWnd(hProg), PBM_SETPOS, 0, 0 )
	SetWindowText(MWnd(Static7),"100%")
	SetDlgEnable(STATUS_CONNECTED)

	CloseHandle(hout)
	free(buf)

	SetAddress(hCOM,0,FALSE)
EndSub


'チェックサム計算
Function checkContiguous(adr AS BytePtr,size AS DWord) AS Long
	Dim i AS Long,someCount AS DWord,last AS Byte
	For i=0 To size
		if last=adr[i] Then
			/*if last<>0 Then*/ someCount++	'0連続はよくあるので除外
			
			if someCount=>&H1000 Then DBM(Hex$(last)+"fill"):ExitFunction
		Else
			someCount=0
		End If
		last=adr[i]
	Next i
	checkContiguous=TRUE
End Function

Function CalcChkSum(data AS BytePtr,length AS DWord) AS DWord
	Dim i AS DWord
	CalcChkSum=0
	Do
		CalcChkSum += data[i]
		if i => length-1 Then ExitDo
		i++
	Loop
End Function


/*  http://hongkongarduino.web.fc2.com/archive/forprogram.htm
    Ch4に3を設定。SRAMのOEとディスエーブル、CEをイネーブルにする。= CE:0 RST:1 OE:1
    MADチップの場合は7を出力する。								  = CE:1 RST:1 OE:1
    アドレスを設定する。
    74138のCBAを100にし、データ出力モードにする。
    このとき、STROBEはL(反転出力に注意)にしておく。
    STROBEをHにし、WEをイネーブルにする。
    BUSY線から74645が有効になっているか確認してからデータを出力する。
    STROBEをLにし、WEをディスエーブルにする。
    Ch4を1に設定する。MADチップの場合は5。 
*/
Sub WriteSRAM(hFile AS HANDLE,info AS *SFC_CART_INFO,FileName AS BytePtr)
	Dim hIn AS HANDLE,buf AS BytePtr
	Dim CtrMask as Byte

	if info->SRAMSize=0 Then DBM("SRAM Size is zero."):ExitSub
	DBM("SRAM Writeing...")
	DBM("Address:0x"+Hex$(info->SRAMAddress))
	PumpMessage()

	hIn=OpenFile(FileName,GENERIC_READ)	
	if info->SRAMSize <> GetFileSize(hIn,NULL) Then
		if MessageBox(hMainWnd,"ファイルサイズが不正です。続行しますか？",ProgramName+" - Write SRAM",MB_YESNO) = IDNO Then ExitSub
	Endif

	buf=calloc(info->SRAMSize)
	LoadFile(hIn,buf,info->SRAMSize)
	CloseHandle(hIn)

	if info->ROMType <> SFC_ROM_SA1 Then
		'ノーマルカートリッジ
		if info->Mad=TRUE Then
			CtrMask=SRAM_WRITE_MAD
		Else
			CtrMask=SRAM_WRITE_NORMAL
		Endif	

		SendControl(hFile,CtrMask)	' SRAM CE
		WriteROM(hFile,buf, 0, info->SRAMAddress , info->SRAMSize,FALSE)
	
	Else
		'SA-1 (sanni氏のcartreaderを参考)
		DBM("SA-1 Write BW-RAM (動作不能)")
		Dim cmd[512] AS Byte
		Dim block AS Long,lastBlock AS Long,curByte AS DWord,i AS Long

		lastBlock=info->SRAMSize/&H2000
		DBM("blocks = "+Hex$(lastBlock))

		SetCPU_Clock(hFile,TRUE)
	
		SendControl(hFile,RST or OE or CE or WE)'SRAM_WRITE_SA1)	' RST WE RD CE -> High

		for block=0 To lastBlock-1
			cmd[0]=block
			cmd[1]=block
			WriteROM(hFile,cmd,0,&H2224,2,FALSE)	'MAP SRAM to 0x6000~0x7FFF
			cmd[0]=&H80
			cmd[1]=&H80
			WriteROM(hFile,cmd,0,&H2226,2,FALSE)	'SRAM WRITE ENABLE
			DBM("Writeing block"+Str$(block))
			FillMemory(cmd,512,block+lastBlock)

			for curByte=0 To &H7FFF Step 512
				if curByte < &H6000 Then
				'	WriteROM(hFile,cmd,0,curByte,512,FALSE)
				Else
					WriteROM(hFile,buf+curByte-&H6000+block*&H2000,0,curByte,512,FALSE)
					DBM(Hex$(curByte-&H6000+block*&H2000)+" / "+Hex$(curByte))
				End If
				Sleep(10)

			Next curByte

			Sleep(1000)
			Exitfor
		Next block
		cmd[0]=0
		WriteROM(hFile,cmd,0,&H2227,1,FALSE)	'SRAM DISABLE

		SetCPU_Clock(hFile,FALSE)

		SendControl(hFile,12)	'RST LOW
	Endif

	DBM(ex"Done\r\n")
	free(buf)
	
	SendControl(hFile,DEFAULT_CTRLBUS)	'default
	SetAddress(hFile,0,FALSE)
EndSub

Sub DumpSRAM(hFile AS HANDLE,info AS *SFC_CART_INFO,FileName AS BytePtr)
	Dim hout AS HANDLE,buf AS BytePtr
	Dim CtrMask as Byte

	if info->SRAMSize=0 Then DBM("SRAM Size is zero."):ExitSub
	DBM("SRAM Dumping...")
	DBM("Address:0x"+Hex$(info->SRAMAddress))
	PumpMessage()
	
	buf=calloc(info->SRAMSize)

	if info->Mad=TRUE Then
		CtrMask=SRAM_READ_MAD
	Else
		CtrMask=SRAM_READ_NOMAL
	Endif	

	SendControl(hFile,CtrMask)	' SRAM CE
	ReadROM(hFile,buf, 0, info->SRAMAddress , info->SRAMSize,FALSE)

	hout=OpenFile(FileName,GENERIC_WRITE)
	OutFile(hout,buf,info->SRAMSize)
	CloseHandle(hout)

	DBM(ex"Done\r\n")
	free(buf)
	
	SetAddress(hFile,0,FALSE)
	SendControl(hFile,DEFAULT_CTRLBUS)	'default
EndSub


'生のROMヘッダをSFC_CART_INFOに
Sub SloveCartInfo(data AS *SFC_CART_HEADER,info As *SFC_CART_INFO)
	'カートリッジのヘッダエリアのデータをSFC_CART_INFOへ格納

	Dim i as Long

	memcpy(VarPtr(info->rawHeader),data,Sizeof(SFC_CART_HEADER))
	'拡張（？）ヘッダがあるかチェック
	info->hasExtraHeader=isSameBin(info->rawHeader.dummy0,ex"\x00\x00\x00\x00\x00\x00",7)

	memcpy(info,data->GameTitle,21)
	if info->Title[i] = 0 Then
		lstrcpy(info->Title,"CART CONNECTION ERR")
	Else
		'右からスペースをNULL文字で埋めル
		For i=20 To 0 Step -1
			if info->Title[i] <> &H20 And info->Title[i] <> 0 Then	
				exitfor
			Endif
			info->Title[i]=0
		Next i
	End If
	info->Title[21]=0

	info->CartType = data->CartType
	info->MapMode=data->MapMode
	info->ROMType=(info->MapMode And &H0F)
	if info->hasExtraHeader And info->rawHeader.GameCode=Str2Dw("ZDBJ") And data->Checksum2=&HCC86 Then
		info->ROMType=SFC_ROM_SpLoROM
	End If

	Select Case info->ROMType
		Case SFC_ROM_HiROM
			info->SRAMAddress=SRAM_ADDRESS_HiROM_NORMAL

		Case SRAM_ADDRESS_SA1
			info->SRAMAddress=SRAM_ADDRESS_SA1

		Case Else
			info->SRAMAddress=SRAM_ADDRESS_LoROM_NORMAL

	End Select
	
	if data->RomSize<>0 then
		info->ROMSize=&H0400 << data->RomSize
	Else
		info->ROMSize=0
	End If

	if data->SramSize<>0 then
		info->SRAMSize = &H0400 << data->SramSize
	Else
		info->SRAMSize=0
	End If

	info->Country = data->CountryID
	info->Version = data->Version
	info->CheckSum1 = data->Checksum1 '((data[29] << 8) Or data[28]) AS Word
	info->CheckSum2 = data->Checksum2 '((data[31] << 8) Or data[30]) AS Word

EndSub



'SDD1のバンクをセットアップ
'SNESバンクC0, D0, E0, F0にbankStartから始まるROMバンク(1MByteごと)を割り当て
Sub SDD1_SetBanks(hCOM AS HANDLE,bankStart AS Long)
	Dim buf[3] AS Byte, i AS Long
	DBM(sprintfStr("Setting S-DD1 bank %d-%d...",bankStart,bankStart+3))

	For i=0 To 3
		buf[i] = bankStart+i
	Next i

	SendControl(hCOM,RST or OE)
	WriteROM(hCOM,buf,0,&H004804,4,FALSE)
	SendControl(hCOM,DEFAULT_CTRLBUS)
End Sub

'現在のSDD1のバンク設定をGUIに出力
Sub SDD1_PrintBanks(hCOM AS HANDLE)
	Dim buf[3] AS Byte, i AS Long

	SendControl(hCOM,DEFAULT_CTRLBUS)
	ReadROM(hCOM,buf,0,&H004804,4,FALSE)
			
	For i=0 To 3
		DBM(sprintfStr("%X00000h-%XFFFFFh : ROM bank%d",&HC+i,&HC+i,buf[i]))
	Next i

End Sub


'SPC7110のバンクをセットアップ(要CPUクロック,ないと不安定な動作)
'D0=#0, E0=#1, F0=#2, MROM num:0-3
/*
	基本：
	・SPC7110はROMが物理的に2つあり、それぞれプログラム用とデータ用になっている
	・プログラムROMは天外魔境ZEROで4Mあるためバンク切り替えが必要
	・$4831-$4833に値を書くと$D0:0000-$FF:0000にマップされる
	・$C0:0000-CF:FFFFはプログラムROM
	・$4830はSRAMのコントロール(0x80でEnable)
	・詳しいことはfullsnesへ

	解析メモ：（※個人の感想です）
	・何故か$4831-$4833にただ値を書いてもバンク切り替えが起こらない
	 ->なぜかバンク0固定になる
	 ->$4834に4以上の値を書くと値が反映された
	 ->D0にバンク3をセットしても意図したバンクにならないことがわかった(F0ならOKだった)(なぜかプログラムROMがマップされた)
	 ->どうやら$4834以上の値をバンクコントローラレジスタ$4831-$4833に書き込むと全バンク巻き込んでバンク0になる模様
	 ->4ビットのレジスタで最大0x07まで

	まとめ：
	・たぶん$4834はデータROMの最大バンク数を記述
	・$4834の値以下の値を$4831-$4833に書き込むことができる
	 ->存在しないバンク番号を書き込むとプログラムROMがマップされる
	 ->$4834の値を超えると$4831-$4833の全部を巻き込んでデータROMのバンク0ににされる
	・以上より$4834には0x03を書き込むのがベスト

	追記：
	・SNESバンク D0 はバンク0以外を指定するとプログラムROMになる模様
	　 ->5MB目を吸い出すときはSNESバンクF0を使おう
	・データROMのバンク3を読み出すときには1-3バンク指定し、$4834には03を書き込むことで正常ダンプ成功

*/

Const SNES_SPC7110_VBANKS_COUNT = 3
Const SNES_SPC7110_MMC_REG_SIZE = SNES_SPC7110_VBANKS_COUNT+2
Const SNES_SPC7110_MMC_ADR = &H4830
Function SPC7110_SetBanks(hCOM AS HANDLE,bank AS Long,bSRAM_Enable As BOOL) AS BOOL
	Dim buf[SNES_SPC7110_MMC_REG_SIZE] AS Byte, i AS Long

	'RESET
	SendControl(hCOM,WE or CE or OE)

	For i=0 To SNES_SPC7110_VBANKS_COUNT-1
		buf[i+1] = bank+i
		DBM(sprintfStr("[SPC7110]SET_VBANK%X:%0d ",i,buf[i+1]))
	Next i
	buf[0]=bSRAM_Enable<<7
	buf[4]=&H03

	SendControl(hCOM,RST or CE or OE)
	WriteROM(hCOM,buf,0,SNES_SPC7110_MMC_ADR,SNES_SPC7110_MMC_REG_SIZE,FALSE)
	SendControl(hCOM,DEFAULT_CTRLBUS)
	ReadROM(hCOM,buf,0,SNES_SPC7110_MMC_ADR,SNES_SPC7110_MMC_REG_SIZE,FALSE)

	'check bank
	SPC7110_SetBanks=TRUE
	For i=0 To SNES_SPC7110_VBANKS_COUNT-1
		if buf[i+1] <> bank+i Then SPC7110_SetBanks=FALSE :	ExitFor
	Next i

	if SPC7110_SetBanks=FALSE Then
		DBM("bank change failed")
	End If
End Function

Sub SPC7110_PrintBanks(hCOM AS HANDLE)
	Dim buf[SNES_SPC7110_MMC_REG_SIZE] AS Byte, i AS Long

'	SendControl(hCOM,RST or WE)
	SendControl(hCOM,DEFAULT_CTRLBUS)
	ReadROM(hCOM,buf,0,SNES_SPC7110_MMC_ADR,SNES_SPC7110_MMC_REG_SIZE,FALSE)
	
	if buf[0] And &H80 Then 
		DBM("SRAM-ENABLE")
	Else
		DBM("SRAM-DISABLE")
	End If

	For i=1 To SNES_SPC7110_VBANKS_COUNT
		DBM(sprintfStr("%X00000h-%XFFFFFh : ROM bank%d",&HC+i,&HC+i,buf[i]))
	Next i

	DBM("Logical-MaxBank : "+Str$(buf[4]))
End Sub
