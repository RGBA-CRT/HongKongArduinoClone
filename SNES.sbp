'スーファミシステム系

'-----------------
' Header Defines
'-----------------

Const SFC_SPEC_HEADER_SIZE=&H20+&H10
Const SFC_SPEC_HEADER_ADDR=&HFFC0-&H10

Const OE = 1
Const CE = 2
Const WE = 4
Const RST= 8

Const DEFAULT_CTRLBUS = &H0C	'RST WE

Const HiROM_START_ADR=&HC00000
Const HIROM_SRAM_BANKSIZE = 1024*8

Const SFC_MAP_TYPE_NUM = 8
Enum SFC_MAP_TYPE	'ヘッダのMapModeの下位4ビット
	SFC_MAP_LoROM = 0
	SFC_MAP_HiROM = 1
	SFC_MAP_SDD1= 2
	SFC_MAP_SA1	= 3
	SFC_MAP_ExHiROM = 5
	SFC_MAP_SPC7110 = &H0A
	'ここから特殊処理をしないと判定できないマッパ
	SFC_MAP_SpLoROM = &HF0 '衛星対応カートリッジでかつLoROMで3MBのもの
	SFC_MAP_SF_MENU = &HF1 'SFメモリカートリッジ
End Enum

'スーファミヘッダから取得した情報
'後の都合のいい処理がしてある。
'生ヘッダを見たければrawHeaderにアクセス
Type SFC_CART_INFO
	Title[21] As Byte		'ゲームタイトル
	MapMode As Byte			'FAST+HIROMなど
	ROMType As Byte			'MapModeの下位4ビット
	CartType As Byte		'ROM+SRAM+SFXみたいなの
	ROMSize As DWord		'intのromサイズ
	SRAMSize As DWord		'intのSRAMサイズ
	Country As Byte			'国コード
	Version As Byte			'ROMバージョン
	CheckSum1 As Word		'チェックサム
	CheckSum2 As Word		'チェックサムのNOT
	hasExtraHeader As BOOL	'拡張ヘッダ（FFB0h-FFBFh)があるかどうか
	diableChecksum As BOOL	'MENU PROGRAMとかBSMC等のチェックサムが無効なものに使う
	isLoROM As BOOL			'ROMのマッピングがLoROMなもの。SFC_MAP_LoROM, SA1, SpLoROM, SF_MENUなどでTrueになる
	isBSX  As BOOL			'BSMCスロットがあるかどうか（衛星放送対応カートリッジかどうか）
	isFlashSave AS BOOL		'FLASHセーブかどうか
	MakerCode As Word		'メーカーコード
	MakerName As BytePtr	'メーカーコードから出した文字列
	GameCode[4] As Byte		'ゲームコードの文字列（Extraheaderがある時のみ有効)
	AddrOffset As DWord		'ROMの開始アドレス
	rawHeader As SFC_CART_HEADER
EndType


Type Align(1) SFC_CART_HEADER
	MakerCode 	AS Word	'未使用のこともある
	GameCode	AS DWord
	dummy0[6] 	AS Byte
	ExRamSize 	AS Byte
	ExVersion	AS Byte
	CartSubNum	AS Byte
	'------------------
	GameTitle[20] As Byte
	MapMode 	AS Byte
	CartType 	AS Byte
	RomSize 	AS Byte
	SramSize 	AS Byte
	CountryID	AS Byte
	dummy1		As Byte	'33h固定のはずだが、そうでないものも多い
	Version		As Byte
	Checksum1	AS Word
	Checksum2 	As Word
End Type

'-----------------
' Header Functions
'-----------------

'生のROMヘッダをSFC_CART_INFOに
Sub SloveCartInfo(data As *SFC_CART_HEADER,info As *SFC_CART_INFO)
	'カートリッジのヘッダエリアのデータをSFC_CART_INFOへ格納

	Dim i As Long

	memcpy(VarPtr(info->rawHeader),data,Sizeof(SFC_CART_HEADER))

	memcpy(info,data->GameTitle,21)
	if info->Title[i] = 0 Then
		lstrcpy(info->Title,"CART CONNECTION ERR")
	Else
		'右からスペースをNULL文字で埋めル
		For i=20 To 0 Step -1
			if info->Title[i] <> &H20 And info->Title[i] <> 0 Then	
				exitfor
			Endif
			info->Title[i]=0
		Next i
	End If
	info->Title[21]=0

	info->CartType = data->CartType
	info->MapMode=data->MapMode
	info->ROMType=(info->MapMode And &H0F)

	
	'拡張（？）ヘッダがあるかチェック
	info->hasExtraHeader = ( (data->MakerCode>>8 >= &H20) And _
		(NOT(isSameBin(VarPtr(data->MakerCode),ex"\x00\x00\x00\x00\x00\x00\x00",7))) And _
		(NOT(isSameBin(VarPtr(data->MakerCode),ex"\xFF\xFF\xFF\xFF\xFF\xFF\xFF",7))) ) And &H01

	if info->hasExtraHeader Then
		/*
		'ヘッダのコードは文字列で来る
		'code = 下位 or 上位<<4
		Dim code As Word
		code=data->MakerCode
		if code=0 Then code=&H3030
		code= ((code And &HFF00) -&H3000)>>8 or ( (code And &H0F) + (&H09 * ((code>>6) And &H01)) << 4 )
		info->MakerCode=code
*/
		info->MakerCode=data->MakerCode
		info->MakerName=getLicenceString(data->MakerCode)
		lstrcpy(info->GameCode,Dw2Str(info->rawHeader.GameCode))
		if lstrcmp(info->GameCode,"    ")=0 Then lstrcpy(info->GameCode,"????")
	End If

	if data->RomSize<>0 then
		info->ROMSize=&H0400 << data->RomSize
	Else
		info->ROMSize=0
	End If

	if data->SramSize<>0 then
		info->SRAMSize = &H0400 << data->SramSize
	Else
		info->SRAMSize=0
	End If

	if info->ROMType=SFC_MAP_LoROM or info->ROMType=SFC_MAP_SpLoROM or info->ROMType=SFC_MAP_SF_MENU Then
		info->AddrOffset=0
		info->isLoROM=TRUE
	Else
		info->AddrOffset=HiROM_START_ADR
		info->isLoROM=FALSE
	End If


	info->Country = data->CountryID
	info->Version = data->Version
	info->CheckSum1 = data->Checksum1
	info->CheckSum2 = data->Checksum2

	'SpecialLoROMはLoROMの衛星対応カートリッジで3MB目を吸うときにバンク切り替えが必要
	'品番がSHVC-ZxxJであるものは衛星対応カートリッジ
	'ここではダビスタ96とサウンドノベルツクールとBSXがヒットするはず。
	'BSXは1MBなのでバンク切り替え必要なし
	If info->GameCode[0]=Asc("Z")  And info->GameCode[3]=Asc("J") Then 
		info->isBSX=TRUE
		if info->ROMType = SFC_MAP_LoROM Then
			if info->ROMSize>1024*1024*2 Then
				info->ROMType=SFC_MAP_SpLoROM
				info->ROMSize=1024*1024*3
			End If
		End If
	End If

	'タイトルがMENU PROGRAMならSFM確定
	if lstrcmp("MENU PROGRAM",info->Title)=0 Then
		info->ROMType=SFC_MAP_SF_MENU
		info->diableChecksum=TRUE
	End If

	'メーカがEJ（NTT DATA）ならFlashSaveカセット
	if info->MakerCode=&H4A45 Then
		info->isFlashSave=TRUE
		info->SRAMSize=(128*1024) AS DWord
	End If

EndSub

Function isSnesHeader(header As *SFC_CART_HEADER) As BOOL
	Dim i As Long
	For i=0 To 19
		if header->GameTitle[i] < &H20 Then 
			if NOT(i>4 And header->GameTitle[i]=0) Then	Goto *ISH_ERR
		End If
	Next i
	'サイズチェック
	if header->RomSize > &H0D Then Goto *ISH_ERR	'Over 64Mbit
	isSnesHeader=TRUE
	ExitFunction

*ISH_ERR
	isSnesHeader=FALSE
End Function



'----------------
' ROM Functions
'----------------
Sub SA1_Init()
	SetCPU_Clock(hCOM,HKAC_CLOCK_CPU_OVERCLOCKED)
	SetCPU_Clock(hCOM,HKAC_CLOCK_CPU_ENABLED)

	Sleep(500)
End Sub
Sub SA1_DeInit()
	SetCPU_Clock(hCOM,HKAC_CLOCK_NORMAL)
End Sub


Sub SA1_BankCtrl(hSerial AS HANDLE,startBank AS Long)
	SetCartRegister(&H00,&H2220,startBank+0,FALSE)	
	SetCartRegister(&H00,&H2221,startBank+1,FALSE)	
	SetCartRegister(&H00,&H2222,startBank+2,FALSE)	
	SetCartRegister(&H00,&H2223,startBank+3,FALSE)	
End Sub


'ROMの吸出し
Sub DumpFullROM(info As *SFC_CART_INFO,Path As BytePtr)
	Dim MAX_CONTINUE=DEFAULT_CONTINUE As DWord
	Dim DUMP_BUFFER_SIZE=DEFAULT_DUMP_SIZE As DWord
	Dim DumpAddress As DWord, offset As DWord, ret As DWord
	Dim CheckSum=0 As DWord,bufChecksum As DWord
	Dim bBankChanged=FALSE As BOOL	'8MBitBank

	Dim buf As BytePtr,nowSize As DWord,Size As DWord,bRomType As Byte
	Dim hout As HANDLE,C As Long	'コンテニューカウンタ
	Dim lt As DWord,time As DWord

	'アドレス系準備
	offset=info->AddrOffset	'固定
	DumpAddress=offset	'インクリメントしていく
	Size=info->ROMSize
	SendControl(hCOM,DEFAULT_CTRLBUS)

	'設定ファイル読み込み
	MAX_CONTINUE=GetPrivateProfileInt(ProgramName,"MaxContinue",DEFAULT_CONTINUE,INIFILE_PATH)
	DUMP_BUFFER_SIZE=GetPrivateProfileInt(ProgramName,"DumpBufferSize",DEFAULT_DUMP_SIZE,INIFILE_PATH)
	if DUMP_BUFFER_SIZE <= 0 Then DUMP_BUFFER_SIZE=DEFAULT_DUMP_SIZE

	'特殊系のセットアップ
	if info->ROMType=SFC_MAP_SA1 And info->isBSX Then
		'バス釣りのときだけ実行する処理（判定がザルなようであれば修正）
/*		SA1_Init()
		SA1_BankCtrl(hCOM,0)
		DBM("バス釣り用SA1初期化処理実行")
*/
	Elseif info->ROMType=SFC_MAP_SDD1 Then
		SDD1_SetBanks(hCOM,0)
		SDD1_PrintBanks(hCOM)

		DUMP_BUFFER_SIZE=DEFAULT_DUMP_SIZE	'0x400000で必ず止まる必要が有るため

	Elseif info->ROMType=SFC_MAP_SPC7110 Then
		DBM("Checking SPC7110...")
		if SPC7110_SetBanks(hCOM,1,FALSE) = FALSE or _
			SPC7110_SetBanks(hCOM,0,FALSE) = FALSE Then
			ErrMes(hMainWnd,ex"SPC7110のセットアップに失敗しました。\nSA-1追加回路が接続されているか確認し、Arduinoを再起動してください。","SPC7110 Bank Control Error",0)
			ExitSub
		End If
		SPC7110_PrintBanks(hCOM)
	End If

	'UI系
	SendMessage( MWnd(hProg), PBM_SETPOS, 0, 0 )
	SendMessage(MWnd(hProg), PBM_SETRANGE,0,MAKELONG(0,(Size/DUMP_BUFFER_SIZE) As Word))
	SendMessage(MWnd(hProg), PBM_SETSTEP,1,0)
	SetDlgEnable(STATUS_DUMPING)

	'ダンプバッファの作成	
	buf=calloc(DUMP_BUFFER_SIZE+12)
	hout=OpenFile(Path,GENERIC_WRITE)

	DBM("(Pless Esc to Cancel)")
	DBMN("Dumping")

	lt=GetTickCount()

	Do
		'ESCキーでキャンセル
		PumpMessage()
		if GetCancelKey() Then DBM(ex"\r\nCanceled by the user."):Goto *EXIT_DUMP

		'吸出し＆データチェック
		ret=ReadROM(hCOM,buf, 0, DumpAddress, DUMP_BUFFER_SIZE,info->isLoROM)
		if ret=0 Then DBM("ERROR!"):Goto *EXIT_DUMP
		if ret<>DUMP_BUFFER_SIZE Then 
			DBMN(ex"[x"+Str$(C)+ex"]")
			C++
			'if C>MAX_CONTINUE Then DBM("Over retry count.")
			Continue
		endif

		'ファイルへ出力
		OutFile(hout,buf,DUMP_BUFFER_SIZE)

		'バッファのチェックサム計算
		bufChecksum=CalcChkSum(buf,DUMP_BUFFER_SIZE)

		'3MBの時はラスト8Mbitを再加算
		if DumpAddress>=1024*1024*2 Then
			if info->ROMSize=1024*1024*3 Then
				bufChecksum+=bufChecksum
			End If
		End If
		
		'チェックサム加算
		CheckSum+=bufChecksum

		'次のアドレスを計算
		DumpAddress+=DUMP_BUFFER_SIZE
		'特殊系のバンク切り替え
		if info->ROMType=SFC_MAP_SpLoROM Then
			if DumpAddress-offset=&H200000 Then
				'吸出しアドレスをバンク80hに飛ばす
				offset=&H400000		'LoROMアドレスで400000h, HiROMアドレス(実アドレス)で800000h
				DumpAddress=offset
				Size=&H100000

				DBM(ex"\r\n[SpLoROM]バンク切り替え80h-")
			Endif

		Else if DumpAddress-offset=&H400000 Then
			'4MB超えする時
			/*if info->ROMType=SFC_MAP_SA1 And info->ROMSize > &H400000 Then
				if bBankChanged=FALSE Then
					DBM(ex"\r\n[SA-1]Bank Change: 04h-07h")
					SA1_BankCtrl(hCOM,4)
					bBankChanged=TRUE
					DumpAddress=offset	'アドレスリセット
				Else
					ExitDo
				End If
	
			Else */if info->ROMType=SFC_MAP_SDD1 Then
				if bBankChanged=FALSE Then
					'ROMバンク0-3を吸い出したので、4-7バンクを吸い出す
					DBM(ex"\r\n")
					bBankChanged=TRUE
					SDD1_SetBanks(hCOM,4)
					SDD1_PrintBanks(hCOM)
					DBM(ex"")

					DumpAddress=offset	'アドレスリセット
				Else
					'4-7バンクを吸い出し終わったので終了
					ExitDo
				End If

			Elseif info->ROMType=SFC_MAP_SPC7110 Then
				if bBankChanged=TRUE Then ExitDo
				DBM("")
				bBankChanged=TRUE
				SPC7110_SetBanks(hCOM,1,FALSE) 'D0:1,E0:2,F0:3 ... F0:0000にデータROMのバンク3をマップ
				DumpAddress=offset+&H300000	'F0:0000からリスタート

			Elseif info->ROMType=SFC_MAP_ExHiROM Then
				'わざわざバンク切り替え使わなくてもダンプできるけど一応

				if bBankChanged Then
					ExitDo
				Else
					DumpAddress=&H400000
					offset=&H400000
					DBM("[ExHiROM]ROM P1 Bank:40-")
					bBankChanged=TRUE
				End If
			End If

		End If
		if DumpAddress-offset>=Size Then ExitDo

		'進捗表示
		SendMessage(GetDlgItem(hMainWnd,hProg),PBM_STEPIT,0,0)
		SetWindowText(MWnd(Static7),Str$(Int(((DumpAddress-offset)*(bBankChanged+1))/Size*100))+"%")
		DBMN(".")
	Loop
	time=GetTickCount()-lt

	DBM(ex"\r\nTime  : "+Str$(time)+ex"ms")
	DBM("Speed : "+Str$(Int(Size/(time/1000)) As Long)+ex"byte/sec\r\n")

	DBM("HeaderSum:"+Hex$(info->CheckSum2))
	DBM("ActualSum:"+Hex$(CheckSum And &HFFFF))
	if info->CheckSum2=(CheckSum And &HFFFF) and info->CheckSum1=(not(CheckSum) And &HFFFF) Then
		DBM(ex"Checksum OK")
		DBM(ex"Successful!!!")
	Else
		if info->diableChecksum Then
			DBM("Checksum is disabled.")
		Else
			DBM(ex"Checksum Error!!!")
			MessageBoxf(hMainWnd,"ROM Dump Error",MB_ICONERROR, _
				ex"Checksum Error!\nFailed to dump ROM.\nChecksum1 : %04X -> %04X\nChecksum2 : %04X -> %04X", info->CheckSum1,(not(CheckSum) And &HFFFF),info->CheckSum2,(CheckSum And &HFFFF))
		End If
	Endif

*EXIT_DUMP

/*	if info->ROMType=SFC_MAP_SA1 And info->isBSX Then
		SA1_BankCtrl(hCOM,0)
		SA1_DeInit()
	End If
*/
	SendMessage( MWnd(hProg), PBM_SETPOS, 0, 0 )
	SetWindowText(MWnd(Static7),"100%")
	SetDlgEnable(STATUS_CONNECTED)

	CloseHandle(hout)
	free(buf)

	SetAddress(hCOM,0,FALSE)

	FlushCom(hCOM)
	
	DBM("")
EndSub

'チェックサム計算
Function checkContiguous(adr As BytePtr,size As DWord) As Long
	Dim i As Long,someCount As DWord,last As Byte
	For i=0 To size
		if last=adr[i] Then
			/*if last<>0 Then*/ someCount++	'0連続はよくあるので除外
			
			if someCount=>&H1000 Then DBM(Hex$(last)+"fill"):ExitFunction
		Else
			someCount=0
		End If
		last=adr[i]
	Next i
	checkContiguous=TRUE
End Function

Function CalcChkSum(data As BytePtr,length As DWord) As DWord
	Dim i As DWord
	CalcChkSum=0
	Do
		CalcChkSum += data[i]
		if i => length-1 Then ExitDo
		i++
	Loop
End Function


'---------------------------
' SRAM Functions
'---------------------------

Const SRAM_CTRL_SA1     = &H01000000
Const SRAM_CTRL_SPC7110 = &H02000000

Const SFC_SRAM_MODEL_LENGTH = 3 'sizeof(SFC_SRAM_MODEL)/4-1
Type SFC_SRAM_MODEL
	adr As DWord		'セーブ用SRAMのアドレス
	bankStep As DWord	'バンク間の差 (BANK0 70:0000, BANK1 71:0000なら0x010000)
	bankSize As DWord	'そのバンクにおけるSRAM領域のサイズ
	ctrlBus As DWord	'CEとかOEとかWEとか　書くとDisableになる。例外としてSRAM_CTRL_???の代入が許可されている
End Type

Dim SFC_LoROM_SRAM_MODEL[3]=[
	&H700000,
	&H010000,
	&H008000,
	RST
] As DWord

Dim SFC_HiROM_SRAM_MODEL[3]=[
'	&H206000,
'	SUPER DONKEY KONG 2 は 30:6000h ~
	&H306000,
	&H010000,
	&H002000,
	RST or CE
] As DWord

Dim SFC_BSX_SRAM_MODEL[3]=[
	&H105000,
	&H010000,
	&H001000,
	RST or CE
] As DWord

'テイルズオブファンタジア用
Dim SFC_ExHiROM_SRAM_MODEL[3]=[
	&HB06000,
	&H010000,
	&H002000,
	RST or CE
] As DWord

Dim SFC_SDD1_SRAM_MODEL[3]=[
	&H806000,
	&H010000,
	&H002000,
	RST 
] As DWord

Dim SFC_SA1_SRAM_MODEL[3]=[
	&H400000,
	&H010000,
	&H010000,
	RST or SRAM_CTRL_SA1
] As DWord

Dim SFC_SA1_WRITE_SRAM_MODEL[3]=[
	&H006000,
	&H010000,
	&H002000,
	RST or SRAM_CTRL_SA1
] As DWord

Dim SFC_SPC7110_SRAM_MODEL[3]=[
	&H306000,
	&H010000,
	&H002000,
	RST or CE or SRAM_CTRL_SPC7110
] As DWord

'JRA PAT用（Flash）
Dim SFC_JRA_SRAM_MODEL[3]=[
	&HC00000,
	&H010000,
	&H008000,
	RST or CE
] As DWord


Function GetSramModel(info AS *SFC_CART_INFO) AS *SFC_SRAM_MODEL
	if info->CartType = &HE5 Then
		GetSramModel=SFC_BSX_SRAM_MODEL

	Elseif info->ROMType = SFC_MAP_SDD1 Then
		GetSramModel=SFC_SDD1_SRAM_MODEL

	Elseif info->ROMType = SFC_MAP_SPC7110 Then
		GetSramModel=SFC_SPC7110_SRAM_MODEL

	Elseif info->ROMType = SFC_MAP_ExHiROM Then
		GetSramModel=SFC_ExHiROM_SRAM_MODEL

	Elseif info->ROMType = SFC_MAP_SA1 Then
		GetSramModel=SFC_SA1_SRAM_MODEL

	Elseif info->isFlashSave Then
		GetSramModel=SFC_JRA_SRAM_MODEL

	Elseif info->isLoROM Then
		GetSramModel=SFC_LoROM_SRAM_MODEL

	Else
		GetSramModel=SFC_HiROM_SRAM_MODEL

	End If
End Function

Sub DumpSRAM(hSerial As HANDLE,info As *SFC_CART_INFO,FileName As BytePtr)
	dim fout As File

	if info->SRAMSize=0 Then DBM("SRAM Size is zero."):ExitSub

	if fout.openFile(FileName,GENERIC_WRITE) = FALSE Then
		DBM("Cannot open file! "+MakeStr(FileName))
		ErrMes(hMainWnd,"SRAMを保存できませんでした。","File I/O Error",0,GetLastError())
		ExitSub
	Endif

	Dim sraminfo As *SFC_SRAM_MODEL
	Dim bankCount As DWord
	Dim lastDumpSize AS DWord
	Dim buf As BytePtr

	sraminfo=GetSramModel(info)

	if sraminfo->ctrlBus And SRAM_CTRL_SPC7110 Then
			SPC7110_SetBanks(hCOM,0,TRUE)	'SRAM ENABLE
	End If

	bankCount=Int(info->SRAMSize / sraminfo->bankSize)
	lastDumpSize=info->SRAMSize - bankCount*sraminfo->bankSize
	buf=calloc(sraminfo->bankSize)

	DBM("Dumping SRAM...")
	DBM("SramSize = "+Str$(info->SRAMSize/1024)+"KB")
	DBM("bankSize ="+Str$(sraminfo->bankSize/1024)+"KB")
	DBM("bankCount="+Str$(bankCount))

	SendControl(hSerial,sraminfo->ctrlBus or WE)

	Dim i As Long,readAddr AS DWord
	Do
		if i => bankCount Then ExitDo
		if GetCancelKey() Then DBM(ex"\r\nCanceled by the user."):Goto *EXIT_SRAM_DUMP

		readAddr= sraminfo->adr + i*sraminfo->bankStep
		DBM(sprintfStr("SRAM %02X:%04X +%04X",readAddr>>16,readAddr And &HFFFF,sraminfo->bankSize))
		
		SendControl(hSerial,sraminfo->ctrlBus or WE)
		ReadROM(hSerial, buf, 0, readAddr, sraminfo->bankSize, FALSE)
		fout.write(buf,sraminfo->bankSize)
		i++
		PumpMessage()
	Loop
	
	if lastDumpSize > 0 Then
		DBM(sprintfStr("LastSRAM %02X:%04X +%04X",i+sraminfo->adr>>16,sraminfo->adr And &HFFFF,lastDumpSize))
		ReadROM(hSerial,buf, 0, sraminfo->adr + i*sraminfo->bankStep, lastDumpSize,FALSE)
		fout.write(buf,lastDumpSize)
	End If
	
	DBM(ex"SRAM dumping successful!!!\r\n")

*EXIT_SRAM_DUMP
	if sraminfo->ctrlBus And SRAM_CTRL_SPC7110 Then
			SPC7110_SetBanks(hCOM,0,FALSE)	'SRAM ENABLE
	End If

	SendControl(hSerial,DEFAULT_CTRLBUS)

	fout.close()
	free(buf)

End Sub

'Writing SA-1 SRAM routine is based on sanni's cartreader.
Sub WriteSRAM(hSerial As HANDLE,info As *SFC_CART_INFO,FileName As BytePtr)
	Dim fin AS File

	'諸計算
	Dim sraminfo As *SFC_SRAM_MODEL
	Dim bankCount As DWord
	Dim lastDumpSize AS DWord
	Dim buf As BytePtr

	sraminfo=GetSramModel(info)

	if sraminfo->ctrlBus And SRAM_CTRL_SA1 Then
		'SA-1レジスタセットアップ
		SetCPU_Clock(hCOM,HKAC_CLOCK_CPU_ENABLED) 'Enable CPU Clock for Writing SA-1 Register 
		Sleep(500)
		SetCartRegister(&H00,&H2224,&H00,FALSE)	'SNES CPU BW-RAM Mapping to 6000h-7FFFh (W)
		SetCartRegister(&H00,&H2226,&H80,FALSE)	'SNES CPU BW-RAM Write Enable (W)
		SetCartRegister(&H00,&H2228,&H00,FALSE)	'BW-RAM Write-Protected Area (W)
		Sleep(100)

		'書き込み用のメモリモデルを持ってくる
		sraminfo=SFC_SA1_WRITE_SRAM_MODEL

	Else if sraminfo->ctrlBus And SRAM_CTRL_SPC7110 Then
		SPC7110_SetBanks(hCOM,0,TRUE)	'SRAM ENABLE
	End If

	bankCount=Int(info->SRAMSize / sraminfo->bankSize)
	lastDumpSize=info->SRAMSize - bankCount*sraminfo->bankSize
	buf=calloc(info->SRAMSize)

	DBM("Writing SRAM...")
	DBM("SramSize = "+Str$(info->SRAMSize/1024)+"KB")
	DBM("bankSize = "+Str$(sraminfo->bankSize/1024)+"KB")
	DBM("bankCount= "+Str$(bankCount))

	'バッファ生成	
	if fin.openFile(FileName,GENERIC_READ) = FALSE Then
		DBM("Cannot open file! "+MakeStr(FileName))
		ErrMes(hMainWnd,"SRAMファイルが開けませんでした。","File Open Error",0,GetLastError())
		ExitSub
	Endif
	fin.read(buf,info->SRAMSize)
	fin.close()

	'ライト開始
	SendControl(hSerial,sraminfo->ctrlBus or OE)

	Dim i AS DWord, writeAddr AS DWord
	Do
		if i => bankCount Then ExitDo

		writeAddr= sraminfo->adr + i*sraminfo->bankStep
		if  sraminfo->ctrlBus And SRAM_CTRL_SA1 Then
			'SA-1 SRAM バンク切り替え
			SetCartRegister(&H00,&H2224,i   ,FALSE)	'SNES CPU BW-RAM Mapping to 6000h-7FFFh (W)
			SetCartRegister(&H00,&H2226,&H80,FALSE)	'SNES CPU BW-RAM Write Enable (W)
			writeAddr= sraminfo->adr
		End If
		DBM(sprintfStr("SRAM %02X:%04X +%04X",writeAddr>>16,writeAddr And &HFFFF,sraminfo->bankSize))
		
		SendControl(hSerial,sraminfo->ctrlBus or WE)
		WriteROM(hSerial, buf + i*sraminfo->bankSize, 0, writeAddr, sraminfo->bankSize, FALSE)

		i++
		PumpMessage()
	Loop
	
	if lastDumpSize > 0 Then
		DBM(sprintfStr("LastSRAM %02X:%04X +%04X",i+sraminfo->adr>>16,sraminfo->adr And &HFFFF,lastDumpSize))
		WriteROM(hSerial,buf + i*sraminfo->bankSize, 0, sraminfo->adr + i*sraminfo->bankStep, lastDumpSize,FALSE)
	End If
	
	if sraminfo->ctrlBus And SRAM_CTRL_SA1 Then
		'SRAMを最後まで書き込んだ後、何故かSRAMの先頭バイトが0x00になってしまうので再度書き込み
		SetCartRegister(&H00, &H2224, 0   , FALSE)	'SNES CPU BW-RAM Mapping to 6000h-7FFFh (W)
		SetCartRegister(&H00, &H2226, &H80, FALSE)	'SNES CPU BW-RAM Write Enable (W)
		SetCartRegister(&H00, sraminfo->adr, buf[0], FALSE)	'Rewrite First Byte

		'CPUクロックを停止してフィニッシュ
		SetCPU_Clock(hCOM,HKAC_CLOCK_NORMAL)

	Else if sraminfo->ctrlBus And SRAM_CTRL_SPC7110 Then
		SPC7110_SetBanks(hCOM,0,FALSE)	'SRAM DISABLE

	End If

	SendControl(hSerial,DEFAULT_CTRLBUS)
	free(buf)
	DBM(ex"SRAM writing successful!!!\r\n")
	
	SetAddress(hSerial,&H000000 ,FALSE)

End Sub




'------------------------------
' Memory Controller Functions
'------------------------------

'SDD1のバンクをセットアップ
'SNESバンクC0, D0, E0, F0にbankStartから始まるROMバンク(1MByteごと)を割り当て
Sub SDD1_SetBanks(hCOM As HANDLE,bankStart As Long)
	Dim buf[3] As Byte, i As Long
	DBM(sprintfStr("Setting S-DD1 bank %d-%d...",bankStart,bankStart+3))

	For i=0 To 3
		buf[i] = (bankStart+i) As Byte
	Next i

	SendControl(hCOM,RST or OE)
	WriteROM(hCOM,buf,0,&H004804,4,FALSE)
	SendControl(hCOM,DEFAULT_CTRLBUS)
End Sub

'現在のSDD1のバンク設定をGUIに出力
Sub SDD1_PrintBanks(hCOM As HANDLE)
	Dim buf[3] As Byte, i As Long

	SendControl(hCOM,DEFAULT_CTRLBUS)
	ReadROM(hCOM,buf,0,&H004804,4,FALSE)
			
	For i=0 To 3
		DBM(sprintfStr("%X00000h-%XFFFFFh : ROM bank%d",&HC+i,&HC+i,buf[i]))
	Next i

End Sub



Const SNES_SPC7110_VBANKS_COUNT = 3
Const SNES_SPC7110_MMC_REG_SIZE = SNES_SPC7110_VBANKS_COUNT+2
Const SNES_SPC7110_MMC_ADR = &H4830
Function SPC7110_SetBanks(hCOM As HANDLE,bank As Long,bSRAM_Enable As BOOL) As BOOL
	Dim buf[SNES_SPC7110_MMC_REG_SIZE] As Byte, i As Long

	if bSRAM_Enable Then
		DBM("[SPC7110]SRAM Enable")
	Else
		DBM("[SPC7110]SRAM Disable")
	Endif 

	'RESET
	SendControl(hCOM,WE or CE or OE)

	For i=0 To SNES_SPC7110_VBANKS_COUNT-1
		buf[i+1] = (bank+i) As Byte
		DBM(sprintfStr("[SPC7110]SET_VBANK%X:%0d ",i,buf[i+1]))
	Next i
	buf[0]=(bSRAM_Enable<<7) As Byte
	buf[4]=&H03 '3バンク変更する

	SendControl(hCOM,RST or CE or OE)
	WriteROM(hCOM,buf,0,SNES_SPC7110_MMC_ADR,SNES_SPC7110_MMC_REG_SIZE,FALSE)
	SendControl(hCOM,DEFAULT_CTRLBUS)
	ReadROM(hCOM,buf,0,SNES_SPC7110_MMC_ADR,SNES_SPC7110_MMC_REG_SIZE,FALSE)

	'check bank
	SPC7110_SetBanks=TRUE
	For i=0 To SNES_SPC7110_VBANKS_COUNT-1
		if buf[i+1] <> bank+i Then SPC7110_SetBanks=FALSE :	ExitFor
	Next i

	if SPC7110_SetBanks=FALSE Then
		DBM("bank change failed")
	End If
End Function

Sub SPC7110_PrintBanks(hCOM As HANDLE)
	Dim buf[SNES_SPC7110_MMC_REG_SIZE] As Byte, i As Long

'	SendControl(hCOM,RST or WE)
	SendControl(hCOM,DEFAULT_CTRLBUS)
	ReadROM(hCOM,buf,0,SNES_SPC7110_MMC_ADR,SNES_SPC7110_MMC_REG_SIZE,FALSE)
	
	if buf[0] And &H80 Then 
		DBM("SRAM-ENABLE")
	Else
		DBM("SRAM-DISABLE")
	End If

	For i=1 To SNES_SPC7110_VBANKS_COUNT
		DBM(sprintfStr("%X00000h-%XFFFFFh : ROM bank%d",&HC+i,&HC+i,buf[i]))
	Next i

	DBM("Logical-MaxBank : "+Str$(buf[4]))
End Sub
